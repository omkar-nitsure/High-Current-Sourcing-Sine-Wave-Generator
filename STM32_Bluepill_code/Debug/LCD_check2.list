
LCD_check2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000037bc  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003c0  080038c8  080038c8  000138c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003c88  08003c88  00020064  2**0
                  CONTENTS
  4 .ARM          00000000  08003c88  08003c88  00020064  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003c88  08003c88  00020064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003c88  08003c88  00013c88  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003c8c  08003c8c  00013c8c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000064  20000000  08003c90  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001f0  20000064  08003cf4  00020064  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000254  08003cf4  00020254  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020064  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002008d  2**0
                  CONTENTS, READONLY
 13 .debug_info   000095ba  00000000  00000000  000200d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001b30  00000000  00000000  0002968a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000ae8  00000000  00000000  0002b1c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000085f  00000000  00000000  0002bca8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00017d8b  00000000  00000000  0002c507  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000c6b7  00000000  00000000  00044292  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008ad1b  00000000  00000000  00050949  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000031c8  00000000  00000000  000db664  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000066  00000000  00000000  000de82c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000064 	.word	0x20000064
 8000128:	00000000 	.word	0x00000000
 800012c:	080038b0 	.word	0x080038b0

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000068 	.word	0x20000068
 8000148:	080038b0 	.word	0x080038b0

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <Lcd_create>:
 */
Lcd_HandleTypeDef Lcd_create(
		Lcd_PortType port[], Lcd_PinType pin[],
		Lcd_PortType rs_port, Lcd_PinType rs_pin,
		Lcd_PortType en_port, Lcd_PinType en_pin, Lcd_ModeTypeDef mode)
{
 800015c:	b5b0      	push	{r4, r5, r7, lr}
 800015e:	b08a      	sub	sp, #40	; 0x28
 8000160:	af00      	add	r7, sp, #0
 8000162:	60f8      	str	r0, [r7, #12]
 8000164:	60b9      	str	r1, [r7, #8]
 8000166:	607a      	str	r2, [r7, #4]
 8000168:	603b      	str	r3, [r7, #0]
	Lcd_HandleTypeDef lcd;

	lcd.mode = mode;
 800016a:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 800016e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

	lcd.en_pin = en_pin;
 8000172:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8000176:	84bb      	strh	r3, [r7, #36]	; 0x24
	lcd.en_port = en_port;
 8000178:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800017a:	623b      	str	r3, [r7, #32]

	lcd.rs_pin = rs_pin;
 800017c:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800017e:	83bb      	strh	r3, [r7, #28]
	lcd.rs_port = rs_port;
 8000180:	683b      	ldr	r3, [r7, #0]
 8000182:	61bb      	str	r3, [r7, #24]

	lcd.data_pin = pin;
 8000184:	687b      	ldr	r3, [r7, #4]
 8000186:	617b      	str	r3, [r7, #20]
	lcd.data_port = port;
 8000188:	68bb      	ldr	r3, [r7, #8]
 800018a:	613b      	str	r3, [r7, #16]

	Lcd_init(&lcd);
 800018c:	f107 0310 	add.w	r3, r7, #16
 8000190:	4618      	mov	r0, r3
 8000192:	f000 f80e 	bl	80001b2 <Lcd_init>

	return lcd;
 8000196:	68fb      	ldr	r3, [r7, #12]
 8000198:	461d      	mov	r5, r3
 800019a:	f107 0410 	add.w	r4, r7, #16
 800019e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80001a0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80001a2:	e894 0003 	ldmia.w	r4, {r0, r1}
 80001a6:	e885 0003 	stmia.w	r5, {r0, r1}
}
 80001aa:	68f8      	ldr	r0, [r7, #12]
 80001ac:	3728      	adds	r7, #40	; 0x28
 80001ae:	46bd      	mov	sp, r7
 80001b0:	bdb0      	pop	{r4, r5, r7, pc}

080001b2 <Lcd_init>:

/**
 * Initialize 16x2-lcd without cursor
 */
void Lcd_init(Lcd_HandleTypeDef * lcd)
{
 80001b2:	b580      	push	{r7, lr}
 80001b4:	b082      	sub	sp, #8
 80001b6:	af00      	add	r7, sp, #0
 80001b8:	6078      	str	r0, [r7, #4]
	if(lcd->mode == LCD_4_BIT_MODE)
 80001ba:	687b      	ldr	r3, [r7, #4]
 80001bc:	7d9b      	ldrb	r3, [r3, #22]
 80001be:	2b00      	cmp	r3, #0
 80001c0:	d10c      	bne.n	80001dc <Lcd_init+0x2a>
	{
			lcd_write_command(lcd, 0x33);
 80001c2:	2133      	movs	r1, #51	; 0x33
 80001c4:	6878      	ldr	r0, [r7, #4]
 80001c6:	f000 f87b 	bl	80002c0 <lcd_write_command>
			lcd_write_command(lcd, 0x32);
 80001ca:	2132      	movs	r1, #50	; 0x32
 80001cc:	6878      	ldr	r0, [r7, #4]
 80001ce:	f000 f877 	bl	80002c0 <lcd_write_command>
			lcd_write_command(lcd, FUNCTION_SET | OPT_N);				// 4-bit mode
 80001d2:	2128      	movs	r1, #40	; 0x28
 80001d4:	6878      	ldr	r0, [r7, #4]
 80001d6:	f000 f873 	bl	80002c0 <lcd_write_command>
 80001da:	e003      	b.n	80001e4 <Lcd_init+0x32>
	}
	else
		lcd_write_command(lcd, FUNCTION_SET | OPT_DL | OPT_N);
 80001dc:	2138      	movs	r1, #56	; 0x38
 80001de:	6878      	ldr	r0, [r7, #4]
 80001e0:	f000 f86e 	bl	80002c0 <lcd_write_command>


	lcd_write_command(lcd, CLEAR_DISPLAY);						// Clear screen
 80001e4:	2101      	movs	r1, #1
 80001e6:	6878      	ldr	r0, [r7, #4]
 80001e8:	f000 f86a 	bl	80002c0 <lcd_write_command>
	lcd_write_command(lcd, DISPLAY_ON_OFF_CONTROL | OPT_D);		// Lcd-on, cursor-off, no-blink
 80001ec:	210c      	movs	r1, #12
 80001ee:	6878      	ldr	r0, [r7, #4]
 80001f0:	f000 f866 	bl	80002c0 <lcd_write_command>
	lcd_write_command(lcd, ENTRY_MODE_SET | OPT_INC);			// Increment cursor
 80001f4:	2106      	movs	r1, #6
 80001f6:	6878      	ldr	r0, [r7, #4]
 80001f8:	f000 f862 	bl	80002c0 <lcd_write_command>
}
 80001fc:	bf00      	nop
 80001fe:	3708      	adds	r7, #8
 8000200:	46bd      	mov	sp, r7
 8000202:	bd80      	pop	{r7, pc}

08000204 <Lcd_int>:

/**
 * Write a number on the current position
 */
void Lcd_int(Lcd_HandleTypeDef * lcd, int number)
{
 8000204:	b580      	push	{r7, lr}
 8000206:	b086      	sub	sp, #24
 8000208:	af00      	add	r7, sp, #0
 800020a:	6078      	str	r0, [r7, #4]
 800020c:	6039      	str	r1, [r7, #0]
	char buffer[11];
	sprintf(buffer, "%d", number);
 800020e:	f107 030c 	add.w	r3, r7, #12
 8000212:	683a      	ldr	r2, [r7, #0]
 8000214:	4906      	ldr	r1, [pc, #24]	; (8000230 <Lcd_int+0x2c>)
 8000216:	4618      	mov	r0, r3
 8000218:	f002 fe98 	bl	8002f4c <siprintf>

	Lcd_string(lcd, buffer);
 800021c:	f107 030c 	add.w	r3, r7, #12
 8000220:	4619      	mov	r1, r3
 8000222:	6878      	ldr	r0, [r7, #4]
 8000224:	f000 f806 	bl	8000234 <Lcd_string>
}
 8000228:	bf00      	nop
 800022a:	3718      	adds	r7, #24
 800022c:	46bd      	mov	sp, r7
 800022e:	bd80      	pop	{r7, pc}
 8000230:	080038c8 	.word	0x080038c8

08000234 <Lcd_string>:

/**
 * Write a string on the current position
 */
void Lcd_string(Lcd_HandleTypeDef * lcd, char * string)
{
 8000234:	b590      	push	{r4, r7, lr}
 8000236:	b085      	sub	sp, #20
 8000238:	af00      	add	r7, sp, #0
 800023a:	6078      	str	r0, [r7, #4]
 800023c:	6039      	str	r1, [r7, #0]
	for(uint8_t i = 0; i < strlen(string); i++)
 800023e:	2300      	movs	r3, #0
 8000240:	73fb      	strb	r3, [r7, #15]
 8000242:	e00a      	b.n	800025a <Lcd_string+0x26>
	{
		lcd_write_data(lcd, string[i]);
 8000244:	7bfb      	ldrb	r3, [r7, #15]
 8000246:	683a      	ldr	r2, [r7, #0]
 8000248:	4413      	add	r3, r2
 800024a:	781b      	ldrb	r3, [r3, #0]
 800024c:	4619      	mov	r1, r3
 800024e:	6878      	ldr	r0, [r7, #4]
 8000250:	f000 f864 	bl	800031c <lcd_write_data>
	for(uint8_t i = 0; i < strlen(string); i++)
 8000254:	7bfb      	ldrb	r3, [r7, #15]
 8000256:	3301      	adds	r3, #1
 8000258:	73fb      	strb	r3, [r7, #15]
 800025a:	7bfc      	ldrb	r4, [r7, #15]
 800025c:	6838      	ldr	r0, [r7, #0]
 800025e:	f7ff ff75 	bl	800014c <strlen>
 8000262:	4603      	mov	r3, r0
 8000264:	429c      	cmp	r4, r3
 8000266:	d3ed      	bcc.n	8000244 <Lcd_string+0x10>
	}
}
 8000268:	bf00      	nop
 800026a:	bf00      	nop
 800026c:	3714      	adds	r7, #20
 800026e:	46bd      	mov	sp, r7
 8000270:	bd90      	pop	{r4, r7, pc}
	...

08000274 <Lcd_cursor>:

/**
 * Set the cursor position
 */
void Lcd_cursor(Lcd_HandleTypeDef * lcd, uint8_t row, uint8_t col)
{
 8000274:	b580      	push	{r7, lr}
 8000276:	b082      	sub	sp, #8
 8000278:	af00      	add	r7, sp, #0
 800027a:	6078      	str	r0, [r7, #4]
 800027c:	460b      	mov	r3, r1
 800027e:	70fb      	strb	r3, [r7, #3]
 8000280:	4613      	mov	r3, r2
 8000282:	70bb      	strb	r3, [r7, #2]
	#ifdef LCD20xN
	lcd_write_command(lcd, SET_DDRAM_ADDR + ROW_20[row] + col);
	#endif

	#ifdef LCD16xN
	lcd_write_command(lcd, SET_DDRAM_ADDR + ROW_16[row] + col);
 8000284:	78fb      	ldrb	r3, [r7, #3]
 8000286:	4a07      	ldr	r2, [pc, #28]	; (80002a4 <Lcd_cursor+0x30>)
 8000288:	5cd2      	ldrb	r2, [r2, r3]
 800028a:	78bb      	ldrb	r3, [r7, #2]
 800028c:	4413      	add	r3, r2
 800028e:	b2db      	uxtb	r3, r3
 8000290:	3b80      	subs	r3, #128	; 0x80
 8000292:	b2db      	uxtb	r3, r3
 8000294:	4619      	mov	r1, r3
 8000296:	6878      	ldr	r0, [r7, #4]
 8000298:	f000 f812 	bl	80002c0 <lcd_write_command>
	#endif
}
 800029c:	bf00      	nop
 800029e:	3708      	adds	r7, #8
 80002a0:	46bd      	mov	sp, r7
 80002a2:	bd80      	pop	{r7, pc}
 80002a4:	080038f0 	.word	0x080038f0

080002a8 <Lcd_clear>:

/**
 * Clear the screen
 */
void Lcd_clear(Lcd_HandleTypeDef * lcd) {
 80002a8:	b580      	push	{r7, lr}
 80002aa:	b082      	sub	sp, #8
 80002ac:	af00      	add	r7, sp, #0
 80002ae:	6078      	str	r0, [r7, #4]
	lcd_write_command(lcd, CLEAR_DISPLAY);
 80002b0:	2101      	movs	r1, #1
 80002b2:	6878      	ldr	r0, [r7, #4]
 80002b4:	f000 f804 	bl	80002c0 <lcd_write_command>
}
 80002b8:	bf00      	nop
 80002ba:	3708      	adds	r7, #8
 80002bc:	46bd      	mov	sp, r7
 80002be:	bd80      	pop	{r7, pc}

080002c0 <lcd_write_command>:

/**
 * Write a byte to the command register
 */
void lcd_write_command(Lcd_HandleTypeDef * lcd, uint8_t command)
{
 80002c0:	b580      	push	{r7, lr}
 80002c2:	b082      	sub	sp, #8
 80002c4:	af00      	add	r7, sp, #0
 80002c6:	6078      	str	r0, [r7, #4]
 80002c8:	460b      	mov	r3, r1
 80002ca:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(lcd->rs_port, lcd->rs_pin, LCD_COMMAND_REG);		// Write to command register
 80002cc:	687b      	ldr	r3, [r7, #4]
 80002ce:	6898      	ldr	r0, [r3, #8]
 80002d0:	687b      	ldr	r3, [r7, #4]
 80002d2:	899b      	ldrh	r3, [r3, #12]
 80002d4:	2200      	movs	r2, #0
 80002d6:	4619      	mov	r1, r3
 80002d8:	f001 fba2 	bl	8001a20 <HAL_GPIO_WritePin>

	if(lcd->mode == LCD_4_BIT_MODE)
 80002dc:	687b      	ldr	r3, [r7, #4]
 80002de:	7d9b      	ldrb	r3, [r3, #22]
 80002e0:	2b00      	cmp	r3, #0
 80002e2:	d111      	bne.n	8000308 <lcd_write_command+0x48>
	{
		lcd_write(lcd, (command >> 4), LCD_NIB);
 80002e4:	78fb      	ldrb	r3, [r7, #3]
 80002e6:	091b      	lsrs	r3, r3, #4
 80002e8:	b2db      	uxtb	r3, r3
 80002ea:	2204      	movs	r2, #4
 80002ec:	4619      	mov	r1, r3
 80002ee:	6878      	ldr	r0, [r7, #4]
 80002f0:	f000 f842 	bl	8000378 <lcd_write>
		lcd_write(lcd, command & 0x0F, LCD_NIB);
 80002f4:	78fb      	ldrb	r3, [r7, #3]
 80002f6:	f003 030f 	and.w	r3, r3, #15
 80002fa:	b2db      	uxtb	r3, r3
 80002fc:	2204      	movs	r2, #4
 80002fe:	4619      	mov	r1, r3
 8000300:	6878      	ldr	r0, [r7, #4]
 8000302:	f000 f839 	bl	8000378 <lcd_write>
	else
	{
		lcd_write(lcd, command, LCD_BYTE);
	}

}
 8000306:	e005      	b.n	8000314 <lcd_write_command+0x54>
		lcd_write(lcd, command, LCD_BYTE);
 8000308:	78fb      	ldrb	r3, [r7, #3]
 800030a:	2208      	movs	r2, #8
 800030c:	4619      	mov	r1, r3
 800030e:	6878      	ldr	r0, [r7, #4]
 8000310:	f000 f832 	bl	8000378 <lcd_write>
}
 8000314:	bf00      	nop
 8000316:	3708      	adds	r7, #8
 8000318:	46bd      	mov	sp, r7
 800031a:	bd80      	pop	{r7, pc}

0800031c <lcd_write_data>:

/**
 * Write a byte to the data register
 */
void lcd_write_data(Lcd_HandleTypeDef * lcd, uint8_t data)
{
 800031c:	b580      	push	{r7, lr}
 800031e:	b082      	sub	sp, #8
 8000320:	af00      	add	r7, sp, #0
 8000322:	6078      	str	r0, [r7, #4]
 8000324:	460b      	mov	r3, r1
 8000326:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(lcd->rs_port, lcd->rs_pin, LCD_DATA_REG);			// Write to data register
 8000328:	687b      	ldr	r3, [r7, #4]
 800032a:	6898      	ldr	r0, [r3, #8]
 800032c:	687b      	ldr	r3, [r7, #4]
 800032e:	899b      	ldrh	r3, [r3, #12]
 8000330:	2201      	movs	r2, #1
 8000332:	4619      	mov	r1, r3
 8000334:	f001 fb74 	bl	8001a20 <HAL_GPIO_WritePin>

	if(lcd->mode == LCD_4_BIT_MODE)
 8000338:	687b      	ldr	r3, [r7, #4]
 800033a:	7d9b      	ldrb	r3, [r3, #22]
 800033c:	2b00      	cmp	r3, #0
 800033e:	d111      	bne.n	8000364 <lcd_write_data+0x48>
	{
		lcd_write(lcd, data >> 4, LCD_NIB);
 8000340:	78fb      	ldrb	r3, [r7, #3]
 8000342:	091b      	lsrs	r3, r3, #4
 8000344:	b2db      	uxtb	r3, r3
 8000346:	2204      	movs	r2, #4
 8000348:	4619      	mov	r1, r3
 800034a:	6878      	ldr	r0, [r7, #4]
 800034c:	f000 f814 	bl	8000378 <lcd_write>
		lcd_write(lcd, data & 0x0F, LCD_NIB);
 8000350:	78fb      	ldrb	r3, [r7, #3]
 8000352:	f003 030f 	and.w	r3, r3, #15
 8000356:	b2db      	uxtb	r3, r3
 8000358:	2204      	movs	r2, #4
 800035a:	4619      	mov	r1, r3
 800035c:	6878      	ldr	r0, [r7, #4]
 800035e:	f000 f80b 	bl	8000378 <lcd_write>
	else
	{
		lcd_write(lcd, data, LCD_BYTE);
	}

}
 8000362:	e005      	b.n	8000370 <lcd_write_data+0x54>
		lcd_write(lcd, data, LCD_BYTE);
 8000364:	78fb      	ldrb	r3, [r7, #3]
 8000366:	2208      	movs	r2, #8
 8000368:	4619      	mov	r1, r3
 800036a:	6878      	ldr	r0, [r7, #4]
 800036c:	f000 f804 	bl	8000378 <lcd_write>
}
 8000370:	bf00      	nop
 8000372:	3708      	adds	r7, #8
 8000374:	46bd      	mov	sp, r7
 8000376:	bd80      	pop	{r7, pc}

08000378 <lcd_write>:

/**
 * Set len bits on the bus and toggle the enable line
 */
void lcd_write(Lcd_HandleTypeDef * lcd, uint8_t data, uint8_t len)
{
 8000378:	b580      	push	{r7, lr}
 800037a:	b084      	sub	sp, #16
 800037c:	af00      	add	r7, sp, #0
 800037e:	6078      	str	r0, [r7, #4]
 8000380:	460b      	mov	r3, r1
 8000382:	70fb      	strb	r3, [r7, #3]
 8000384:	4613      	mov	r3, r2
 8000386:	70bb      	strb	r3, [r7, #2]
	for(uint8_t i = 0; i < len; i++)
 8000388:	2300      	movs	r3, #0
 800038a:	73fb      	strb	r3, [r7, #15]
 800038c:	e019      	b.n	80003c2 <lcd_write+0x4a>
	{
		HAL_GPIO_WritePin(lcd->data_port[i], lcd->data_pin[i], (data >> i) & 0x01);
 800038e:	687b      	ldr	r3, [r7, #4]
 8000390:	681a      	ldr	r2, [r3, #0]
 8000392:	7bfb      	ldrb	r3, [r7, #15]
 8000394:	009b      	lsls	r3, r3, #2
 8000396:	4413      	add	r3, r2
 8000398:	6818      	ldr	r0, [r3, #0]
 800039a:	687b      	ldr	r3, [r7, #4]
 800039c:	685a      	ldr	r2, [r3, #4]
 800039e:	7bfb      	ldrb	r3, [r7, #15]
 80003a0:	005b      	lsls	r3, r3, #1
 80003a2:	4413      	add	r3, r2
 80003a4:	8819      	ldrh	r1, [r3, #0]
 80003a6:	78fa      	ldrb	r2, [r7, #3]
 80003a8:	7bfb      	ldrb	r3, [r7, #15]
 80003aa:	fa42 f303 	asr.w	r3, r2, r3
 80003ae:	b2db      	uxtb	r3, r3
 80003b0:	f003 0301 	and.w	r3, r3, #1
 80003b4:	b2db      	uxtb	r3, r3
 80003b6:	461a      	mov	r2, r3
 80003b8:	f001 fb32 	bl	8001a20 <HAL_GPIO_WritePin>
	for(uint8_t i = 0; i < len; i++)
 80003bc:	7bfb      	ldrb	r3, [r7, #15]
 80003be:	3301      	adds	r3, #1
 80003c0:	73fb      	strb	r3, [r7, #15]
 80003c2:	7bfa      	ldrb	r2, [r7, #15]
 80003c4:	78bb      	ldrb	r3, [r7, #2]
 80003c6:	429a      	cmp	r2, r3
 80003c8:	d3e1      	bcc.n	800038e <lcd_write+0x16>
	}

	HAL_GPIO_WritePin(lcd->en_port, lcd->en_pin, 1);
 80003ca:	687b      	ldr	r3, [r7, #4]
 80003cc:	6918      	ldr	r0, [r3, #16]
 80003ce:	687b      	ldr	r3, [r7, #4]
 80003d0:	8a9b      	ldrh	r3, [r3, #20]
 80003d2:	2201      	movs	r2, #1
 80003d4:	4619      	mov	r1, r3
 80003d6:	f001 fb23 	bl	8001a20 <HAL_GPIO_WritePin>
	DELAY(1);
 80003da:	2001      	movs	r0, #1
 80003dc:	f000 fc70 	bl	8000cc0 <HAL_Delay>
	HAL_GPIO_WritePin(lcd->en_port, lcd->en_pin, 0); 		// Data receive on falling edge
 80003e0:	687b      	ldr	r3, [r7, #4]
 80003e2:	6918      	ldr	r0, [r3, #16]
 80003e4:	687b      	ldr	r3, [r7, #4]
 80003e6:	8a9b      	ldrh	r3, [r3, #20]
 80003e8:	2200      	movs	r2, #0
 80003ea:	4619      	mov	r1, r3
 80003ec:	f001 fb18 	bl	8001a20 <HAL_GPIO_WritePin>
}
 80003f0:	bf00      	nop
 80003f2:	3710      	adds	r7, #16
 80003f4:	46bd      	mov	sp, r7
 80003f6:	bd80      	pop	{r7, pc}

080003f8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80003f8:	b5b0      	push	{r4, r5, r7, lr}
 80003fa:	b098      	sub	sp, #96	; 0x60
 80003fc:	af04      	add	r7, sp, #16
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80003fe:	f000 fbfd 	bl	8000bfc <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000402:	f000 f90d 	bl	8000620 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000406:	f000 fa31 	bl	800086c <MX_GPIO_Init>
	MX_TIM1_Init();
 800040a:	f000 f99f 	bl	800074c <MX_TIM1_Init>
	MX_ADC1_Init();
 800040e:	f000 f95f 	bl	80006d0 <MX_ADC1_Init>
	/* USER CODE BEGIN 2 */
	HAL_ADC_Start(&hadc1);
 8000412:	4870      	ldr	r0, [pc, #448]	; (80005d4 <main+0x1dc>)
 8000414:	f000 fd50 	bl	8000eb8 <HAL_ADC_Start>
	TIM1->CCR1 = 451;
 8000418:	4b6f      	ldr	r3, [pc, #444]	; (80005d8 <main+0x1e0>)
 800041a:	f240 12c3 	movw	r2, #451	; 0x1c3
 800041e:	635a      	str	r2, [r3, #52]	; 0x34
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000420:	2100      	movs	r1, #0
 8000422:	486e      	ldr	r0, [pc, #440]	; (80005dc <main+0x1e4>)
 8000424:	f002 f8cc 	bl	80025c0 <HAL_TIM_PWM_Start>
	HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_1);
 8000428:	2100      	movs	r1, #0
 800042a:	486c      	ldr	r0, [pc, #432]	; (80005dc <main+0x1e4>)
 800042c:	f002 fc2a 	bl	8002c84 <HAL_TIMEx_PWMN_Start>

	TIM1->CCR2 = 189;
 8000430:	4b69      	ldr	r3, [pc, #420]	; (80005d8 <main+0x1e0>)
 8000432:	22bd      	movs	r2, #189	; 0xbd
 8000434:	639a      	str	r2, [r3, #56]	; 0x38
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8000436:	2104      	movs	r1, #4
 8000438:	4868      	ldr	r0, [pc, #416]	; (80005dc <main+0x1e4>)
 800043a:	f002 f8c1 	bl	80025c0 <HAL_TIM_PWM_Start>
	HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_2);
 800043e:	2104      	movs	r1, #4
 8000440:	4866      	ldr	r0, [pc, #408]	; (80005dc <main+0x1e4>)
 8000442:	f002 fc1f 	bl	8002c84 <HAL_TIMEx_PWMN_Start>
	//  /* USER CODE BEGIN 2 */
	Lcd_PortType ports[] = {GPIOA, GPIOA, GPIOA, GPIOA};
 8000446:	4b66      	ldr	r3, [pc, #408]	; (80005e0 <main+0x1e8>)
 8000448:	f107 0438 	add.w	r4, r7, #56	; 0x38
 800044c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800044e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	Lcd_PinType pins[] = {GPIO_PIN_2, GPIO_PIN_3, GPIO_PIN_4, GPIO_PIN_5};
 8000452:	4a64      	ldr	r2, [pc, #400]	; (80005e4 <main+0x1ec>)
 8000454:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000458:	e892 0003 	ldmia.w	r2, {r0, r1}
 800045c:	e883 0003 	stmia.w	r3, {r0, r1}
	Lcd_HandleTypeDef lcd;
	lcd = Lcd_create(ports, pins, GPIOA, GPIO_PIN_1, GPIOA, GPIO_PIN_0, LCD_4_BIT_MODE);
 8000460:	4638      	mov	r0, r7
 8000462:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8000466:	f107 0138 	add.w	r1, r7, #56	; 0x38
 800046a:	2300      	movs	r3, #0
 800046c:	9303      	str	r3, [sp, #12]
 800046e:	2301      	movs	r3, #1
 8000470:	9302      	str	r3, [sp, #8]
 8000472:	4b5d      	ldr	r3, [pc, #372]	; (80005e8 <main+0x1f0>)
 8000474:	9301      	str	r3, [sp, #4]
 8000476:	2302      	movs	r3, #2
 8000478:	9300      	str	r3, [sp, #0]
 800047a:	4b5b      	ldr	r3, [pc, #364]	; (80005e8 <main+0x1f0>)
 800047c:	f7ff fe6e 	bl	800015c <Lcd_create>
 8000480:	f107 0418 	add.w	r4, r7, #24
 8000484:	463d      	mov	r5, r7
 8000486:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000488:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800048a:	e895 0003 	ldmia.w	r5, {r0, r1}
 800048e:	e884 0003 	stmia.w	r4, {r0, r1}
	Lcd_cursor(&lcd, 0,3);
 8000492:	f107 0318 	add.w	r3, r7, #24
 8000496:	2203      	movs	r2, #3
 8000498:	2100      	movs	r1, #0
 800049a:	4618      	mov	r0, r3
 800049c:	f7ff feea 	bl	8000274 <Lcd_cursor>
	Lcd_string(&lcd, "Frequency");
 80004a0:	f107 0318 	add.w	r3, r7, #24
 80004a4:	4951      	ldr	r1, [pc, #324]	; (80005ec <main+0x1f4>)
 80004a6:	4618      	mov	r0, r3
 80004a8:	f7ff fec4 	bl	8000234 <Lcd_string>
	while (1)
	{
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */
		while(idx < NS)
 80004ac:	e02f      	b.n	800050e <main+0x116>
		{
			TIM1->CCR1 = sine_pwm1[idx];
 80004ae:	4b50      	ldr	r3, [pc, #320]	; (80005f0 <main+0x1f8>)
 80004b0:	681b      	ldr	r3, [r3, #0]
 80004b2:	4a49      	ldr	r2, [pc, #292]	; (80005d8 <main+0x1e0>)
 80004b4:	494f      	ldr	r1, [pc, #316]	; (80005f4 <main+0x1fc>)
 80004b6:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80004ba:	6353      	str	r3, [r2, #52]	; 0x34
			TIM1->CCR2 = sine_pwm2[idx];
 80004bc:	4b4c      	ldr	r3, [pc, #304]	; (80005f0 <main+0x1f8>)
 80004be:	681b      	ldr	r3, [r3, #0]
 80004c0:	4a45      	ldr	r2, [pc, #276]	; (80005d8 <main+0x1e0>)
 80004c2:	494d      	ldr	r1, [pc, #308]	; (80005f8 <main+0x200>)
 80004c4:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80004c8:	6393      	str	r3, [r2, #56]	; 0x38
			DELAY_US(delay_cont);
 80004ca:	4b4c      	ldr	r3, [pc, #304]	; (80005fc <main+0x204>)
 80004cc:	689b      	ldr	r3, [r3, #8]
 80004ce:	64fb      	str	r3, [r7, #76]	; 0x4c
 80004d0:	4b4b      	ldr	r3, [pc, #300]	; (8000600 <main+0x208>)
 80004d2:	681b      	ldr	r3, [r3, #0]
 80004d4:	4a4b      	ldr	r2, [pc, #300]	; (8000604 <main+0x20c>)
 80004d6:	fba2 2303 	umull	r2, r3, r2, r3
 80004da:	0c9b      	lsrs	r3, r3, #18
 80004dc:	4a4a      	ldr	r2, [pc, #296]	; (8000608 <main+0x210>)
 80004de:	6812      	ldr	r2, [r2, #0]
 80004e0:	fb03 f202 	mul.w	r2, r3, r2
 80004e4:	4b46      	ldr	r3, [pc, #280]	; (8000600 <main+0x208>)
 80004e6:	681b      	ldr	r3, [r3, #0]
 80004e8:	4946      	ldr	r1, [pc, #280]	; (8000604 <main+0x20c>)
 80004ea:	fba1 1303 	umull	r1, r3, r1, r3
 80004ee:	0c9b      	lsrs	r3, r3, #18
 80004f0:	085b      	lsrs	r3, r3, #1
 80004f2:	1ad3      	subs	r3, r2, r3
 80004f4:	64bb      	str	r3, [r7, #72]	; 0x48
 80004f6:	4b41      	ldr	r3, [pc, #260]	; (80005fc <main+0x204>)
 80004f8:	689b      	ldr	r3, [r3, #8]
 80004fa:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80004fc:	1ad3      	subs	r3, r2, r3
 80004fe:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8000500:	429a      	cmp	r2, r3
 8000502:	d8f8      	bhi.n	80004f6 <main+0xfe>
			idx++;
 8000504:	4b3a      	ldr	r3, [pc, #232]	; (80005f0 <main+0x1f8>)
 8000506:	681b      	ldr	r3, [r3, #0]
 8000508:	3301      	adds	r3, #1
 800050a:	4a39      	ldr	r2, [pc, #228]	; (80005f0 <main+0x1f8>)
 800050c:	6013      	str	r3, [r2, #0]
		while(idx < NS)
 800050e:	4b38      	ldr	r3, [pc, #224]	; (80005f0 <main+0x1f8>)
 8000510:	681b      	ldr	r3, [r3, #0]
 8000512:	2b63      	cmp	r3, #99	; 0x63
 8000514:	d9cb      	bls.n	80004ae <main+0xb6>
		}

		idx = 0;
 8000516:	4b36      	ldr	r3, [pc, #216]	; (80005f0 <main+0x1f8>)
 8000518:	2200      	movs	r2, #0
 800051a:	601a      	str	r2, [r3, #0]
		iters += 1;
 800051c:	4b3b      	ldr	r3, [pc, #236]	; (800060c <main+0x214>)
 800051e:	681b      	ldr	r3, [r3, #0]
 8000520:	3301      	adds	r3, #1
 8000522:	4a3a      	ldr	r2, [pc, #232]	; (800060c <main+0x214>)
 8000524:	6013      	str	r3, [r2, #0]
		if(iters % 1000 == 0)
 8000526:	4b39      	ldr	r3, [pc, #228]	; (800060c <main+0x214>)
 8000528:	681a      	ldr	r2, [r3, #0]
 800052a:	4b39      	ldr	r3, [pc, #228]	; (8000610 <main+0x218>)
 800052c:	fba3 1302 	umull	r1, r3, r3, r2
 8000530:	099b      	lsrs	r3, r3, #6
 8000532:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000536:	fb01 f303 	mul.w	r3, r1, r3
 800053a:	1ad3      	subs	r3, r2, r3
 800053c:	2b00      	cmp	r3, #0
 800053e:	d1e6      	bne.n	800050e <main+0x116>
		{
			HAL_ADC_PollForConversion(&hadc1, 100);
 8000540:	2164      	movs	r1, #100	; 0x64
 8000542:	4824      	ldr	r0, [pc, #144]	; (80005d4 <main+0x1dc>)
 8000544:	f000 fd66 	bl	8001014 <HAL_ADC_PollForConversion>
			pot_value = HAL_ADC_GetValue(&hadc1);
 8000548:	4822      	ldr	r0, [pc, #136]	; (80005d4 <main+0x1dc>)
 800054a:	f000 fe69 	bl	8001220 <HAL_ADC_GetValue>
 800054e:	4603      	mov	r3, r0
 8000550:	4a30      	ldr	r2, [pc, #192]	; (8000614 <main+0x21c>)
 8000552:	6013      	str	r3, [r2, #0]
			freq = (int)((pot_value*3000)/4095);
 8000554:	4b2f      	ldr	r3, [pc, #188]	; (8000614 <main+0x21c>)
 8000556:	681b      	ldr	r3, [r3, #0]
 8000558:	f640 32b8 	movw	r2, #3000	; 0xbb8
 800055c:	fb03 f202 	mul.w	r2, r3, r2
 8000560:	4b2d      	ldr	r3, [pc, #180]	; (8000618 <main+0x220>)
 8000562:	fba3 1302 	umull	r1, r3, r3, r2
 8000566:	1ad2      	subs	r2, r2, r3
 8000568:	0852      	lsrs	r2, r2, #1
 800056a:	4413      	add	r3, r2
 800056c:	0adb      	lsrs	r3, r3, #11
 800056e:	4a2b      	ldr	r2, [pc, #172]	; (800061c <main+0x224>)
 8000570:	6013      	str	r3, [r2, #0]
			delay_cont = (int)((10000 - freq)/freq);
 8000572:	4b2a      	ldr	r3, [pc, #168]	; (800061c <main+0x224>)
 8000574:	681b      	ldr	r3, [r3, #0]
 8000576:	f5c3 531c 	rsb	r3, r3, #9984	; 0x2700
 800057a:	3310      	adds	r3, #16
 800057c:	4a27      	ldr	r2, [pc, #156]	; (800061c <main+0x224>)
 800057e:	6812      	ldr	r2, [r2, #0]
 8000580:	fbb3 f3f2 	udiv	r3, r3, r2
 8000584:	4a20      	ldr	r2, [pc, #128]	; (8000608 <main+0x210>)
 8000586:	6013      	str	r3, [r2, #0]

			Lcd_clear(&lcd);
 8000588:	f107 0318 	add.w	r3, r7, #24
 800058c:	4618      	mov	r0, r3
 800058e:	f7ff fe8b 	bl	80002a8 <Lcd_clear>
			Lcd_cursor(&lcd, 0,3);
 8000592:	f107 0318 	add.w	r3, r7, #24
 8000596:	2203      	movs	r2, #3
 8000598:	2100      	movs	r1, #0
 800059a:	4618      	mov	r0, r3
 800059c:	f7ff fe6a 	bl	8000274 <Lcd_cursor>
			Lcd_string(&lcd, "Frequency");
 80005a0:	f107 0318 	add.w	r3, r7, #24
 80005a4:	4911      	ldr	r1, [pc, #68]	; (80005ec <main+0x1f4>)
 80005a6:	4618      	mov	r0, r3
 80005a8:	f7ff fe44 	bl	8000234 <Lcd_string>
			Lcd_cursor(&lcd, 1, 7);
 80005ac:	f107 0318 	add.w	r3, r7, #24
 80005b0:	2207      	movs	r2, #7
 80005b2:	2101      	movs	r1, #1
 80005b4:	4618      	mov	r0, r3
 80005b6:	f7ff fe5d 	bl	8000274 <Lcd_cursor>
			Lcd_int(&lcd, freq);
 80005ba:	4b18      	ldr	r3, [pc, #96]	; (800061c <main+0x224>)
 80005bc:	681b      	ldr	r3, [r3, #0]
 80005be:	461a      	mov	r2, r3
 80005c0:	f107 0318 	add.w	r3, r7, #24
 80005c4:	4611      	mov	r1, r2
 80005c6:	4618      	mov	r0, r3
 80005c8:	f7ff fe1c 	bl	8000204 <Lcd_int>
			iters = 0;
 80005cc:	4b0f      	ldr	r3, [pc, #60]	; (800060c <main+0x214>)
 80005ce:	2200      	movs	r2, #0
 80005d0:	601a      	str	r2, [r3, #0]
		while(idx < NS)
 80005d2:	e79c      	b.n	800050e <main+0x116>
 80005d4:	2000008c 	.word	0x2000008c
 80005d8:	40012c00 	.word	0x40012c00
 80005dc:	200000bc 	.word	0x200000bc
 80005e0:	080038d8 	.word	0x080038d8
 80005e4:	080038e8 	.word	0x080038e8
 80005e8:	40010800 	.word	0x40010800
 80005ec:	080038cc 	.word	0x080038cc
 80005f0:	20000080 	.word	0x20000080
 80005f4:	080038f4 	.word	0x080038f4
 80005f8:	08003a84 	.word	0x08003a84
 80005fc:	e000e010 	.word	0xe000e010
 8000600:	20000008 	.word	0x20000008
 8000604:	431bde83 	.word	0x431bde83
 8000608:	20000000 	.word	0x20000000
 800060c:	20000088 	.word	0x20000088
 8000610:	10624dd3 	.word	0x10624dd3
 8000614:	20000084 	.word	0x20000084
 8000618:	00100101 	.word	0x00100101
 800061c:	20000004 	.word	0x20000004

08000620 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000620:	b580      	push	{r7, lr}
 8000622:	b094      	sub	sp, #80	; 0x50
 8000624:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000626:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800062a:	2228      	movs	r2, #40	; 0x28
 800062c:	2100      	movs	r1, #0
 800062e:	4618      	mov	r0, r3
 8000630:	f002 fcac 	bl	8002f8c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000634:	f107 0314 	add.w	r3, r7, #20
 8000638:	2200      	movs	r2, #0
 800063a:	601a      	str	r2, [r3, #0]
 800063c:	605a      	str	r2, [r3, #4]
 800063e:	609a      	str	r2, [r3, #8]
 8000640:	60da      	str	r2, [r3, #12]
 8000642:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000644:	1d3b      	adds	r3, r7, #4
 8000646:	2200      	movs	r2, #0
 8000648:	601a      	str	r2, [r3, #0]
 800064a:	605a      	str	r2, [r3, #4]
 800064c:	609a      	str	r2, [r3, #8]
 800064e:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000650:	2302      	movs	r3, #2
 8000652:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000654:	2301      	movs	r3, #1
 8000656:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000658:	2310      	movs	r3, #16
 800065a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800065c:	2302      	movs	r3, #2
 800065e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8000660:	2300      	movs	r3, #0
 8000662:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8000664:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 8000668:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800066a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800066e:	4618      	mov	r0, r3
 8000670:	f001 f9ee 	bl	8001a50 <HAL_RCC_OscConfig>
 8000674:	4603      	mov	r3, r0
 8000676:	2b00      	cmp	r3, #0
 8000678:	d001      	beq.n	800067e <SystemClock_Config+0x5e>
  {
    Error_Handler();
 800067a:	f000 f941 	bl	8000900 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800067e:	230f      	movs	r3, #15
 8000680:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000682:	2302      	movs	r3, #2
 8000684:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000686:	2300      	movs	r3, #0
 8000688:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800068a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800068e:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000690:	2300      	movs	r3, #0
 8000692:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000694:	f107 0314 	add.w	r3, r7, #20
 8000698:	2102      	movs	r1, #2
 800069a:	4618      	mov	r0, r3
 800069c:	f001 fc5a 	bl	8001f54 <HAL_RCC_ClockConfig>
 80006a0:	4603      	mov	r3, r0
 80006a2:	2b00      	cmp	r3, #0
 80006a4:	d001      	beq.n	80006aa <SystemClock_Config+0x8a>
  {
    Error_Handler();
 80006a6:	f000 f92b 	bl	8000900 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80006aa:	2302      	movs	r3, #2
 80006ac:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV8;
 80006ae:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 80006b2:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80006b4:	1d3b      	adds	r3, r7, #4
 80006b6:	4618      	mov	r0, r3
 80006b8:	f001 fdc6 	bl	8002248 <HAL_RCCEx_PeriphCLKConfig>
 80006bc:	4603      	mov	r3, r0
 80006be:	2b00      	cmp	r3, #0
 80006c0:	d001      	beq.n	80006c6 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 80006c2:	f000 f91d 	bl	8000900 <Error_Handler>
  }
}
 80006c6:	bf00      	nop
 80006c8:	3750      	adds	r7, #80	; 0x50
 80006ca:	46bd      	mov	sp, r7
 80006cc:	bd80      	pop	{r7, pc}
	...

080006d0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	b084      	sub	sp, #16
 80006d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80006d6:	1d3b      	adds	r3, r7, #4
 80006d8:	2200      	movs	r2, #0
 80006da:	601a      	str	r2, [r3, #0]
 80006dc:	605a      	str	r2, [r3, #4]
 80006de:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80006e0:	4b18      	ldr	r3, [pc, #96]	; (8000744 <MX_ADC1_Init+0x74>)
 80006e2:	4a19      	ldr	r2, [pc, #100]	; (8000748 <MX_ADC1_Init+0x78>)
 80006e4:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80006e6:	4b17      	ldr	r3, [pc, #92]	; (8000744 <MX_ADC1_Init+0x74>)
 80006e8:	2200      	movs	r2, #0
 80006ea:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80006ec:	4b15      	ldr	r3, [pc, #84]	; (8000744 <MX_ADC1_Init+0x74>)
 80006ee:	2201      	movs	r2, #1
 80006f0:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80006f2:	4b14      	ldr	r3, [pc, #80]	; (8000744 <MX_ADC1_Init+0x74>)
 80006f4:	2200      	movs	r2, #0
 80006f6:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80006f8:	4b12      	ldr	r3, [pc, #72]	; (8000744 <MX_ADC1_Init+0x74>)
 80006fa:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 80006fe:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000700:	4b10      	ldr	r3, [pc, #64]	; (8000744 <MX_ADC1_Init+0x74>)
 8000702:	2200      	movs	r2, #0
 8000704:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8000706:	4b0f      	ldr	r3, [pc, #60]	; (8000744 <MX_ADC1_Init+0x74>)
 8000708:	2201      	movs	r2, #1
 800070a:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800070c:	480d      	ldr	r0, [pc, #52]	; (8000744 <MX_ADC1_Init+0x74>)
 800070e:	f000 fafb 	bl	8000d08 <HAL_ADC_Init>
 8000712:	4603      	mov	r3, r0
 8000714:	2b00      	cmp	r3, #0
 8000716:	d001      	beq.n	800071c <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8000718:	f000 f8f2 	bl	8000900 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 800071c:	2306      	movs	r3, #6
 800071e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000720:	2301      	movs	r3, #1
 8000722:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000724:	2300      	movs	r3, #0
 8000726:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000728:	1d3b      	adds	r3, r7, #4
 800072a:	4619      	mov	r1, r3
 800072c:	4805      	ldr	r0, [pc, #20]	; (8000744 <MX_ADC1_Init+0x74>)
 800072e:	f000 fd83 	bl	8001238 <HAL_ADC_ConfigChannel>
 8000732:	4603      	mov	r3, r0
 8000734:	2b00      	cmp	r3, #0
 8000736:	d001      	beq.n	800073c <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8000738:	f000 f8e2 	bl	8000900 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800073c:	bf00      	nop
 800073e:	3710      	adds	r7, #16
 8000740:	46bd      	mov	sp, r7
 8000742:	bd80      	pop	{r7, pc}
 8000744:	2000008c 	.word	0x2000008c
 8000748:	40012400 	.word	0x40012400

0800074c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800074c:	b580      	push	{r7, lr}
 800074e:	b092      	sub	sp, #72	; 0x48
 8000750:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000752:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000756:	2200      	movs	r2, #0
 8000758:	601a      	str	r2, [r3, #0]
 800075a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800075c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000760:	2200      	movs	r2, #0
 8000762:	601a      	str	r2, [r3, #0]
 8000764:	605a      	str	r2, [r3, #4]
 8000766:	609a      	str	r2, [r3, #8]
 8000768:	60da      	str	r2, [r3, #12]
 800076a:	611a      	str	r2, [r3, #16]
 800076c:	615a      	str	r2, [r3, #20]
 800076e:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000770:	1d3b      	adds	r3, r7, #4
 8000772:	2220      	movs	r2, #32
 8000774:	2100      	movs	r1, #0
 8000776:	4618      	mov	r0, r3
 8000778:	f002 fc08 	bl	8002f8c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800077c:	4b39      	ldr	r3, [pc, #228]	; (8000864 <MX_TIM1_Init+0x118>)
 800077e:	4a3a      	ldr	r2, [pc, #232]	; (8000868 <MX_TIM1_Init+0x11c>)
 8000780:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000782:	4b38      	ldr	r3, [pc, #224]	; (8000864 <MX_TIM1_Init+0x118>)
 8000784:	2200      	movs	r2, #0
 8000786:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000788:	4b36      	ldr	r3, [pc, #216]	; (8000864 <MX_TIM1_Init+0x118>)
 800078a:	2200      	movs	r2, #0
 800078c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 639;
 800078e:	4b35      	ldr	r3, [pc, #212]	; (8000864 <MX_TIM1_Init+0x118>)
 8000790:	f240 227f 	movw	r2, #639	; 0x27f
 8000794:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000796:	4b33      	ldr	r3, [pc, #204]	; (8000864 <MX_TIM1_Init+0x118>)
 8000798:	2200      	movs	r2, #0
 800079a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800079c:	4b31      	ldr	r3, [pc, #196]	; (8000864 <MX_TIM1_Init+0x118>)
 800079e:	2200      	movs	r2, #0
 80007a0:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80007a2:	4b30      	ldr	r3, [pc, #192]	; (8000864 <MX_TIM1_Init+0x118>)
 80007a4:	2200      	movs	r2, #0
 80007a6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80007a8:	482e      	ldr	r0, [pc, #184]	; (8000864 <MX_TIM1_Init+0x118>)
 80007aa:	f001 feb9 	bl	8002520 <HAL_TIM_PWM_Init>
 80007ae:	4603      	mov	r3, r0
 80007b0:	2b00      	cmp	r3, #0
 80007b2:	d001      	beq.n	80007b8 <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 80007b4:	f000 f8a4 	bl	8000900 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80007b8:	2300      	movs	r3, #0
 80007ba:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80007bc:	2300      	movs	r3, #0
 80007be:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80007c0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80007c4:	4619      	mov	r1, r3
 80007c6:	4827      	ldr	r0, [pc, #156]	; (8000864 <MX_TIM1_Init+0x118>)
 80007c8:	f002 faf2 	bl	8002db0 <HAL_TIMEx_MasterConfigSynchronization>
 80007cc:	4603      	mov	r3, r0
 80007ce:	2b00      	cmp	r3, #0
 80007d0:	d001      	beq.n	80007d6 <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 80007d2:	f000 f895 	bl	8000900 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80007d6:	2360      	movs	r3, #96	; 0x60
 80007d8:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 80007da:	2300      	movs	r3, #0
 80007dc:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80007de:	2300      	movs	r3, #0
 80007e0:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80007e2:	2300      	movs	r3, #0
 80007e4:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80007e6:	2300      	movs	r3, #0
 80007e8:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80007ea:	2300      	movs	r3, #0
 80007ec:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80007ee:	2300      	movs	r3, #0
 80007f0:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80007f2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007f6:	2200      	movs	r2, #0
 80007f8:	4619      	mov	r1, r3
 80007fa:	481a      	ldr	r0, [pc, #104]	; (8000864 <MX_TIM1_Init+0x118>)
 80007fc:	f001 ff7c 	bl	80026f8 <HAL_TIM_PWM_ConfigChannel>
 8000800:	4603      	mov	r3, r0
 8000802:	2b00      	cmp	r3, #0
 8000804:	d001      	beq.n	800080a <MX_TIM1_Init+0xbe>
  {
    Error_Handler();
 8000806:	f000 f87b 	bl	8000900 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800080a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800080e:	2204      	movs	r2, #4
 8000810:	4619      	mov	r1, r3
 8000812:	4814      	ldr	r0, [pc, #80]	; (8000864 <MX_TIM1_Init+0x118>)
 8000814:	f001 ff70 	bl	80026f8 <HAL_TIM_PWM_ConfigChannel>
 8000818:	4603      	mov	r3, r0
 800081a:	2b00      	cmp	r3, #0
 800081c:	d001      	beq.n	8000822 <MX_TIM1_Init+0xd6>
  {
    Error_Handler();
 800081e:	f000 f86f 	bl	8000900 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000822:	2300      	movs	r3, #0
 8000824:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000826:	2300      	movs	r3, #0
 8000828:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800082a:	2300      	movs	r3, #0
 800082c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 8;
 800082e:	2308      	movs	r3, #8
 8000830:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000832:	2300      	movs	r3, #0
 8000834:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000836:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800083a:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800083c:	2300      	movs	r3, #0
 800083e:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000840:	1d3b      	adds	r3, r7, #4
 8000842:	4619      	mov	r1, r3
 8000844:	4807      	ldr	r0, [pc, #28]	; (8000864 <MX_TIM1_Init+0x118>)
 8000846:	f002 fb0b 	bl	8002e60 <HAL_TIMEx_ConfigBreakDeadTime>
 800084a:	4603      	mov	r3, r0
 800084c:	2b00      	cmp	r3, #0
 800084e:	d001      	beq.n	8000854 <MX_TIM1_Init+0x108>
  {
    Error_Handler();
 8000850:	f000 f856 	bl	8000900 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000854:	4803      	ldr	r0, [pc, #12]	; (8000864 <MX_TIM1_Init+0x118>)
 8000856:	f000 f8e5 	bl	8000a24 <HAL_TIM_MspPostInit>

}
 800085a:	bf00      	nop
 800085c:	3748      	adds	r7, #72	; 0x48
 800085e:	46bd      	mov	sp, r7
 8000860:	bd80      	pop	{r7, pc}
 8000862:	bf00      	nop
 8000864:	200000bc 	.word	0x200000bc
 8000868:	40012c00 	.word	0x40012c00

0800086c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800086c:	b580      	push	{r7, lr}
 800086e:	b088      	sub	sp, #32
 8000870:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000872:	f107 0310 	add.w	r3, r7, #16
 8000876:	2200      	movs	r2, #0
 8000878:	601a      	str	r2, [r3, #0]
 800087a:	605a      	str	r2, [r3, #4]
 800087c:	609a      	str	r2, [r3, #8]
 800087e:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000880:	4b1d      	ldr	r3, [pc, #116]	; (80008f8 <MX_GPIO_Init+0x8c>)
 8000882:	699b      	ldr	r3, [r3, #24]
 8000884:	4a1c      	ldr	r2, [pc, #112]	; (80008f8 <MX_GPIO_Init+0x8c>)
 8000886:	f043 0320 	orr.w	r3, r3, #32
 800088a:	6193      	str	r3, [r2, #24]
 800088c:	4b1a      	ldr	r3, [pc, #104]	; (80008f8 <MX_GPIO_Init+0x8c>)
 800088e:	699b      	ldr	r3, [r3, #24]
 8000890:	f003 0320 	and.w	r3, r3, #32
 8000894:	60fb      	str	r3, [r7, #12]
 8000896:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000898:	4b17      	ldr	r3, [pc, #92]	; (80008f8 <MX_GPIO_Init+0x8c>)
 800089a:	699b      	ldr	r3, [r3, #24]
 800089c:	4a16      	ldr	r2, [pc, #88]	; (80008f8 <MX_GPIO_Init+0x8c>)
 800089e:	f043 0304 	orr.w	r3, r3, #4
 80008a2:	6193      	str	r3, [r2, #24]
 80008a4:	4b14      	ldr	r3, [pc, #80]	; (80008f8 <MX_GPIO_Init+0x8c>)
 80008a6:	699b      	ldr	r3, [r3, #24]
 80008a8:	f003 0304 	and.w	r3, r3, #4
 80008ac:	60bb      	str	r3, [r7, #8]
 80008ae:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008b0:	4b11      	ldr	r3, [pc, #68]	; (80008f8 <MX_GPIO_Init+0x8c>)
 80008b2:	699b      	ldr	r3, [r3, #24]
 80008b4:	4a10      	ldr	r2, [pc, #64]	; (80008f8 <MX_GPIO_Init+0x8c>)
 80008b6:	f043 0308 	orr.w	r3, r3, #8
 80008ba:	6193      	str	r3, [r2, #24]
 80008bc:	4b0e      	ldr	r3, [pc, #56]	; (80008f8 <MX_GPIO_Init+0x8c>)
 80008be:	699b      	ldr	r3, [r3, #24]
 80008c0:	f003 0308 	and.w	r3, r3, #8
 80008c4:	607b      	str	r3, [r7, #4]
 80008c6:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 80008c8:	2200      	movs	r2, #0
 80008ca:	213f      	movs	r1, #63	; 0x3f
 80008cc:	480b      	ldr	r0, [pc, #44]	; (80008fc <MX_GPIO_Init+0x90>)
 80008ce:	f001 f8a7 	bl	8001a20 <HAL_GPIO_WritePin>
                          |GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);

  /*Configure GPIO pins : PA0 PA1 PA2 PA3
                           PA4 PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 80008d2:	233f      	movs	r3, #63	; 0x3f
 80008d4:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_4|GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008d6:	2301      	movs	r3, #1
 80008d8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008da:	2300      	movs	r3, #0
 80008dc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008de:	2302      	movs	r3, #2
 80008e0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008e2:	f107 0310 	add.w	r3, r7, #16
 80008e6:	4619      	mov	r1, r3
 80008e8:	4804      	ldr	r0, [pc, #16]	; (80008fc <MX_GPIO_Init+0x90>)
 80008ea:	f000 ff1d 	bl	8001728 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80008ee:	bf00      	nop
 80008f0:	3720      	adds	r7, #32
 80008f2:	46bd      	mov	sp, r7
 80008f4:	bd80      	pop	{r7, pc}
 80008f6:	bf00      	nop
 80008f8:	40021000 	.word	0x40021000
 80008fc:	40010800 	.word	0x40010800

08000900 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000900:	b480      	push	{r7}
 8000902:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000904:	b672      	cpsid	i
}
 8000906:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000908:	e7fe      	b.n	8000908 <Error_Handler+0x8>
	...

0800090c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800090c:	b480      	push	{r7}
 800090e:	b085      	sub	sp, #20
 8000910:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000912:	4b15      	ldr	r3, [pc, #84]	; (8000968 <HAL_MspInit+0x5c>)
 8000914:	699b      	ldr	r3, [r3, #24]
 8000916:	4a14      	ldr	r2, [pc, #80]	; (8000968 <HAL_MspInit+0x5c>)
 8000918:	f043 0301 	orr.w	r3, r3, #1
 800091c:	6193      	str	r3, [r2, #24]
 800091e:	4b12      	ldr	r3, [pc, #72]	; (8000968 <HAL_MspInit+0x5c>)
 8000920:	699b      	ldr	r3, [r3, #24]
 8000922:	f003 0301 	and.w	r3, r3, #1
 8000926:	60bb      	str	r3, [r7, #8]
 8000928:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800092a:	4b0f      	ldr	r3, [pc, #60]	; (8000968 <HAL_MspInit+0x5c>)
 800092c:	69db      	ldr	r3, [r3, #28]
 800092e:	4a0e      	ldr	r2, [pc, #56]	; (8000968 <HAL_MspInit+0x5c>)
 8000930:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000934:	61d3      	str	r3, [r2, #28]
 8000936:	4b0c      	ldr	r3, [pc, #48]	; (8000968 <HAL_MspInit+0x5c>)
 8000938:	69db      	ldr	r3, [r3, #28]
 800093a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800093e:	607b      	str	r3, [r7, #4]
 8000940:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000942:	4b0a      	ldr	r3, [pc, #40]	; (800096c <HAL_MspInit+0x60>)
 8000944:	685b      	ldr	r3, [r3, #4]
 8000946:	60fb      	str	r3, [r7, #12]
 8000948:	68fb      	ldr	r3, [r7, #12]
 800094a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800094e:	60fb      	str	r3, [r7, #12]
 8000950:	68fb      	ldr	r3, [r7, #12]
 8000952:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000956:	60fb      	str	r3, [r7, #12]
 8000958:	4a04      	ldr	r2, [pc, #16]	; (800096c <HAL_MspInit+0x60>)
 800095a:	68fb      	ldr	r3, [r7, #12]
 800095c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800095e:	bf00      	nop
 8000960:	3714      	adds	r7, #20
 8000962:	46bd      	mov	sp, r7
 8000964:	bc80      	pop	{r7}
 8000966:	4770      	bx	lr
 8000968:	40021000 	.word	0x40021000
 800096c:	40010000 	.word	0x40010000

08000970 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000970:	b580      	push	{r7, lr}
 8000972:	b088      	sub	sp, #32
 8000974:	af00      	add	r7, sp, #0
 8000976:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000978:	f107 0310 	add.w	r3, r7, #16
 800097c:	2200      	movs	r2, #0
 800097e:	601a      	str	r2, [r3, #0]
 8000980:	605a      	str	r2, [r3, #4]
 8000982:	609a      	str	r2, [r3, #8]
 8000984:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8000986:	687b      	ldr	r3, [r7, #4]
 8000988:	681b      	ldr	r3, [r3, #0]
 800098a:	4a14      	ldr	r2, [pc, #80]	; (80009dc <HAL_ADC_MspInit+0x6c>)
 800098c:	4293      	cmp	r3, r2
 800098e:	d121      	bne.n	80009d4 <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000990:	4b13      	ldr	r3, [pc, #76]	; (80009e0 <HAL_ADC_MspInit+0x70>)
 8000992:	699b      	ldr	r3, [r3, #24]
 8000994:	4a12      	ldr	r2, [pc, #72]	; (80009e0 <HAL_ADC_MspInit+0x70>)
 8000996:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800099a:	6193      	str	r3, [r2, #24]
 800099c:	4b10      	ldr	r3, [pc, #64]	; (80009e0 <HAL_ADC_MspInit+0x70>)
 800099e:	699b      	ldr	r3, [r3, #24]
 80009a0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80009a4:	60fb      	str	r3, [r7, #12]
 80009a6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009a8:	4b0d      	ldr	r3, [pc, #52]	; (80009e0 <HAL_ADC_MspInit+0x70>)
 80009aa:	699b      	ldr	r3, [r3, #24]
 80009ac:	4a0c      	ldr	r2, [pc, #48]	; (80009e0 <HAL_ADC_MspInit+0x70>)
 80009ae:	f043 0304 	orr.w	r3, r3, #4
 80009b2:	6193      	str	r3, [r2, #24]
 80009b4:	4b0a      	ldr	r3, [pc, #40]	; (80009e0 <HAL_ADC_MspInit+0x70>)
 80009b6:	699b      	ldr	r3, [r3, #24]
 80009b8:	f003 0304 	and.w	r3, r3, #4
 80009bc:	60bb      	str	r3, [r7, #8]
 80009be:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA6     ------> ADC1_IN6
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80009c0:	2340      	movs	r3, #64	; 0x40
 80009c2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80009c4:	2303      	movs	r3, #3
 80009c6:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009c8:	f107 0310 	add.w	r3, r7, #16
 80009cc:	4619      	mov	r1, r3
 80009ce:	4805      	ldr	r0, [pc, #20]	; (80009e4 <HAL_ADC_MspInit+0x74>)
 80009d0:	f000 feaa 	bl	8001728 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80009d4:	bf00      	nop
 80009d6:	3720      	adds	r7, #32
 80009d8:	46bd      	mov	sp, r7
 80009da:	bd80      	pop	{r7, pc}
 80009dc:	40012400 	.word	0x40012400
 80009e0:	40021000 	.word	0x40021000
 80009e4:	40010800 	.word	0x40010800

080009e8 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80009e8:	b480      	push	{r7}
 80009ea:	b085      	sub	sp, #20
 80009ec:	af00      	add	r7, sp, #0
 80009ee:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	681b      	ldr	r3, [r3, #0]
 80009f4:	4a09      	ldr	r2, [pc, #36]	; (8000a1c <HAL_TIM_PWM_MspInit+0x34>)
 80009f6:	4293      	cmp	r3, r2
 80009f8:	d10b      	bne.n	8000a12 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80009fa:	4b09      	ldr	r3, [pc, #36]	; (8000a20 <HAL_TIM_PWM_MspInit+0x38>)
 80009fc:	699b      	ldr	r3, [r3, #24]
 80009fe:	4a08      	ldr	r2, [pc, #32]	; (8000a20 <HAL_TIM_PWM_MspInit+0x38>)
 8000a00:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000a04:	6193      	str	r3, [r2, #24]
 8000a06:	4b06      	ldr	r3, [pc, #24]	; (8000a20 <HAL_TIM_PWM_MspInit+0x38>)
 8000a08:	699b      	ldr	r3, [r3, #24]
 8000a0a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000a0e:	60fb      	str	r3, [r7, #12]
 8000a10:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8000a12:	bf00      	nop
 8000a14:	3714      	adds	r7, #20
 8000a16:	46bd      	mov	sp, r7
 8000a18:	bc80      	pop	{r7}
 8000a1a:	4770      	bx	lr
 8000a1c:	40012c00 	.word	0x40012c00
 8000a20:	40021000 	.word	0x40021000

08000a24 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	b08a      	sub	sp, #40	; 0x28
 8000a28:	af00      	add	r7, sp, #0
 8000a2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a2c:	f107 0314 	add.w	r3, r7, #20
 8000a30:	2200      	movs	r2, #0
 8000a32:	601a      	str	r2, [r3, #0]
 8000a34:	605a      	str	r2, [r3, #4]
 8000a36:	609a      	str	r2, [r3, #8]
 8000a38:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	681b      	ldr	r3, [r3, #0]
 8000a3e:	4a25      	ldr	r2, [pc, #148]	; (8000ad4 <HAL_TIM_MspPostInit+0xb0>)
 8000a40:	4293      	cmp	r3, r2
 8000a42:	d142      	bne.n	8000aca <HAL_TIM_MspPostInit+0xa6>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a44:	4b24      	ldr	r3, [pc, #144]	; (8000ad8 <HAL_TIM_MspPostInit+0xb4>)
 8000a46:	699b      	ldr	r3, [r3, #24]
 8000a48:	4a23      	ldr	r2, [pc, #140]	; (8000ad8 <HAL_TIM_MspPostInit+0xb4>)
 8000a4a:	f043 0304 	orr.w	r3, r3, #4
 8000a4e:	6193      	str	r3, [r2, #24]
 8000a50:	4b21      	ldr	r3, [pc, #132]	; (8000ad8 <HAL_TIM_MspPostInit+0xb4>)
 8000a52:	699b      	ldr	r3, [r3, #24]
 8000a54:	f003 0304 	and.w	r3, r3, #4
 8000a58:	613b      	str	r3, [r7, #16]
 8000a5a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a5c:	4b1e      	ldr	r3, [pc, #120]	; (8000ad8 <HAL_TIM_MspPostInit+0xb4>)
 8000a5e:	699b      	ldr	r3, [r3, #24]
 8000a60:	4a1d      	ldr	r2, [pc, #116]	; (8000ad8 <HAL_TIM_MspPostInit+0xb4>)
 8000a62:	f043 0308 	orr.w	r3, r3, #8
 8000a66:	6193      	str	r3, [r2, #24]
 8000a68:	4b1b      	ldr	r3, [pc, #108]	; (8000ad8 <HAL_TIM_MspPostInit+0xb4>)
 8000a6a:	699b      	ldr	r3, [r3, #24]
 8000a6c:	f003 0308 	and.w	r3, r3, #8
 8000a70:	60fb      	str	r3, [r7, #12]
 8000a72:	68fb      	ldr	r3, [r7, #12]
    PA7     ------> TIM1_CH1N
    PB0     ------> TIM1_CH2N
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8000a74:	f44f 7360 	mov.w	r3, #896	; 0x380
 8000a78:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a7a:	2302      	movs	r3, #2
 8000a7c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a7e:	2302      	movs	r3, #2
 8000a80:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a82:	f107 0314 	add.w	r3, r7, #20
 8000a86:	4619      	mov	r1, r3
 8000a88:	4814      	ldr	r0, [pc, #80]	; (8000adc <HAL_TIM_MspPostInit+0xb8>)
 8000a8a:	f000 fe4d 	bl	8001728 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000a8e:	2301      	movs	r3, #1
 8000a90:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a92:	2302      	movs	r3, #2
 8000a94:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a96:	2302      	movs	r3, #2
 8000a98:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a9a:	f107 0314 	add.w	r3, r7, #20
 8000a9e:	4619      	mov	r1, r3
 8000aa0:	480f      	ldr	r0, [pc, #60]	; (8000ae0 <HAL_TIM_MspPostInit+0xbc>)
 8000aa2:	f000 fe41 	bl	8001728 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_TIM1_PARTIAL();
 8000aa6:	4b0f      	ldr	r3, [pc, #60]	; (8000ae4 <HAL_TIM_MspPostInit+0xc0>)
 8000aa8:	685b      	ldr	r3, [r3, #4]
 8000aaa:	627b      	str	r3, [r7, #36]	; 0x24
 8000aac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000aae:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8000ab2:	627b      	str	r3, [r7, #36]	; 0x24
 8000ab4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ab6:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8000aba:	627b      	str	r3, [r7, #36]	; 0x24
 8000abc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000abe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000ac2:	627b      	str	r3, [r7, #36]	; 0x24
 8000ac4:	4a07      	ldr	r2, [pc, #28]	; (8000ae4 <HAL_TIM_MspPostInit+0xc0>)
 8000ac6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ac8:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8000aca:	bf00      	nop
 8000acc:	3728      	adds	r7, #40	; 0x28
 8000ace:	46bd      	mov	sp, r7
 8000ad0:	bd80      	pop	{r7, pc}
 8000ad2:	bf00      	nop
 8000ad4:	40012c00 	.word	0x40012c00
 8000ad8:	40021000 	.word	0x40021000
 8000adc:	40010800 	.word	0x40010800
 8000ae0:	40010c00 	.word	0x40010c00
 8000ae4:	40010000 	.word	0x40010000

08000ae8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ae8:	b480      	push	{r7}
 8000aea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000aec:	e7fe      	b.n	8000aec <NMI_Handler+0x4>

08000aee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000aee:	b480      	push	{r7}
 8000af0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000af2:	e7fe      	b.n	8000af2 <HardFault_Handler+0x4>

08000af4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000af4:	b480      	push	{r7}
 8000af6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000af8:	e7fe      	b.n	8000af8 <MemManage_Handler+0x4>

08000afa <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000afa:	b480      	push	{r7}
 8000afc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000afe:	e7fe      	b.n	8000afe <BusFault_Handler+0x4>

08000b00 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b00:	b480      	push	{r7}
 8000b02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b04:	e7fe      	b.n	8000b04 <UsageFault_Handler+0x4>

08000b06 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b06:	b480      	push	{r7}
 8000b08:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b0a:	bf00      	nop
 8000b0c:	46bd      	mov	sp, r7
 8000b0e:	bc80      	pop	{r7}
 8000b10:	4770      	bx	lr

08000b12 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b12:	b480      	push	{r7}
 8000b14:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b16:	bf00      	nop
 8000b18:	46bd      	mov	sp, r7
 8000b1a:	bc80      	pop	{r7}
 8000b1c:	4770      	bx	lr

08000b1e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b1e:	b480      	push	{r7}
 8000b20:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b22:	bf00      	nop
 8000b24:	46bd      	mov	sp, r7
 8000b26:	bc80      	pop	{r7}
 8000b28:	4770      	bx	lr

08000b2a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b2a:	b580      	push	{r7, lr}
 8000b2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b2e:	f000 f8ab 	bl	8000c88 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b32:	bf00      	nop
 8000b34:	bd80      	pop	{r7, pc}
	...

08000b38 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	b086      	sub	sp, #24
 8000b3c:	af00      	add	r7, sp, #0
 8000b3e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000b40:	4a14      	ldr	r2, [pc, #80]	; (8000b94 <_sbrk+0x5c>)
 8000b42:	4b15      	ldr	r3, [pc, #84]	; (8000b98 <_sbrk+0x60>)
 8000b44:	1ad3      	subs	r3, r2, r3
 8000b46:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000b48:	697b      	ldr	r3, [r7, #20]
 8000b4a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000b4c:	4b13      	ldr	r3, [pc, #76]	; (8000b9c <_sbrk+0x64>)
 8000b4e:	681b      	ldr	r3, [r3, #0]
 8000b50:	2b00      	cmp	r3, #0
 8000b52:	d102      	bne.n	8000b5a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000b54:	4b11      	ldr	r3, [pc, #68]	; (8000b9c <_sbrk+0x64>)
 8000b56:	4a12      	ldr	r2, [pc, #72]	; (8000ba0 <_sbrk+0x68>)
 8000b58:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000b5a:	4b10      	ldr	r3, [pc, #64]	; (8000b9c <_sbrk+0x64>)
 8000b5c:	681a      	ldr	r2, [r3, #0]
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	4413      	add	r3, r2
 8000b62:	693a      	ldr	r2, [r7, #16]
 8000b64:	429a      	cmp	r2, r3
 8000b66:	d207      	bcs.n	8000b78 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000b68:	f002 fa18 	bl	8002f9c <__errno>
 8000b6c:	4603      	mov	r3, r0
 8000b6e:	220c      	movs	r2, #12
 8000b70:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000b72:	f04f 33ff 	mov.w	r3, #4294967295
 8000b76:	e009      	b.n	8000b8c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000b78:	4b08      	ldr	r3, [pc, #32]	; (8000b9c <_sbrk+0x64>)
 8000b7a:	681b      	ldr	r3, [r3, #0]
 8000b7c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000b7e:	4b07      	ldr	r3, [pc, #28]	; (8000b9c <_sbrk+0x64>)
 8000b80:	681a      	ldr	r2, [r3, #0]
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	4413      	add	r3, r2
 8000b86:	4a05      	ldr	r2, [pc, #20]	; (8000b9c <_sbrk+0x64>)
 8000b88:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000b8a:	68fb      	ldr	r3, [r7, #12]
}
 8000b8c:	4618      	mov	r0, r3
 8000b8e:	3718      	adds	r7, #24
 8000b90:	46bd      	mov	sp, r7
 8000b92:	bd80      	pop	{r7, pc}
 8000b94:	20002800 	.word	0x20002800
 8000b98:	00000400 	.word	0x00000400
 8000b9c:	20000104 	.word	0x20000104
 8000ba0:	20000258 	.word	0x20000258

08000ba4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000ba4:	b480      	push	{r7}
 8000ba6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ba8:	bf00      	nop
 8000baa:	46bd      	mov	sp, r7
 8000bac:	bc80      	pop	{r7}
 8000bae:	4770      	bx	lr

08000bb0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000bb0:	f7ff fff8 	bl	8000ba4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000bb4:	480b      	ldr	r0, [pc, #44]	; (8000be4 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000bb6:	490c      	ldr	r1, [pc, #48]	; (8000be8 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000bb8:	4a0c      	ldr	r2, [pc, #48]	; (8000bec <LoopFillZerobss+0x16>)
  movs r3, #0
 8000bba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000bbc:	e002      	b.n	8000bc4 <LoopCopyDataInit>

08000bbe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000bbe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000bc0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000bc2:	3304      	adds	r3, #4

08000bc4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000bc4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000bc6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000bc8:	d3f9      	bcc.n	8000bbe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000bca:	4a09      	ldr	r2, [pc, #36]	; (8000bf0 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000bcc:	4c09      	ldr	r4, [pc, #36]	; (8000bf4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000bce:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000bd0:	e001      	b.n	8000bd6 <LoopFillZerobss>

08000bd2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000bd2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000bd4:	3204      	adds	r2, #4

08000bd6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000bd6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000bd8:	d3fb      	bcc.n	8000bd2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000bda:	f002 f9e5 	bl	8002fa8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000bde:	f7ff fc0b 	bl	80003f8 <main>
  bx lr
 8000be2:	4770      	bx	lr
  ldr r0, =_sdata
 8000be4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000be8:	20000064 	.word	0x20000064
  ldr r2, =_sidata
 8000bec:	08003c90 	.word	0x08003c90
  ldr r2, =_sbss
 8000bf0:	20000064 	.word	0x20000064
  ldr r4, =_ebss
 8000bf4:	20000254 	.word	0x20000254

08000bf8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000bf8:	e7fe      	b.n	8000bf8 <ADC1_2_IRQHandler>
	...

08000bfc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c00:	4b08      	ldr	r3, [pc, #32]	; (8000c24 <HAL_Init+0x28>)
 8000c02:	681b      	ldr	r3, [r3, #0]
 8000c04:	4a07      	ldr	r2, [pc, #28]	; (8000c24 <HAL_Init+0x28>)
 8000c06:	f043 0310 	orr.w	r3, r3, #16
 8000c0a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c0c:	2003      	movs	r0, #3
 8000c0e:	f000 fd57 	bl	80016c0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c12:	200f      	movs	r0, #15
 8000c14:	f000 f808 	bl	8000c28 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c18:	f7ff fe78 	bl	800090c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c1c:	2300      	movs	r3, #0
}
 8000c1e:	4618      	mov	r0, r3
 8000c20:	bd80      	pop	{r7, pc}
 8000c22:	bf00      	nop
 8000c24:	40022000 	.word	0x40022000

08000c28 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	b082      	sub	sp, #8
 8000c2c:	af00      	add	r7, sp, #0
 8000c2e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000c30:	4b12      	ldr	r3, [pc, #72]	; (8000c7c <HAL_InitTick+0x54>)
 8000c32:	681a      	ldr	r2, [r3, #0]
 8000c34:	4b12      	ldr	r3, [pc, #72]	; (8000c80 <HAL_InitTick+0x58>)
 8000c36:	781b      	ldrb	r3, [r3, #0]
 8000c38:	4619      	mov	r1, r3
 8000c3a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c3e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c42:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c46:	4618      	mov	r0, r3
 8000c48:	f000 fd61 	bl	800170e <HAL_SYSTICK_Config>
 8000c4c:	4603      	mov	r3, r0
 8000c4e:	2b00      	cmp	r3, #0
 8000c50:	d001      	beq.n	8000c56 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000c52:	2301      	movs	r3, #1
 8000c54:	e00e      	b.n	8000c74 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	2b0f      	cmp	r3, #15
 8000c5a:	d80a      	bhi.n	8000c72 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	6879      	ldr	r1, [r7, #4]
 8000c60:	f04f 30ff 	mov.w	r0, #4294967295
 8000c64:	f000 fd37 	bl	80016d6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000c68:	4a06      	ldr	r2, [pc, #24]	; (8000c84 <HAL_InitTick+0x5c>)
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000c6e:	2300      	movs	r3, #0
 8000c70:	e000      	b.n	8000c74 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000c72:	2301      	movs	r3, #1
}
 8000c74:	4618      	mov	r0, r3
 8000c76:	3708      	adds	r7, #8
 8000c78:	46bd      	mov	sp, r7
 8000c7a:	bd80      	pop	{r7, pc}
 8000c7c:	20000008 	.word	0x20000008
 8000c80:	20000010 	.word	0x20000010
 8000c84:	2000000c 	.word	0x2000000c

08000c88 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c88:	b480      	push	{r7}
 8000c8a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c8c:	4b05      	ldr	r3, [pc, #20]	; (8000ca4 <HAL_IncTick+0x1c>)
 8000c8e:	781b      	ldrb	r3, [r3, #0]
 8000c90:	461a      	mov	r2, r3
 8000c92:	4b05      	ldr	r3, [pc, #20]	; (8000ca8 <HAL_IncTick+0x20>)
 8000c94:	681b      	ldr	r3, [r3, #0]
 8000c96:	4413      	add	r3, r2
 8000c98:	4a03      	ldr	r2, [pc, #12]	; (8000ca8 <HAL_IncTick+0x20>)
 8000c9a:	6013      	str	r3, [r2, #0]
}
 8000c9c:	bf00      	nop
 8000c9e:	46bd      	mov	sp, r7
 8000ca0:	bc80      	pop	{r7}
 8000ca2:	4770      	bx	lr
 8000ca4:	20000010 	.word	0x20000010
 8000ca8:	20000108 	.word	0x20000108

08000cac <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000cac:	b480      	push	{r7}
 8000cae:	af00      	add	r7, sp, #0
  return uwTick;
 8000cb0:	4b02      	ldr	r3, [pc, #8]	; (8000cbc <HAL_GetTick+0x10>)
 8000cb2:	681b      	ldr	r3, [r3, #0]
}
 8000cb4:	4618      	mov	r0, r3
 8000cb6:	46bd      	mov	sp, r7
 8000cb8:	bc80      	pop	{r7}
 8000cba:	4770      	bx	lr
 8000cbc:	20000108 	.word	0x20000108

08000cc0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	b084      	sub	sp, #16
 8000cc4:	af00      	add	r7, sp, #0
 8000cc6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000cc8:	f7ff fff0 	bl	8000cac <HAL_GetTick>
 8000ccc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000cd2:	68fb      	ldr	r3, [r7, #12]
 8000cd4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000cd8:	d005      	beq.n	8000ce6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000cda:	4b0a      	ldr	r3, [pc, #40]	; (8000d04 <HAL_Delay+0x44>)
 8000cdc:	781b      	ldrb	r3, [r3, #0]
 8000cde:	461a      	mov	r2, r3
 8000ce0:	68fb      	ldr	r3, [r7, #12]
 8000ce2:	4413      	add	r3, r2
 8000ce4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000ce6:	bf00      	nop
 8000ce8:	f7ff ffe0 	bl	8000cac <HAL_GetTick>
 8000cec:	4602      	mov	r2, r0
 8000cee:	68bb      	ldr	r3, [r7, #8]
 8000cf0:	1ad3      	subs	r3, r2, r3
 8000cf2:	68fa      	ldr	r2, [r7, #12]
 8000cf4:	429a      	cmp	r2, r3
 8000cf6:	d8f7      	bhi.n	8000ce8 <HAL_Delay+0x28>
  {
  }
}
 8000cf8:	bf00      	nop
 8000cfa:	bf00      	nop
 8000cfc:	3710      	adds	r7, #16
 8000cfe:	46bd      	mov	sp, r7
 8000d00:	bd80      	pop	{r7, pc}
 8000d02:	bf00      	nop
 8000d04:	20000010 	.word	0x20000010

08000d08 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	b086      	sub	sp, #24
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000d10:	2300      	movs	r3, #0
 8000d12:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8000d14:	2300      	movs	r3, #0
 8000d16:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8000d18:	2300      	movs	r3, #0
 8000d1a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	d101      	bne.n	8000d2a <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8000d26:	2301      	movs	r3, #1
 8000d28:	e0be      	b.n	8000ea8 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	689b      	ldr	r3, [r3, #8]
 8000d2e:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d34:	2b00      	cmp	r3, #0
 8000d36:	d109      	bne.n	8000d4c <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	2200      	movs	r2, #0
 8000d42:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000d46:	6878      	ldr	r0, [r7, #4]
 8000d48:	f7ff fe12 	bl	8000970 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8000d4c:	6878      	ldr	r0, [r7, #4]
 8000d4e:	f000 fbc5 	bl	80014dc <ADC_ConversionStop_Disable>
 8000d52:	4603      	mov	r3, r0
 8000d54:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d5a:	f003 0310 	and.w	r3, r3, #16
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	f040 8099 	bne.w	8000e96 <HAL_ADC_Init+0x18e>
 8000d64:	7dfb      	ldrb	r3, [r7, #23]
 8000d66:	2b00      	cmp	r3, #0
 8000d68:	f040 8095 	bne.w	8000e96 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d70:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000d74:	f023 0302 	bic.w	r3, r3, #2
 8000d78:	f043 0202 	orr.w	r2, r3, #2
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000d88:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	7b1b      	ldrb	r3, [r3, #12]
 8000d8e:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000d90:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000d92:	68ba      	ldr	r2, [r7, #8]
 8000d94:	4313      	orrs	r3, r2
 8000d96:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	689b      	ldr	r3, [r3, #8]
 8000d9c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000da0:	d003      	beq.n	8000daa <HAL_ADC_Init+0xa2>
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	689b      	ldr	r3, [r3, #8]
 8000da6:	2b01      	cmp	r3, #1
 8000da8:	d102      	bne.n	8000db0 <HAL_ADC_Init+0xa8>
 8000daa:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000dae:	e000      	b.n	8000db2 <HAL_ADC_Init+0xaa>
 8000db0:	2300      	movs	r3, #0
 8000db2:	693a      	ldr	r2, [r7, #16]
 8000db4:	4313      	orrs	r3, r2
 8000db6:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	7d1b      	ldrb	r3, [r3, #20]
 8000dbc:	2b01      	cmp	r3, #1
 8000dbe:	d119      	bne.n	8000df4 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	7b1b      	ldrb	r3, [r3, #12]
 8000dc4:	2b00      	cmp	r3, #0
 8000dc6:	d109      	bne.n	8000ddc <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	699b      	ldr	r3, [r3, #24]
 8000dcc:	3b01      	subs	r3, #1
 8000dce:	035a      	lsls	r2, r3, #13
 8000dd0:	693b      	ldr	r3, [r7, #16]
 8000dd2:	4313      	orrs	r3, r2
 8000dd4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000dd8:	613b      	str	r3, [r7, #16]
 8000dda:	e00b      	b.n	8000df4 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000de0:	f043 0220 	orr.w	r2, r3, #32
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000dec:	f043 0201 	orr.w	r2, r3, #1
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	685b      	ldr	r3, [r3, #4]
 8000dfa:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	681b      	ldr	r3, [r3, #0]
 8000e02:	693a      	ldr	r2, [r7, #16]
 8000e04:	430a      	orrs	r2, r1
 8000e06:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	689a      	ldr	r2, [r3, #8]
 8000e0e:	4b28      	ldr	r3, [pc, #160]	; (8000eb0 <HAL_ADC_Init+0x1a8>)
 8000e10:	4013      	ands	r3, r2
 8000e12:	687a      	ldr	r2, [r7, #4]
 8000e14:	6812      	ldr	r2, [r2, #0]
 8000e16:	68b9      	ldr	r1, [r7, #8]
 8000e18:	430b      	orrs	r3, r1
 8000e1a:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	689b      	ldr	r3, [r3, #8]
 8000e20:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000e24:	d003      	beq.n	8000e2e <HAL_ADC_Init+0x126>
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	689b      	ldr	r3, [r3, #8]
 8000e2a:	2b01      	cmp	r3, #1
 8000e2c:	d104      	bne.n	8000e38 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	691b      	ldr	r3, [r3, #16]
 8000e32:	3b01      	subs	r3, #1
 8000e34:	051b      	lsls	r3, r3, #20
 8000e36:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e3e:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	681b      	ldr	r3, [r3, #0]
 8000e46:	68fa      	ldr	r2, [r7, #12]
 8000e48:	430a      	orrs	r2, r1
 8000e4a:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	689a      	ldr	r2, [r3, #8]
 8000e52:	4b18      	ldr	r3, [pc, #96]	; (8000eb4 <HAL_ADC_Init+0x1ac>)
 8000e54:	4013      	ands	r3, r2
 8000e56:	68ba      	ldr	r2, [r7, #8]
 8000e58:	429a      	cmp	r2, r3
 8000e5a:	d10b      	bne.n	8000e74 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	2200      	movs	r2, #0
 8000e60:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e66:	f023 0303 	bic.w	r3, r3, #3
 8000e6a:	f043 0201 	orr.w	r2, r3, #1
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000e72:	e018      	b.n	8000ea6 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e78:	f023 0312 	bic.w	r3, r3, #18
 8000e7c:	f043 0210 	orr.w	r2, r3, #16
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e88:	f043 0201 	orr.w	r2, r3, #1
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8000e90:	2301      	movs	r3, #1
 8000e92:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000e94:	e007      	b.n	8000ea6 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e9a:	f043 0210 	orr.w	r2, r3, #16
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8000ea2:	2301      	movs	r3, #1
 8000ea4:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000ea6:	7dfb      	ldrb	r3, [r7, #23]
}
 8000ea8:	4618      	mov	r0, r3
 8000eaa:	3718      	adds	r7, #24
 8000eac:	46bd      	mov	sp, r7
 8000eae:	bd80      	pop	{r7, pc}
 8000eb0:	ffe1f7fd 	.word	0xffe1f7fd
 8000eb4:	ff1f0efe 	.word	0xff1f0efe

08000eb8 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	b084      	sub	sp, #16
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000ec0:	2300      	movs	r3, #0
 8000ec2:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000eca:	2b01      	cmp	r3, #1
 8000ecc:	d101      	bne.n	8000ed2 <HAL_ADC_Start+0x1a>
 8000ece:	2302      	movs	r3, #2
 8000ed0:	e098      	b.n	8001004 <HAL_ADC_Start+0x14c>
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	2201      	movs	r2, #1
 8000ed6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8000eda:	6878      	ldr	r0, [r7, #4]
 8000edc:	f000 faa4 	bl	8001428 <ADC_Enable>
 8000ee0:	4603      	mov	r3, r0
 8000ee2:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8000ee4:	7bfb      	ldrb	r3, [r7, #15]
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	f040 8087 	bne.w	8000ffa <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ef0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000ef4:	f023 0301 	bic.w	r3, r3, #1
 8000ef8:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	4a41      	ldr	r2, [pc, #260]	; (800100c <HAL_ADC_Start+0x154>)
 8000f06:	4293      	cmp	r3, r2
 8000f08:	d105      	bne.n	8000f16 <HAL_ADC_Start+0x5e>
 8000f0a:	4b41      	ldr	r3, [pc, #260]	; (8001010 <HAL_ADC_Start+0x158>)
 8000f0c:	685b      	ldr	r3, [r3, #4]
 8000f0e:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	d115      	bne.n	8000f42 <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f1a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	685b      	ldr	r3, [r3, #4]
 8000f28:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	d026      	beq.n	8000f7e <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f34:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000f38:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000f40:	e01d      	b.n	8000f7e <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f46:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	4a2f      	ldr	r2, [pc, #188]	; (8001010 <HAL_ADC_Start+0x158>)
 8000f54:	4293      	cmp	r3, r2
 8000f56:	d004      	beq.n	8000f62 <HAL_ADC_Start+0xaa>
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	4a2b      	ldr	r2, [pc, #172]	; (800100c <HAL_ADC_Start+0x154>)
 8000f5e:	4293      	cmp	r3, r2
 8000f60:	d10d      	bne.n	8000f7e <HAL_ADC_Start+0xc6>
 8000f62:	4b2b      	ldr	r3, [pc, #172]	; (8001010 <HAL_ADC_Start+0x158>)
 8000f64:	685b      	ldr	r3, [r3, #4]
 8000f66:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d007      	beq.n	8000f7e <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f72:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000f76:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f82:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d006      	beq.n	8000f98 <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f8e:	f023 0206 	bic.w	r2, r3, #6
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	62da      	str	r2, [r3, #44]	; 0x2c
 8000f96:	e002      	b.n	8000f9e <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	f06f 0202 	mvn.w	r2, #2
 8000fae:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	689b      	ldr	r3, [r3, #8]
 8000fb6:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8000fba:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8000fbe:	d113      	bne.n	8000fe8 <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8000fc4:	4a11      	ldr	r2, [pc, #68]	; (800100c <HAL_ADC_Start+0x154>)
 8000fc6:	4293      	cmp	r3, r2
 8000fc8:	d105      	bne.n	8000fd6 <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8000fca:	4b11      	ldr	r3, [pc, #68]	; (8001010 <HAL_ADC_Start+0x158>)
 8000fcc:	685b      	ldr	r3, [r3, #4]
 8000fce:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d108      	bne.n	8000fe8 <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	689a      	ldr	r2, [r3, #8]
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8000fe4:	609a      	str	r2, [r3, #8]
 8000fe6:	e00c      	b.n	8001002 <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	689a      	ldr	r2, [r3, #8]
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8000ff6:	609a      	str	r2, [r3, #8]
 8000ff8:	e003      	b.n	8001002 <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 8001002:	7bfb      	ldrb	r3, [r7, #15]
}
 8001004:	4618      	mov	r0, r3
 8001006:	3710      	adds	r7, #16
 8001008:	46bd      	mov	sp, r7
 800100a:	bd80      	pop	{r7, pc}
 800100c:	40012800 	.word	0x40012800
 8001010:	40012400 	.word	0x40012400

08001014 <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8001014:	b590      	push	{r4, r7, lr}
 8001016:	b087      	sub	sp, #28
 8001018:	af00      	add	r7, sp, #0
 800101a:	6078      	str	r0, [r7, #4]
 800101c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800101e:	2300      	movs	r3, #0
 8001020:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 8001022:	2300      	movs	r3, #0
 8001024:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 8001026:	2300      	movs	r3, #0
 8001028:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 800102a:	f7ff fe3f 	bl	8000cac <HAL_GetTick>
 800102e:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	689b      	ldr	r3, [r3, #8]
 8001036:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800103a:	2b00      	cmp	r3, #0
 800103c:	d00b      	beq.n	8001056 <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001042:	f043 0220 	orr.w	r2, r3, #32
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	2200      	movs	r2, #0
 800104e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    return HAL_ERROR;
 8001052:	2301      	movs	r3, #1
 8001054:	e0d3      	b.n	80011fe <HAL_ADC_PollForConversion+0x1ea>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	685b      	ldr	r3, [r3, #4]
 800105c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001060:	2b00      	cmp	r3, #0
 8001062:	d131      	bne.n	80010c8 <HAL_ADC_PollForConversion+0xb4>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800106a:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 800106e:	2b00      	cmp	r3, #0
 8001070:	d12a      	bne.n	80010c8 <HAL_ADC_PollForConversion+0xb4>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8001072:	e021      	b.n	80010b8 <HAL_ADC_PollForConversion+0xa4>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8001074:	683b      	ldr	r3, [r7, #0]
 8001076:	f1b3 3fff 	cmp.w	r3, #4294967295
 800107a:	d01d      	beq.n	80010b8 <HAL_ADC_PollForConversion+0xa4>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 800107c:	683b      	ldr	r3, [r7, #0]
 800107e:	2b00      	cmp	r3, #0
 8001080:	d007      	beq.n	8001092 <HAL_ADC_PollForConversion+0x7e>
 8001082:	f7ff fe13 	bl	8000cac <HAL_GetTick>
 8001086:	4602      	mov	r2, r0
 8001088:	697b      	ldr	r3, [r7, #20]
 800108a:	1ad3      	subs	r3, r2, r3
 800108c:	683a      	ldr	r2, [r7, #0]
 800108e:	429a      	cmp	r2, r3
 8001090:	d212      	bcs.n	80010b8 <HAL_ADC_PollForConversion+0xa4>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	f003 0302 	and.w	r3, r3, #2
 800109c:	2b00      	cmp	r3, #0
 800109e:	d10b      	bne.n	80010b8 <HAL_ADC_PollForConversion+0xa4>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80010a4:	f043 0204 	orr.w	r2, r3, #4
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	629a      	str	r2, [r3, #40]	; 0x28
            
            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	2200      	movs	r2, #0
 80010b0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
            
            return HAL_TIMEOUT;
 80010b4:	2303      	movs	r3, #3
 80010b6:	e0a2      	b.n	80011fe <HAL_ADC_PollForConversion+0x1ea>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	f003 0302 	and.w	r3, r3, #2
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d0d6      	beq.n	8001074 <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 80010c6:	e070      	b.n	80011aa <HAL_ADC_PollForConversion+0x196>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 80010c8:	4b4f      	ldr	r3, [pc, #316]	; (8001208 <HAL_ADC_PollForConversion+0x1f4>)
 80010ca:	681c      	ldr	r4, [r3, #0]
 80010cc:	2002      	movs	r0, #2
 80010ce:	f001 f971 	bl	80023b4 <HAL_RCCEx_GetPeriphCLKFreq>
 80010d2:	4603      	mov	r3, r0
 80010d4:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	6919      	ldr	r1, [r3, #16]
 80010de:	4b4b      	ldr	r3, [pc, #300]	; (800120c <HAL_ADC_PollForConversion+0x1f8>)
 80010e0:	400b      	ands	r3, r1
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d118      	bne.n	8001118 <HAL_ADC_PollForConversion+0x104>
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	68d9      	ldr	r1, [r3, #12]
 80010ec:	4b48      	ldr	r3, [pc, #288]	; (8001210 <HAL_ADC_PollForConversion+0x1fc>)
 80010ee:	400b      	ands	r3, r1
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d111      	bne.n	8001118 <HAL_ADC_PollForConversion+0x104>
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	6919      	ldr	r1, [r3, #16]
 80010fa:	4b46      	ldr	r3, [pc, #280]	; (8001214 <HAL_ADC_PollForConversion+0x200>)
 80010fc:	400b      	ands	r3, r1
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d108      	bne.n	8001114 <HAL_ADC_PollForConversion+0x100>
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	68d9      	ldr	r1, [r3, #12]
 8001108:	4b43      	ldr	r3, [pc, #268]	; (8001218 <HAL_ADC_PollForConversion+0x204>)
 800110a:	400b      	ands	r3, r1
 800110c:	2b00      	cmp	r3, #0
 800110e:	d101      	bne.n	8001114 <HAL_ADC_PollForConversion+0x100>
 8001110:	2314      	movs	r3, #20
 8001112:	e020      	b.n	8001156 <HAL_ADC_PollForConversion+0x142>
 8001114:	2329      	movs	r3, #41	; 0x29
 8001116:	e01e      	b.n	8001156 <HAL_ADC_PollForConversion+0x142>
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	6919      	ldr	r1, [r3, #16]
 800111e:	4b3d      	ldr	r3, [pc, #244]	; (8001214 <HAL_ADC_PollForConversion+0x200>)
 8001120:	400b      	ands	r3, r1
 8001122:	2b00      	cmp	r3, #0
 8001124:	d106      	bne.n	8001134 <HAL_ADC_PollForConversion+0x120>
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	68d9      	ldr	r1, [r3, #12]
 800112c:	4b3a      	ldr	r3, [pc, #232]	; (8001218 <HAL_ADC_PollForConversion+0x204>)
 800112e:	400b      	ands	r3, r1
 8001130:	2b00      	cmp	r3, #0
 8001132:	d00d      	beq.n	8001150 <HAL_ADC_PollForConversion+0x13c>
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	6919      	ldr	r1, [r3, #16]
 800113a:	4b38      	ldr	r3, [pc, #224]	; (800121c <HAL_ADC_PollForConversion+0x208>)
 800113c:	400b      	ands	r3, r1
 800113e:	2b00      	cmp	r3, #0
 8001140:	d108      	bne.n	8001154 <HAL_ADC_PollForConversion+0x140>
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	68d9      	ldr	r1, [r3, #12]
 8001148:	4b34      	ldr	r3, [pc, #208]	; (800121c <HAL_ADC_PollForConversion+0x208>)
 800114a:	400b      	ands	r3, r1
 800114c:	2b00      	cmp	r3, #0
 800114e:	d101      	bne.n	8001154 <HAL_ADC_PollForConversion+0x140>
 8001150:	2354      	movs	r3, #84	; 0x54
 8001152:	e000      	b.n	8001156 <HAL_ADC_PollForConversion+0x142>
 8001154:	23fc      	movs	r3, #252	; 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 8001156:	fb02 f303 	mul.w	r3, r2, r3
 800115a:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 800115c:	e021      	b.n	80011a2 <HAL_ADC_PollForConversion+0x18e>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 800115e:	683b      	ldr	r3, [r7, #0]
 8001160:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001164:	d01a      	beq.n	800119c <HAL_ADC_PollForConversion+0x188>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8001166:	683b      	ldr	r3, [r7, #0]
 8001168:	2b00      	cmp	r3, #0
 800116a:	d007      	beq.n	800117c <HAL_ADC_PollForConversion+0x168>
 800116c:	f7ff fd9e 	bl	8000cac <HAL_GetTick>
 8001170:	4602      	mov	r2, r0
 8001172:	697b      	ldr	r3, [r7, #20]
 8001174:	1ad3      	subs	r3, r2, r3
 8001176:	683a      	ldr	r2, [r7, #0]
 8001178:	429a      	cmp	r2, r3
 800117a:	d20f      	bcs.n	800119c <HAL_ADC_PollForConversion+0x188>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 800117c:	68fb      	ldr	r3, [r7, #12]
 800117e:	693a      	ldr	r2, [r7, #16]
 8001180:	429a      	cmp	r2, r3
 8001182:	d90b      	bls.n	800119c <HAL_ADC_PollForConversion+0x188>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001188:	f043 0204 	orr.w	r2, r3, #4
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	629a      	str	r2, [r3, #40]	; 0x28

            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	2200      	movs	r2, #0
 8001194:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

            return HAL_TIMEOUT;
 8001198:	2303      	movs	r3, #3
 800119a:	e030      	b.n	80011fe <HAL_ADC_PollForConversion+0x1ea>
          }
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 800119c:	68fb      	ldr	r3, [r7, #12]
 800119e:	3301      	adds	r3, #1
 80011a0:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 80011a2:	68fb      	ldr	r3, [r7, #12]
 80011a4:	693a      	ldr	r2, [r7, #16]
 80011a6:	429a      	cmp	r2, r3
 80011a8:	d8d9      	bhi.n	800115e <HAL_ADC_PollForConversion+0x14a>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	f06f 0212 	mvn.w	r2, #18
 80011b2:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80011b8:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	629a      	str	r2, [r3, #40]	; 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	689b      	ldr	r3, [r3, #8]
 80011c6:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80011ca:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80011ce:	d115      	bne.n	80011fc <HAL_ADC_PollForConversion+0x1e8>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d111      	bne.n	80011fc <HAL_ADC_PollForConversion+0x1e8>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80011dc:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	629a      	str	r2, [r3, #40]	; 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80011e8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d105      	bne.n	80011fc <HAL_ADC_PollForConversion+0x1e8>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80011f4:	f043 0201 	orr.w	r2, r3, #1
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	629a      	str	r2, [r3, #40]	; 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 80011fc:	2300      	movs	r3, #0
}
 80011fe:	4618      	mov	r0, r3
 8001200:	371c      	adds	r7, #28
 8001202:	46bd      	mov	sp, r7
 8001204:	bd90      	pop	{r4, r7, pc}
 8001206:	bf00      	nop
 8001208:	20000008 	.word	0x20000008
 800120c:	24924924 	.word	0x24924924
 8001210:	00924924 	.word	0x00924924
 8001214:	12492492 	.word	0x12492492
 8001218:	00492492 	.word	0x00492492
 800121c:	00249249 	.word	0x00249249

08001220 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8001220:	b480      	push	{r7}
 8001222:	b083      	sub	sp, #12
 8001224:	af00      	add	r7, sp, #0
 8001226:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 800122e:	4618      	mov	r0, r3
 8001230:	370c      	adds	r7, #12
 8001232:	46bd      	mov	sp, r7
 8001234:	bc80      	pop	{r7}
 8001236:	4770      	bx	lr

08001238 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8001238:	b480      	push	{r7}
 800123a:	b085      	sub	sp, #20
 800123c:	af00      	add	r7, sp, #0
 800123e:	6078      	str	r0, [r7, #4]
 8001240:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001242:	2300      	movs	r3, #0
 8001244:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8001246:	2300      	movs	r3, #0
 8001248:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001250:	2b01      	cmp	r3, #1
 8001252:	d101      	bne.n	8001258 <HAL_ADC_ConfigChannel+0x20>
 8001254:	2302      	movs	r3, #2
 8001256:	e0dc      	b.n	8001412 <HAL_ADC_ConfigChannel+0x1da>
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	2201      	movs	r2, #1
 800125c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001260:	683b      	ldr	r3, [r7, #0]
 8001262:	685b      	ldr	r3, [r3, #4]
 8001264:	2b06      	cmp	r3, #6
 8001266:	d81c      	bhi.n	80012a2 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800126e:	683b      	ldr	r3, [r7, #0]
 8001270:	685a      	ldr	r2, [r3, #4]
 8001272:	4613      	mov	r3, r2
 8001274:	009b      	lsls	r3, r3, #2
 8001276:	4413      	add	r3, r2
 8001278:	3b05      	subs	r3, #5
 800127a:	221f      	movs	r2, #31
 800127c:	fa02 f303 	lsl.w	r3, r2, r3
 8001280:	43db      	mvns	r3, r3
 8001282:	4019      	ands	r1, r3
 8001284:	683b      	ldr	r3, [r7, #0]
 8001286:	6818      	ldr	r0, [r3, #0]
 8001288:	683b      	ldr	r3, [r7, #0]
 800128a:	685a      	ldr	r2, [r3, #4]
 800128c:	4613      	mov	r3, r2
 800128e:	009b      	lsls	r3, r3, #2
 8001290:	4413      	add	r3, r2
 8001292:	3b05      	subs	r3, #5
 8001294:	fa00 f203 	lsl.w	r2, r0, r3
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	430a      	orrs	r2, r1
 800129e:	635a      	str	r2, [r3, #52]	; 0x34
 80012a0:	e03c      	b.n	800131c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80012a2:	683b      	ldr	r3, [r7, #0]
 80012a4:	685b      	ldr	r3, [r3, #4]
 80012a6:	2b0c      	cmp	r3, #12
 80012a8:	d81c      	bhi.n	80012e4 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80012b0:	683b      	ldr	r3, [r7, #0]
 80012b2:	685a      	ldr	r2, [r3, #4]
 80012b4:	4613      	mov	r3, r2
 80012b6:	009b      	lsls	r3, r3, #2
 80012b8:	4413      	add	r3, r2
 80012ba:	3b23      	subs	r3, #35	; 0x23
 80012bc:	221f      	movs	r2, #31
 80012be:	fa02 f303 	lsl.w	r3, r2, r3
 80012c2:	43db      	mvns	r3, r3
 80012c4:	4019      	ands	r1, r3
 80012c6:	683b      	ldr	r3, [r7, #0]
 80012c8:	6818      	ldr	r0, [r3, #0]
 80012ca:	683b      	ldr	r3, [r7, #0]
 80012cc:	685a      	ldr	r2, [r3, #4]
 80012ce:	4613      	mov	r3, r2
 80012d0:	009b      	lsls	r3, r3, #2
 80012d2:	4413      	add	r3, r2
 80012d4:	3b23      	subs	r3, #35	; 0x23
 80012d6:	fa00 f203 	lsl.w	r2, r0, r3
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	430a      	orrs	r2, r1
 80012e0:	631a      	str	r2, [r3, #48]	; 0x30
 80012e2:	e01b      	b.n	800131c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80012ea:	683b      	ldr	r3, [r7, #0]
 80012ec:	685a      	ldr	r2, [r3, #4]
 80012ee:	4613      	mov	r3, r2
 80012f0:	009b      	lsls	r3, r3, #2
 80012f2:	4413      	add	r3, r2
 80012f4:	3b41      	subs	r3, #65	; 0x41
 80012f6:	221f      	movs	r2, #31
 80012f8:	fa02 f303 	lsl.w	r3, r2, r3
 80012fc:	43db      	mvns	r3, r3
 80012fe:	4019      	ands	r1, r3
 8001300:	683b      	ldr	r3, [r7, #0]
 8001302:	6818      	ldr	r0, [r3, #0]
 8001304:	683b      	ldr	r3, [r7, #0]
 8001306:	685a      	ldr	r2, [r3, #4]
 8001308:	4613      	mov	r3, r2
 800130a:	009b      	lsls	r3, r3, #2
 800130c:	4413      	add	r3, r2
 800130e:	3b41      	subs	r3, #65	; 0x41
 8001310:	fa00 f203 	lsl.w	r2, r0, r3
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	430a      	orrs	r2, r1
 800131a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 800131c:	683b      	ldr	r3, [r7, #0]
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	2b09      	cmp	r3, #9
 8001322:	d91c      	bls.n	800135e <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	68d9      	ldr	r1, [r3, #12]
 800132a:	683b      	ldr	r3, [r7, #0]
 800132c:	681a      	ldr	r2, [r3, #0]
 800132e:	4613      	mov	r3, r2
 8001330:	005b      	lsls	r3, r3, #1
 8001332:	4413      	add	r3, r2
 8001334:	3b1e      	subs	r3, #30
 8001336:	2207      	movs	r2, #7
 8001338:	fa02 f303 	lsl.w	r3, r2, r3
 800133c:	43db      	mvns	r3, r3
 800133e:	4019      	ands	r1, r3
 8001340:	683b      	ldr	r3, [r7, #0]
 8001342:	6898      	ldr	r0, [r3, #8]
 8001344:	683b      	ldr	r3, [r7, #0]
 8001346:	681a      	ldr	r2, [r3, #0]
 8001348:	4613      	mov	r3, r2
 800134a:	005b      	lsls	r3, r3, #1
 800134c:	4413      	add	r3, r2
 800134e:	3b1e      	subs	r3, #30
 8001350:	fa00 f203 	lsl.w	r2, r0, r3
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	430a      	orrs	r2, r1
 800135a:	60da      	str	r2, [r3, #12]
 800135c:	e019      	b.n	8001392 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	6919      	ldr	r1, [r3, #16]
 8001364:	683b      	ldr	r3, [r7, #0]
 8001366:	681a      	ldr	r2, [r3, #0]
 8001368:	4613      	mov	r3, r2
 800136a:	005b      	lsls	r3, r3, #1
 800136c:	4413      	add	r3, r2
 800136e:	2207      	movs	r2, #7
 8001370:	fa02 f303 	lsl.w	r3, r2, r3
 8001374:	43db      	mvns	r3, r3
 8001376:	4019      	ands	r1, r3
 8001378:	683b      	ldr	r3, [r7, #0]
 800137a:	6898      	ldr	r0, [r3, #8]
 800137c:	683b      	ldr	r3, [r7, #0]
 800137e:	681a      	ldr	r2, [r3, #0]
 8001380:	4613      	mov	r3, r2
 8001382:	005b      	lsls	r3, r3, #1
 8001384:	4413      	add	r3, r2
 8001386:	fa00 f203 	lsl.w	r2, r0, r3
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	430a      	orrs	r2, r1
 8001390:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001392:	683b      	ldr	r3, [r7, #0]
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	2b10      	cmp	r3, #16
 8001398:	d003      	beq.n	80013a2 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 800139a:	683b      	ldr	r3, [r7, #0]
 800139c:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800139e:	2b11      	cmp	r3, #17
 80013a0:	d132      	bne.n	8001408 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	4a1d      	ldr	r2, [pc, #116]	; (800141c <HAL_ADC_ConfigChannel+0x1e4>)
 80013a8:	4293      	cmp	r3, r2
 80013aa:	d125      	bne.n	80013f8 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	689b      	ldr	r3, [r3, #8]
 80013b2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d126      	bne.n	8001408 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	689a      	ldr	r2, [r3, #8]
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80013c8:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80013ca:	683b      	ldr	r3, [r7, #0]
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	2b10      	cmp	r3, #16
 80013d0:	d11a      	bne.n	8001408 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80013d2:	4b13      	ldr	r3, [pc, #76]	; (8001420 <HAL_ADC_ConfigChannel+0x1e8>)
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	4a13      	ldr	r2, [pc, #76]	; (8001424 <HAL_ADC_ConfigChannel+0x1ec>)
 80013d8:	fba2 2303 	umull	r2, r3, r2, r3
 80013dc:	0c9a      	lsrs	r2, r3, #18
 80013de:	4613      	mov	r3, r2
 80013e0:	009b      	lsls	r3, r3, #2
 80013e2:	4413      	add	r3, r2
 80013e4:	005b      	lsls	r3, r3, #1
 80013e6:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80013e8:	e002      	b.n	80013f0 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 80013ea:	68bb      	ldr	r3, [r7, #8]
 80013ec:	3b01      	subs	r3, #1
 80013ee:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80013f0:	68bb      	ldr	r3, [r7, #8]
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d1f9      	bne.n	80013ea <HAL_ADC_ConfigChannel+0x1b2>
 80013f6:	e007      	b.n	8001408 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013fc:	f043 0220 	orr.w	r2, r3, #32
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8001404:	2301      	movs	r3, #1
 8001406:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	2200      	movs	r2, #0
 800140c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001410:	7bfb      	ldrb	r3, [r7, #15]
}
 8001412:	4618      	mov	r0, r3
 8001414:	3714      	adds	r7, #20
 8001416:	46bd      	mov	sp, r7
 8001418:	bc80      	pop	{r7}
 800141a:	4770      	bx	lr
 800141c:	40012400 	.word	0x40012400
 8001420:	20000008 	.word	0x20000008
 8001424:	431bde83 	.word	0x431bde83

08001428 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	b084      	sub	sp, #16
 800142c:	af00      	add	r7, sp, #0
 800142e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001430:	2300      	movs	r3, #0
 8001432:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8001434:	2300      	movs	r3, #0
 8001436:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	689b      	ldr	r3, [r3, #8]
 800143e:	f003 0301 	and.w	r3, r3, #1
 8001442:	2b01      	cmp	r3, #1
 8001444:	d040      	beq.n	80014c8 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	689a      	ldr	r2, [r3, #8]
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	f042 0201 	orr.w	r2, r2, #1
 8001454:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001456:	4b1f      	ldr	r3, [pc, #124]	; (80014d4 <ADC_Enable+0xac>)
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	4a1f      	ldr	r2, [pc, #124]	; (80014d8 <ADC_Enable+0xb0>)
 800145c:	fba2 2303 	umull	r2, r3, r2, r3
 8001460:	0c9b      	lsrs	r3, r3, #18
 8001462:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001464:	e002      	b.n	800146c <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8001466:	68bb      	ldr	r3, [r7, #8]
 8001468:	3b01      	subs	r3, #1
 800146a:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 800146c:	68bb      	ldr	r3, [r7, #8]
 800146e:	2b00      	cmp	r3, #0
 8001470:	d1f9      	bne.n	8001466 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001472:	f7ff fc1b 	bl	8000cac <HAL_GetTick>
 8001476:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001478:	e01f      	b.n	80014ba <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800147a:	f7ff fc17 	bl	8000cac <HAL_GetTick>
 800147e:	4602      	mov	r2, r0
 8001480:	68fb      	ldr	r3, [r7, #12]
 8001482:	1ad3      	subs	r3, r2, r3
 8001484:	2b02      	cmp	r3, #2
 8001486:	d918      	bls.n	80014ba <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	689b      	ldr	r3, [r3, #8]
 800148e:	f003 0301 	and.w	r3, r3, #1
 8001492:	2b01      	cmp	r3, #1
 8001494:	d011      	beq.n	80014ba <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800149a:	f043 0210 	orr.w	r2, r3, #16
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014a6:	f043 0201 	orr.w	r2, r3, #1
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	2200      	movs	r2, #0
 80014b2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 80014b6:	2301      	movs	r3, #1
 80014b8:	e007      	b.n	80014ca <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	689b      	ldr	r3, [r3, #8]
 80014c0:	f003 0301 	and.w	r3, r3, #1
 80014c4:	2b01      	cmp	r3, #1
 80014c6:	d1d8      	bne.n	800147a <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 80014c8:	2300      	movs	r3, #0
}
 80014ca:	4618      	mov	r0, r3
 80014cc:	3710      	adds	r7, #16
 80014ce:	46bd      	mov	sp, r7
 80014d0:	bd80      	pop	{r7, pc}
 80014d2:	bf00      	nop
 80014d4:	20000008 	.word	0x20000008
 80014d8:	431bde83 	.word	0x431bde83

080014dc <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 80014dc:	b580      	push	{r7, lr}
 80014de:	b084      	sub	sp, #16
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80014e4:	2300      	movs	r3, #0
 80014e6:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	689b      	ldr	r3, [r3, #8]
 80014ee:	f003 0301 	and.w	r3, r3, #1
 80014f2:	2b01      	cmp	r3, #1
 80014f4:	d12e      	bne.n	8001554 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	689a      	ldr	r2, [r3, #8]
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	f022 0201 	bic.w	r2, r2, #1
 8001504:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001506:	f7ff fbd1 	bl	8000cac <HAL_GetTick>
 800150a:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 800150c:	e01b      	b.n	8001546 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800150e:	f7ff fbcd 	bl	8000cac <HAL_GetTick>
 8001512:	4602      	mov	r2, r0
 8001514:	68fb      	ldr	r3, [r7, #12]
 8001516:	1ad3      	subs	r3, r2, r3
 8001518:	2b02      	cmp	r3, #2
 800151a:	d914      	bls.n	8001546 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	689b      	ldr	r3, [r3, #8]
 8001522:	f003 0301 	and.w	r3, r3, #1
 8001526:	2b01      	cmp	r3, #1
 8001528:	d10d      	bne.n	8001546 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800152e:	f043 0210 	orr.w	r2, r3, #16
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800153a:	f043 0201 	orr.w	r2, r3, #1
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8001542:	2301      	movs	r3, #1
 8001544:	e007      	b.n	8001556 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	689b      	ldr	r3, [r3, #8]
 800154c:	f003 0301 	and.w	r3, r3, #1
 8001550:	2b01      	cmp	r3, #1
 8001552:	d0dc      	beq.n	800150e <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001554:	2300      	movs	r3, #0
}
 8001556:	4618      	mov	r0, r3
 8001558:	3710      	adds	r7, #16
 800155a:	46bd      	mov	sp, r7
 800155c:	bd80      	pop	{r7, pc}
	...

08001560 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001560:	b480      	push	{r7}
 8001562:	b085      	sub	sp, #20
 8001564:	af00      	add	r7, sp, #0
 8001566:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	f003 0307 	and.w	r3, r3, #7
 800156e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001570:	4b0c      	ldr	r3, [pc, #48]	; (80015a4 <__NVIC_SetPriorityGrouping+0x44>)
 8001572:	68db      	ldr	r3, [r3, #12]
 8001574:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001576:	68ba      	ldr	r2, [r7, #8]
 8001578:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800157c:	4013      	ands	r3, r2
 800157e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001580:	68fb      	ldr	r3, [r7, #12]
 8001582:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001584:	68bb      	ldr	r3, [r7, #8]
 8001586:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001588:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800158c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001590:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001592:	4a04      	ldr	r2, [pc, #16]	; (80015a4 <__NVIC_SetPriorityGrouping+0x44>)
 8001594:	68bb      	ldr	r3, [r7, #8]
 8001596:	60d3      	str	r3, [r2, #12]
}
 8001598:	bf00      	nop
 800159a:	3714      	adds	r7, #20
 800159c:	46bd      	mov	sp, r7
 800159e:	bc80      	pop	{r7}
 80015a0:	4770      	bx	lr
 80015a2:	bf00      	nop
 80015a4:	e000ed00 	.word	0xe000ed00

080015a8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80015a8:	b480      	push	{r7}
 80015aa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80015ac:	4b04      	ldr	r3, [pc, #16]	; (80015c0 <__NVIC_GetPriorityGrouping+0x18>)
 80015ae:	68db      	ldr	r3, [r3, #12]
 80015b0:	0a1b      	lsrs	r3, r3, #8
 80015b2:	f003 0307 	and.w	r3, r3, #7
}
 80015b6:	4618      	mov	r0, r3
 80015b8:	46bd      	mov	sp, r7
 80015ba:	bc80      	pop	{r7}
 80015bc:	4770      	bx	lr
 80015be:	bf00      	nop
 80015c0:	e000ed00 	.word	0xe000ed00

080015c4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80015c4:	b480      	push	{r7}
 80015c6:	b083      	sub	sp, #12
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	4603      	mov	r3, r0
 80015cc:	6039      	str	r1, [r7, #0]
 80015ce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	db0a      	blt.n	80015ee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015d8:	683b      	ldr	r3, [r7, #0]
 80015da:	b2da      	uxtb	r2, r3
 80015dc:	490c      	ldr	r1, [pc, #48]	; (8001610 <__NVIC_SetPriority+0x4c>)
 80015de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015e2:	0112      	lsls	r2, r2, #4
 80015e4:	b2d2      	uxtb	r2, r2
 80015e6:	440b      	add	r3, r1
 80015e8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80015ec:	e00a      	b.n	8001604 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015ee:	683b      	ldr	r3, [r7, #0]
 80015f0:	b2da      	uxtb	r2, r3
 80015f2:	4908      	ldr	r1, [pc, #32]	; (8001614 <__NVIC_SetPriority+0x50>)
 80015f4:	79fb      	ldrb	r3, [r7, #7]
 80015f6:	f003 030f 	and.w	r3, r3, #15
 80015fa:	3b04      	subs	r3, #4
 80015fc:	0112      	lsls	r2, r2, #4
 80015fe:	b2d2      	uxtb	r2, r2
 8001600:	440b      	add	r3, r1
 8001602:	761a      	strb	r2, [r3, #24]
}
 8001604:	bf00      	nop
 8001606:	370c      	adds	r7, #12
 8001608:	46bd      	mov	sp, r7
 800160a:	bc80      	pop	{r7}
 800160c:	4770      	bx	lr
 800160e:	bf00      	nop
 8001610:	e000e100 	.word	0xe000e100
 8001614:	e000ed00 	.word	0xe000ed00

08001618 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001618:	b480      	push	{r7}
 800161a:	b089      	sub	sp, #36	; 0x24
 800161c:	af00      	add	r7, sp, #0
 800161e:	60f8      	str	r0, [r7, #12]
 8001620:	60b9      	str	r1, [r7, #8]
 8001622:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001624:	68fb      	ldr	r3, [r7, #12]
 8001626:	f003 0307 	and.w	r3, r3, #7
 800162a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800162c:	69fb      	ldr	r3, [r7, #28]
 800162e:	f1c3 0307 	rsb	r3, r3, #7
 8001632:	2b04      	cmp	r3, #4
 8001634:	bf28      	it	cs
 8001636:	2304      	movcs	r3, #4
 8001638:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800163a:	69fb      	ldr	r3, [r7, #28]
 800163c:	3304      	adds	r3, #4
 800163e:	2b06      	cmp	r3, #6
 8001640:	d902      	bls.n	8001648 <NVIC_EncodePriority+0x30>
 8001642:	69fb      	ldr	r3, [r7, #28]
 8001644:	3b03      	subs	r3, #3
 8001646:	e000      	b.n	800164a <NVIC_EncodePriority+0x32>
 8001648:	2300      	movs	r3, #0
 800164a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800164c:	f04f 32ff 	mov.w	r2, #4294967295
 8001650:	69bb      	ldr	r3, [r7, #24]
 8001652:	fa02 f303 	lsl.w	r3, r2, r3
 8001656:	43da      	mvns	r2, r3
 8001658:	68bb      	ldr	r3, [r7, #8]
 800165a:	401a      	ands	r2, r3
 800165c:	697b      	ldr	r3, [r7, #20]
 800165e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001660:	f04f 31ff 	mov.w	r1, #4294967295
 8001664:	697b      	ldr	r3, [r7, #20]
 8001666:	fa01 f303 	lsl.w	r3, r1, r3
 800166a:	43d9      	mvns	r1, r3
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001670:	4313      	orrs	r3, r2
         );
}
 8001672:	4618      	mov	r0, r3
 8001674:	3724      	adds	r7, #36	; 0x24
 8001676:	46bd      	mov	sp, r7
 8001678:	bc80      	pop	{r7}
 800167a:	4770      	bx	lr

0800167c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800167c:	b580      	push	{r7, lr}
 800167e:	b082      	sub	sp, #8
 8001680:	af00      	add	r7, sp, #0
 8001682:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	3b01      	subs	r3, #1
 8001688:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800168c:	d301      	bcc.n	8001692 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800168e:	2301      	movs	r3, #1
 8001690:	e00f      	b.n	80016b2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001692:	4a0a      	ldr	r2, [pc, #40]	; (80016bc <SysTick_Config+0x40>)
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	3b01      	subs	r3, #1
 8001698:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800169a:	210f      	movs	r1, #15
 800169c:	f04f 30ff 	mov.w	r0, #4294967295
 80016a0:	f7ff ff90 	bl	80015c4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80016a4:	4b05      	ldr	r3, [pc, #20]	; (80016bc <SysTick_Config+0x40>)
 80016a6:	2200      	movs	r2, #0
 80016a8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80016aa:	4b04      	ldr	r3, [pc, #16]	; (80016bc <SysTick_Config+0x40>)
 80016ac:	2207      	movs	r2, #7
 80016ae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80016b0:	2300      	movs	r3, #0
}
 80016b2:	4618      	mov	r0, r3
 80016b4:	3708      	adds	r7, #8
 80016b6:	46bd      	mov	sp, r7
 80016b8:	bd80      	pop	{r7, pc}
 80016ba:	bf00      	nop
 80016bc:	e000e010 	.word	0xe000e010

080016c0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016c0:	b580      	push	{r7, lr}
 80016c2:	b082      	sub	sp, #8
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80016c8:	6878      	ldr	r0, [r7, #4]
 80016ca:	f7ff ff49 	bl	8001560 <__NVIC_SetPriorityGrouping>
}
 80016ce:	bf00      	nop
 80016d0:	3708      	adds	r7, #8
 80016d2:	46bd      	mov	sp, r7
 80016d4:	bd80      	pop	{r7, pc}

080016d6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80016d6:	b580      	push	{r7, lr}
 80016d8:	b086      	sub	sp, #24
 80016da:	af00      	add	r7, sp, #0
 80016dc:	4603      	mov	r3, r0
 80016de:	60b9      	str	r1, [r7, #8]
 80016e0:	607a      	str	r2, [r7, #4]
 80016e2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80016e4:	2300      	movs	r3, #0
 80016e6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80016e8:	f7ff ff5e 	bl	80015a8 <__NVIC_GetPriorityGrouping>
 80016ec:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80016ee:	687a      	ldr	r2, [r7, #4]
 80016f0:	68b9      	ldr	r1, [r7, #8]
 80016f2:	6978      	ldr	r0, [r7, #20]
 80016f4:	f7ff ff90 	bl	8001618 <NVIC_EncodePriority>
 80016f8:	4602      	mov	r2, r0
 80016fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80016fe:	4611      	mov	r1, r2
 8001700:	4618      	mov	r0, r3
 8001702:	f7ff ff5f 	bl	80015c4 <__NVIC_SetPriority>
}
 8001706:	bf00      	nop
 8001708:	3718      	adds	r7, #24
 800170a:	46bd      	mov	sp, r7
 800170c:	bd80      	pop	{r7, pc}

0800170e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800170e:	b580      	push	{r7, lr}
 8001710:	b082      	sub	sp, #8
 8001712:	af00      	add	r7, sp, #0
 8001714:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001716:	6878      	ldr	r0, [r7, #4]
 8001718:	f7ff ffb0 	bl	800167c <SysTick_Config>
 800171c:	4603      	mov	r3, r0
}
 800171e:	4618      	mov	r0, r3
 8001720:	3708      	adds	r7, #8
 8001722:	46bd      	mov	sp, r7
 8001724:	bd80      	pop	{r7, pc}
	...

08001728 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001728:	b480      	push	{r7}
 800172a:	b08b      	sub	sp, #44	; 0x2c
 800172c:	af00      	add	r7, sp, #0
 800172e:	6078      	str	r0, [r7, #4]
 8001730:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001732:	2300      	movs	r3, #0
 8001734:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001736:	2300      	movs	r3, #0
 8001738:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800173a:	e161      	b.n	8001a00 <HAL_GPIO_Init+0x2d8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800173c:	2201      	movs	r2, #1
 800173e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001740:	fa02 f303 	lsl.w	r3, r2, r3
 8001744:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001746:	683b      	ldr	r3, [r7, #0]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	69fa      	ldr	r2, [r7, #28]
 800174c:	4013      	ands	r3, r2
 800174e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001750:	69ba      	ldr	r2, [r7, #24]
 8001752:	69fb      	ldr	r3, [r7, #28]
 8001754:	429a      	cmp	r2, r3
 8001756:	f040 8150 	bne.w	80019fa <HAL_GPIO_Init+0x2d2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800175a:	683b      	ldr	r3, [r7, #0]
 800175c:	685b      	ldr	r3, [r3, #4]
 800175e:	4a97      	ldr	r2, [pc, #604]	; (80019bc <HAL_GPIO_Init+0x294>)
 8001760:	4293      	cmp	r3, r2
 8001762:	d05e      	beq.n	8001822 <HAL_GPIO_Init+0xfa>
 8001764:	4a95      	ldr	r2, [pc, #596]	; (80019bc <HAL_GPIO_Init+0x294>)
 8001766:	4293      	cmp	r3, r2
 8001768:	d875      	bhi.n	8001856 <HAL_GPIO_Init+0x12e>
 800176a:	4a95      	ldr	r2, [pc, #596]	; (80019c0 <HAL_GPIO_Init+0x298>)
 800176c:	4293      	cmp	r3, r2
 800176e:	d058      	beq.n	8001822 <HAL_GPIO_Init+0xfa>
 8001770:	4a93      	ldr	r2, [pc, #588]	; (80019c0 <HAL_GPIO_Init+0x298>)
 8001772:	4293      	cmp	r3, r2
 8001774:	d86f      	bhi.n	8001856 <HAL_GPIO_Init+0x12e>
 8001776:	4a93      	ldr	r2, [pc, #588]	; (80019c4 <HAL_GPIO_Init+0x29c>)
 8001778:	4293      	cmp	r3, r2
 800177a:	d052      	beq.n	8001822 <HAL_GPIO_Init+0xfa>
 800177c:	4a91      	ldr	r2, [pc, #580]	; (80019c4 <HAL_GPIO_Init+0x29c>)
 800177e:	4293      	cmp	r3, r2
 8001780:	d869      	bhi.n	8001856 <HAL_GPIO_Init+0x12e>
 8001782:	4a91      	ldr	r2, [pc, #580]	; (80019c8 <HAL_GPIO_Init+0x2a0>)
 8001784:	4293      	cmp	r3, r2
 8001786:	d04c      	beq.n	8001822 <HAL_GPIO_Init+0xfa>
 8001788:	4a8f      	ldr	r2, [pc, #572]	; (80019c8 <HAL_GPIO_Init+0x2a0>)
 800178a:	4293      	cmp	r3, r2
 800178c:	d863      	bhi.n	8001856 <HAL_GPIO_Init+0x12e>
 800178e:	4a8f      	ldr	r2, [pc, #572]	; (80019cc <HAL_GPIO_Init+0x2a4>)
 8001790:	4293      	cmp	r3, r2
 8001792:	d046      	beq.n	8001822 <HAL_GPIO_Init+0xfa>
 8001794:	4a8d      	ldr	r2, [pc, #564]	; (80019cc <HAL_GPIO_Init+0x2a4>)
 8001796:	4293      	cmp	r3, r2
 8001798:	d85d      	bhi.n	8001856 <HAL_GPIO_Init+0x12e>
 800179a:	2b12      	cmp	r3, #18
 800179c:	d82a      	bhi.n	80017f4 <HAL_GPIO_Init+0xcc>
 800179e:	2b12      	cmp	r3, #18
 80017a0:	d859      	bhi.n	8001856 <HAL_GPIO_Init+0x12e>
 80017a2:	a201      	add	r2, pc, #4	; (adr r2, 80017a8 <HAL_GPIO_Init+0x80>)
 80017a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80017a8:	08001823 	.word	0x08001823
 80017ac:	080017fd 	.word	0x080017fd
 80017b0:	0800180f 	.word	0x0800180f
 80017b4:	08001851 	.word	0x08001851
 80017b8:	08001857 	.word	0x08001857
 80017bc:	08001857 	.word	0x08001857
 80017c0:	08001857 	.word	0x08001857
 80017c4:	08001857 	.word	0x08001857
 80017c8:	08001857 	.word	0x08001857
 80017cc:	08001857 	.word	0x08001857
 80017d0:	08001857 	.word	0x08001857
 80017d4:	08001857 	.word	0x08001857
 80017d8:	08001857 	.word	0x08001857
 80017dc:	08001857 	.word	0x08001857
 80017e0:	08001857 	.word	0x08001857
 80017e4:	08001857 	.word	0x08001857
 80017e8:	08001857 	.word	0x08001857
 80017ec:	08001805 	.word	0x08001805
 80017f0:	08001819 	.word	0x08001819
 80017f4:	4a76      	ldr	r2, [pc, #472]	; (80019d0 <HAL_GPIO_Init+0x2a8>)
 80017f6:	4293      	cmp	r3, r2
 80017f8:	d013      	beq.n	8001822 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80017fa:	e02c      	b.n	8001856 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80017fc:	683b      	ldr	r3, [r7, #0]
 80017fe:	68db      	ldr	r3, [r3, #12]
 8001800:	623b      	str	r3, [r7, #32]
          break;
 8001802:	e029      	b.n	8001858 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001804:	683b      	ldr	r3, [r7, #0]
 8001806:	68db      	ldr	r3, [r3, #12]
 8001808:	3304      	adds	r3, #4
 800180a:	623b      	str	r3, [r7, #32]
          break;
 800180c:	e024      	b.n	8001858 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800180e:	683b      	ldr	r3, [r7, #0]
 8001810:	68db      	ldr	r3, [r3, #12]
 8001812:	3308      	adds	r3, #8
 8001814:	623b      	str	r3, [r7, #32]
          break;
 8001816:	e01f      	b.n	8001858 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001818:	683b      	ldr	r3, [r7, #0]
 800181a:	68db      	ldr	r3, [r3, #12]
 800181c:	330c      	adds	r3, #12
 800181e:	623b      	str	r3, [r7, #32]
          break;
 8001820:	e01a      	b.n	8001858 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001822:	683b      	ldr	r3, [r7, #0]
 8001824:	689b      	ldr	r3, [r3, #8]
 8001826:	2b00      	cmp	r3, #0
 8001828:	d102      	bne.n	8001830 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800182a:	2304      	movs	r3, #4
 800182c:	623b      	str	r3, [r7, #32]
          break;
 800182e:	e013      	b.n	8001858 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001830:	683b      	ldr	r3, [r7, #0]
 8001832:	689b      	ldr	r3, [r3, #8]
 8001834:	2b01      	cmp	r3, #1
 8001836:	d105      	bne.n	8001844 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001838:	2308      	movs	r3, #8
 800183a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	69fa      	ldr	r2, [r7, #28]
 8001840:	611a      	str	r2, [r3, #16]
          break;
 8001842:	e009      	b.n	8001858 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001844:	2308      	movs	r3, #8
 8001846:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	69fa      	ldr	r2, [r7, #28]
 800184c:	615a      	str	r2, [r3, #20]
          break;
 800184e:	e003      	b.n	8001858 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001850:	2300      	movs	r3, #0
 8001852:	623b      	str	r3, [r7, #32]
          break;
 8001854:	e000      	b.n	8001858 <HAL_GPIO_Init+0x130>
          break;
 8001856:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001858:	69bb      	ldr	r3, [r7, #24]
 800185a:	2bff      	cmp	r3, #255	; 0xff
 800185c:	d801      	bhi.n	8001862 <HAL_GPIO_Init+0x13a>
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	e001      	b.n	8001866 <HAL_GPIO_Init+0x13e>
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	3304      	adds	r3, #4
 8001866:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001868:	69bb      	ldr	r3, [r7, #24]
 800186a:	2bff      	cmp	r3, #255	; 0xff
 800186c:	d802      	bhi.n	8001874 <HAL_GPIO_Init+0x14c>
 800186e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001870:	009b      	lsls	r3, r3, #2
 8001872:	e002      	b.n	800187a <HAL_GPIO_Init+0x152>
 8001874:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001876:	3b08      	subs	r3, #8
 8001878:	009b      	lsls	r3, r3, #2
 800187a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800187c:	697b      	ldr	r3, [r7, #20]
 800187e:	681a      	ldr	r2, [r3, #0]
 8001880:	210f      	movs	r1, #15
 8001882:	693b      	ldr	r3, [r7, #16]
 8001884:	fa01 f303 	lsl.w	r3, r1, r3
 8001888:	43db      	mvns	r3, r3
 800188a:	401a      	ands	r2, r3
 800188c:	6a39      	ldr	r1, [r7, #32]
 800188e:	693b      	ldr	r3, [r7, #16]
 8001890:	fa01 f303 	lsl.w	r3, r1, r3
 8001894:	431a      	orrs	r2, r3
 8001896:	697b      	ldr	r3, [r7, #20]
 8001898:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800189a:	683b      	ldr	r3, [r7, #0]
 800189c:	685b      	ldr	r3, [r3, #4]
 800189e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	f000 80a9 	beq.w	80019fa <HAL_GPIO_Init+0x2d2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80018a8:	4b4a      	ldr	r3, [pc, #296]	; (80019d4 <HAL_GPIO_Init+0x2ac>)
 80018aa:	699b      	ldr	r3, [r3, #24]
 80018ac:	4a49      	ldr	r2, [pc, #292]	; (80019d4 <HAL_GPIO_Init+0x2ac>)
 80018ae:	f043 0301 	orr.w	r3, r3, #1
 80018b2:	6193      	str	r3, [r2, #24]
 80018b4:	4b47      	ldr	r3, [pc, #284]	; (80019d4 <HAL_GPIO_Init+0x2ac>)
 80018b6:	699b      	ldr	r3, [r3, #24]
 80018b8:	f003 0301 	and.w	r3, r3, #1
 80018bc:	60bb      	str	r3, [r7, #8]
 80018be:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80018c0:	4a45      	ldr	r2, [pc, #276]	; (80019d8 <HAL_GPIO_Init+0x2b0>)
 80018c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018c4:	089b      	lsrs	r3, r3, #2
 80018c6:	3302      	adds	r3, #2
 80018c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80018cc:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80018ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018d0:	f003 0303 	and.w	r3, r3, #3
 80018d4:	009b      	lsls	r3, r3, #2
 80018d6:	220f      	movs	r2, #15
 80018d8:	fa02 f303 	lsl.w	r3, r2, r3
 80018dc:	43db      	mvns	r3, r3
 80018de:	68fa      	ldr	r2, [r7, #12]
 80018e0:	4013      	ands	r3, r2
 80018e2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	4a3d      	ldr	r2, [pc, #244]	; (80019dc <HAL_GPIO_Init+0x2b4>)
 80018e8:	4293      	cmp	r3, r2
 80018ea:	d00d      	beq.n	8001908 <HAL_GPIO_Init+0x1e0>
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	4a3c      	ldr	r2, [pc, #240]	; (80019e0 <HAL_GPIO_Init+0x2b8>)
 80018f0:	4293      	cmp	r3, r2
 80018f2:	d007      	beq.n	8001904 <HAL_GPIO_Init+0x1dc>
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	4a3b      	ldr	r2, [pc, #236]	; (80019e4 <HAL_GPIO_Init+0x2bc>)
 80018f8:	4293      	cmp	r3, r2
 80018fa:	d101      	bne.n	8001900 <HAL_GPIO_Init+0x1d8>
 80018fc:	2302      	movs	r3, #2
 80018fe:	e004      	b.n	800190a <HAL_GPIO_Init+0x1e2>
 8001900:	2303      	movs	r3, #3
 8001902:	e002      	b.n	800190a <HAL_GPIO_Init+0x1e2>
 8001904:	2301      	movs	r3, #1
 8001906:	e000      	b.n	800190a <HAL_GPIO_Init+0x1e2>
 8001908:	2300      	movs	r3, #0
 800190a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800190c:	f002 0203 	and.w	r2, r2, #3
 8001910:	0092      	lsls	r2, r2, #2
 8001912:	4093      	lsls	r3, r2
 8001914:	68fa      	ldr	r2, [r7, #12]
 8001916:	4313      	orrs	r3, r2
 8001918:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800191a:	492f      	ldr	r1, [pc, #188]	; (80019d8 <HAL_GPIO_Init+0x2b0>)
 800191c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800191e:	089b      	lsrs	r3, r3, #2
 8001920:	3302      	adds	r3, #2
 8001922:	68fa      	ldr	r2, [r7, #12]
 8001924:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001928:	683b      	ldr	r3, [r7, #0]
 800192a:	685b      	ldr	r3, [r3, #4]
 800192c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001930:	2b00      	cmp	r3, #0
 8001932:	d006      	beq.n	8001942 <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001934:	4b2c      	ldr	r3, [pc, #176]	; (80019e8 <HAL_GPIO_Init+0x2c0>)
 8001936:	689a      	ldr	r2, [r3, #8]
 8001938:	492b      	ldr	r1, [pc, #172]	; (80019e8 <HAL_GPIO_Init+0x2c0>)
 800193a:	69bb      	ldr	r3, [r7, #24]
 800193c:	4313      	orrs	r3, r2
 800193e:	608b      	str	r3, [r1, #8]
 8001940:	e006      	b.n	8001950 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001942:	4b29      	ldr	r3, [pc, #164]	; (80019e8 <HAL_GPIO_Init+0x2c0>)
 8001944:	689a      	ldr	r2, [r3, #8]
 8001946:	69bb      	ldr	r3, [r7, #24]
 8001948:	43db      	mvns	r3, r3
 800194a:	4927      	ldr	r1, [pc, #156]	; (80019e8 <HAL_GPIO_Init+0x2c0>)
 800194c:	4013      	ands	r3, r2
 800194e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001950:	683b      	ldr	r3, [r7, #0]
 8001952:	685b      	ldr	r3, [r3, #4]
 8001954:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001958:	2b00      	cmp	r3, #0
 800195a:	d006      	beq.n	800196a <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800195c:	4b22      	ldr	r3, [pc, #136]	; (80019e8 <HAL_GPIO_Init+0x2c0>)
 800195e:	68da      	ldr	r2, [r3, #12]
 8001960:	4921      	ldr	r1, [pc, #132]	; (80019e8 <HAL_GPIO_Init+0x2c0>)
 8001962:	69bb      	ldr	r3, [r7, #24]
 8001964:	4313      	orrs	r3, r2
 8001966:	60cb      	str	r3, [r1, #12]
 8001968:	e006      	b.n	8001978 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800196a:	4b1f      	ldr	r3, [pc, #124]	; (80019e8 <HAL_GPIO_Init+0x2c0>)
 800196c:	68da      	ldr	r2, [r3, #12]
 800196e:	69bb      	ldr	r3, [r7, #24]
 8001970:	43db      	mvns	r3, r3
 8001972:	491d      	ldr	r1, [pc, #116]	; (80019e8 <HAL_GPIO_Init+0x2c0>)
 8001974:	4013      	ands	r3, r2
 8001976:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001978:	683b      	ldr	r3, [r7, #0]
 800197a:	685b      	ldr	r3, [r3, #4]
 800197c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001980:	2b00      	cmp	r3, #0
 8001982:	d006      	beq.n	8001992 <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001984:	4b18      	ldr	r3, [pc, #96]	; (80019e8 <HAL_GPIO_Init+0x2c0>)
 8001986:	685a      	ldr	r2, [r3, #4]
 8001988:	4917      	ldr	r1, [pc, #92]	; (80019e8 <HAL_GPIO_Init+0x2c0>)
 800198a:	69bb      	ldr	r3, [r7, #24]
 800198c:	4313      	orrs	r3, r2
 800198e:	604b      	str	r3, [r1, #4]
 8001990:	e006      	b.n	80019a0 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001992:	4b15      	ldr	r3, [pc, #84]	; (80019e8 <HAL_GPIO_Init+0x2c0>)
 8001994:	685a      	ldr	r2, [r3, #4]
 8001996:	69bb      	ldr	r3, [r7, #24]
 8001998:	43db      	mvns	r3, r3
 800199a:	4913      	ldr	r1, [pc, #76]	; (80019e8 <HAL_GPIO_Init+0x2c0>)
 800199c:	4013      	ands	r3, r2
 800199e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80019a0:	683b      	ldr	r3, [r7, #0]
 80019a2:	685b      	ldr	r3, [r3, #4]
 80019a4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d01f      	beq.n	80019ec <HAL_GPIO_Init+0x2c4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80019ac:	4b0e      	ldr	r3, [pc, #56]	; (80019e8 <HAL_GPIO_Init+0x2c0>)
 80019ae:	681a      	ldr	r2, [r3, #0]
 80019b0:	490d      	ldr	r1, [pc, #52]	; (80019e8 <HAL_GPIO_Init+0x2c0>)
 80019b2:	69bb      	ldr	r3, [r7, #24]
 80019b4:	4313      	orrs	r3, r2
 80019b6:	600b      	str	r3, [r1, #0]
 80019b8:	e01f      	b.n	80019fa <HAL_GPIO_Init+0x2d2>
 80019ba:	bf00      	nop
 80019bc:	10320000 	.word	0x10320000
 80019c0:	10310000 	.word	0x10310000
 80019c4:	10220000 	.word	0x10220000
 80019c8:	10210000 	.word	0x10210000
 80019cc:	10120000 	.word	0x10120000
 80019d0:	10110000 	.word	0x10110000
 80019d4:	40021000 	.word	0x40021000
 80019d8:	40010000 	.word	0x40010000
 80019dc:	40010800 	.word	0x40010800
 80019e0:	40010c00 	.word	0x40010c00
 80019e4:	40011000 	.word	0x40011000
 80019e8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80019ec:	4b0b      	ldr	r3, [pc, #44]	; (8001a1c <HAL_GPIO_Init+0x2f4>)
 80019ee:	681a      	ldr	r2, [r3, #0]
 80019f0:	69bb      	ldr	r3, [r7, #24]
 80019f2:	43db      	mvns	r3, r3
 80019f4:	4909      	ldr	r1, [pc, #36]	; (8001a1c <HAL_GPIO_Init+0x2f4>)
 80019f6:	4013      	ands	r3, r2
 80019f8:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80019fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019fc:	3301      	adds	r3, #1
 80019fe:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001a00:	683b      	ldr	r3, [r7, #0]
 8001a02:	681a      	ldr	r2, [r3, #0]
 8001a04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a06:	fa22 f303 	lsr.w	r3, r2, r3
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	f47f ae96 	bne.w	800173c <HAL_GPIO_Init+0x14>
  }
}
 8001a10:	bf00      	nop
 8001a12:	bf00      	nop
 8001a14:	372c      	adds	r7, #44	; 0x2c
 8001a16:	46bd      	mov	sp, r7
 8001a18:	bc80      	pop	{r7}
 8001a1a:	4770      	bx	lr
 8001a1c:	40010400 	.word	0x40010400

08001a20 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001a20:	b480      	push	{r7}
 8001a22:	b083      	sub	sp, #12
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	6078      	str	r0, [r7, #4]
 8001a28:	460b      	mov	r3, r1
 8001a2a:	807b      	strh	r3, [r7, #2]
 8001a2c:	4613      	mov	r3, r2
 8001a2e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001a30:	787b      	ldrb	r3, [r7, #1]
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d003      	beq.n	8001a3e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001a36:	887a      	ldrh	r2, [r7, #2]
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001a3c:	e003      	b.n	8001a46 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001a3e:	887b      	ldrh	r3, [r7, #2]
 8001a40:	041a      	lsls	r2, r3, #16
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	611a      	str	r2, [r3, #16]
}
 8001a46:	bf00      	nop
 8001a48:	370c      	adds	r7, #12
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	bc80      	pop	{r7}
 8001a4e:	4770      	bx	lr

08001a50 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001a50:	b580      	push	{r7, lr}
 8001a52:	b086      	sub	sp, #24
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d101      	bne.n	8001a62 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001a5e:	2301      	movs	r3, #1
 8001a60:	e272      	b.n	8001f48 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	f003 0301 	and.w	r3, r3, #1
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	f000 8087 	beq.w	8001b7e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001a70:	4b92      	ldr	r3, [pc, #584]	; (8001cbc <HAL_RCC_OscConfig+0x26c>)
 8001a72:	685b      	ldr	r3, [r3, #4]
 8001a74:	f003 030c 	and.w	r3, r3, #12
 8001a78:	2b04      	cmp	r3, #4
 8001a7a:	d00c      	beq.n	8001a96 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001a7c:	4b8f      	ldr	r3, [pc, #572]	; (8001cbc <HAL_RCC_OscConfig+0x26c>)
 8001a7e:	685b      	ldr	r3, [r3, #4]
 8001a80:	f003 030c 	and.w	r3, r3, #12
 8001a84:	2b08      	cmp	r3, #8
 8001a86:	d112      	bne.n	8001aae <HAL_RCC_OscConfig+0x5e>
 8001a88:	4b8c      	ldr	r3, [pc, #560]	; (8001cbc <HAL_RCC_OscConfig+0x26c>)
 8001a8a:	685b      	ldr	r3, [r3, #4]
 8001a8c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a90:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a94:	d10b      	bne.n	8001aae <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a96:	4b89      	ldr	r3, [pc, #548]	; (8001cbc <HAL_RCC_OscConfig+0x26c>)
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d06c      	beq.n	8001b7c <HAL_RCC_OscConfig+0x12c>
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	685b      	ldr	r3, [r3, #4]
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d168      	bne.n	8001b7c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001aaa:	2301      	movs	r3, #1
 8001aac:	e24c      	b.n	8001f48 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	685b      	ldr	r3, [r3, #4]
 8001ab2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ab6:	d106      	bne.n	8001ac6 <HAL_RCC_OscConfig+0x76>
 8001ab8:	4b80      	ldr	r3, [pc, #512]	; (8001cbc <HAL_RCC_OscConfig+0x26c>)
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	4a7f      	ldr	r2, [pc, #508]	; (8001cbc <HAL_RCC_OscConfig+0x26c>)
 8001abe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ac2:	6013      	str	r3, [r2, #0]
 8001ac4:	e02e      	b.n	8001b24 <HAL_RCC_OscConfig+0xd4>
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	685b      	ldr	r3, [r3, #4]
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d10c      	bne.n	8001ae8 <HAL_RCC_OscConfig+0x98>
 8001ace:	4b7b      	ldr	r3, [pc, #492]	; (8001cbc <HAL_RCC_OscConfig+0x26c>)
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	4a7a      	ldr	r2, [pc, #488]	; (8001cbc <HAL_RCC_OscConfig+0x26c>)
 8001ad4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001ad8:	6013      	str	r3, [r2, #0]
 8001ada:	4b78      	ldr	r3, [pc, #480]	; (8001cbc <HAL_RCC_OscConfig+0x26c>)
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	4a77      	ldr	r2, [pc, #476]	; (8001cbc <HAL_RCC_OscConfig+0x26c>)
 8001ae0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001ae4:	6013      	str	r3, [r2, #0]
 8001ae6:	e01d      	b.n	8001b24 <HAL_RCC_OscConfig+0xd4>
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	685b      	ldr	r3, [r3, #4]
 8001aec:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001af0:	d10c      	bne.n	8001b0c <HAL_RCC_OscConfig+0xbc>
 8001af2:	4b72      	ldr	r3, [pc, #456]	; (8001cbc <HAL_RCC_OscConfig+0x26c>)
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	4a71      	ldr	r2, [pc, #452]	; (8001cbc <HAL_RCC_OscConfig+0x26c>)
 8001af8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001afc:	6013      	str	r3, [r2, #0]
 8001afe:	4b6f      	ldr	r3, [pc, #444]	; (8001cbc <HAL_RCC_OscConfig+0x26c>)
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	4a6e      	ldr	r2, [pc, #440]	; (8001cbc <HAL_RCC_OscConfig+0x26c>)
 8001b04:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b08:	6013      	str	r3, [r2, #0]
 8001b0a:	e00b      	b.n	8001b24 <HAL_RCC_OscConfig+0xd4>
 8001b0c:	4b6b      	ldr	r3, [pc, #428]	; (8001cbc <HAL_RCC_OscConfig+0x26c>)
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	4a6a      	ldr	r2, [pc, #424]	; (8001cbc <HAL_RCC_OscConfig+0x26c>)
 8001b12:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001b16:	6013      	str	r3, [r2, #0]
 8001b18:	4b68      	ldr	r3, [pc, #416]	; (8001cbc <HAL_RCC_OscConfig+0x26c>)
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	4a67      	ldr	r2, [pc, #412]	; (8001cbc <HAL_RCC_OscConfig+0x26c>)
 8001b1e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001b22:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	685b      	ldr	r3, [r3, #4]
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d013      	beq.n	8001b54 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b2c:	f7ff f8be 	bl	8000cac <HAL_GetTick>
 8001b30:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b32:	e008      	b.n	8001b46 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001b34:	f7ff f8ba 	bl	8000cac <HAL_GetTick>
 8001b38:	4602      	mov	r2, r0
 8001b3a:	693b      	ldr	r3, [r7, #16]
 8001b3c:	1ad3      	subs	r3, r2, r3
 8001b3e:	2b64      	cmp	r3, #100	; 0x64
 8001b40:	d901      	bls.n	8001b46 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001b42:	2303      	movs	r3, #3
 8001b44:	e200      	b.n	8001f48 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b46:	4b5d      	ldr	r3, [pc, #372]	; (8001cbc <HAL_RCC_OscConfig+0x26c>)
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d0f0      	beq.n	8001b34 <HAL_RCC_OscConfig+0xe4>
 8001b52:	e014      	b.n	8001b7e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b54:	f7ff f8aa 	bl	8000cac <HAL_GetTick>
 8001b58:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b5a:	e008      	b.n	8001b6e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001b5c:	f7ff f8a6 	bl	8000cac <HAL_GetTick>
 8001b60:	4602      	mov	r2, r0
 8001b62:	693b      	ldr	r3, [r7, #16]
 8001b64:	1ad3      	subs	r3, r2, r3
 8001b66:	2b64      	cmp	r3, #100	; 0x64
 8001b68:	d901      	bls.n	8001b6e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001b6a:	2303      	movs	r3, #3
 8001b6c:	e1ec      	b.n	8001f48 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b6e:	4b53      	ldr	r3, [pc, #332]	; (8001cbc <HAL_RCC_OscConfig+0x26c>)
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d1f0      	bne.n	8001b5c <HAL_RCC_OscConfig+0x10c>
 8001b7a:	e000      	b.n	8001b7e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b7c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	f003 0302 	and.w	r3, r3, #2
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d063      	beq.n	8001c52 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001b8a:	4b4c      	ldr	r3, [pc, #304]	; (8001cbc <HAL_RCC_OscConfig+0x26c>)
 8001b8c:	685b      	ldr	r3, [r3, #4]
 8001b8e:	f003 030c 	and.w	r3, r3, #12
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d00b      	beq.n	8001bae <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001b96:	4b49      	ldr	r3, [pc, #292]	; (8001cbc <HAL_RCC_OscConfig+0x26c>)
 8001b98:	685b      	ldr	r3, [r3, #4]
 8001b9a:	f003 030c 	and.w	r3, r3, #12
 8001b9e:	2b08      	cmp	r3, #8
 8001ba0:	d11c      	bne.n	8001bdc <HAL_RCC_OscConfig+0x18c>
 8001ba2:	4b46      	ldr	r3, [pc, #280]	; (8001cbc <HAL_RCC_OscConfig+0x26c>)
 8001ba4:	685b      	ldr	r3, [r3, #4]
 8001ba6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d116      	bne.n	8001bdc <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001bae:	4b43      	ldr	r3, [pc, #268]	; (8001cbc <HAL_RCC_OscConfig+0x26c>)
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	f003 0302 	and.w	r3, r3, #2
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d005      	beq.n	8001bc6 <HAL_RCC_OscConfig+0x176>
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	691b      	ldr	r3, [r3, #16]
 8001bbe:	2b01      	cmp	r3, #1
 8001bc0:	d001      	beq.n	8001bc6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001bc2:	2301      	movs	r3, #1
 8001bc4:	e1c0      	b.n	8001f48 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001bc6:	4b3d      	ldr	r3, [pc, #244]	; (8001cbc <HAL_RCC_OscConfig+0x26c>)
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	695b      	ldr	r3, [r3, #20]
 8001bd2:	00db      	lsls	r3, r3, #3
 8001bd4:	4939      	ldr	r1, [pc, #228]	; (8001cbc <HAL_RCC_OscConfig+0x26c>)
 8001bd6:	4313      	orrs	r3, r2
 8001bd8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001bda:	e03a      	b.n	8001c52 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	691b      	ldr	r3, [r3, #16]
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d020      	beq.n	8001c26 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001be4:	4b36      	ldr	r3, [pc, #216]	; (8001cc0 <HAL_RCC_OscConfig+0x270>)
 8001be6:	2201      	movs	r2, #1
 8001be8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bea:	f7ff f85f 	bl	8000cac <HAL_GetTick>
 8001bee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001bf0:	e008      	b.n	8001c04 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001bf2:	f7ff f85b 	bl	8000cac <HAL_GetTick>
 8001bf6:	4602      	mov	r2, r0
 8001bf8:	693b      	ldr	r3, [r7, #16]
 8001bfa:	1ad3      	subs	r3, r2, r3
 8001bfc:	2b02      	cmp	r3, #2
 8001bfe:	d901      	bls.n	8001c04 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001c00:	2303      	movs	r3, #3
 8001c02:	e1a1      	b.n	8001f48 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c04:	4b2d      	ldr	r3, [pc, #180]	; (8001cbc <HAL_RCC_OscConfig+0x26c>)
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	f003 0302 	and.w	r3, r3, #2
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d0f0      	beq.n	8001bf2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c10:	4b2a      	ldr	r3, [pc, #168]	; (8001cbc <HAL_RCC_OscConfig+0x26c>)
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	695b      	ldr	r3, [r3, #20]
 8001c1c:	00db      	lsls	r3, r3, #3
 8001c1e:	4927      	ldr	r1, [pc, #156]	; (8001cbc <HAL_RCC_OscConfig+0x26c>)
 8001c20:	4313      	orrs	r3, r2
 8001c22:	600b      	str	r3, [r1, #0]
 8001c24:	e015      	b.n	8001c52 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001c26:	4b26      	ldr	r3, [pc, #152]	; (8001cc0 <HAL_RCC_OscConfig+0x270>)
 8001c28:	2200      	movs	r2, #0
 8001c2a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c2c:	f7ff f83e 	bl	8000cac <HAL_GetTick>
 8001c30:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c32:	e008      	b.n	8001c46 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c34:	f7ff f83a 	bl	8000cac <HAL_GetTick>
 8001c38:	4602      	mov	r2, r0
 8001c3a:	693b      	ldr	r3, [r7, #16]
 8001c3c:	1ad3      	subs	r3, r2, r3
 8001c3e:	2b02      	cmp	r3, #2
 8001c40:	d901      	bls.n	8001c46 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001c42:	2303      	movs	r3, #3
 8001c44:	e180      	b.n	8001f48 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c46:	4b1d      	ldr	r3, [pc, #116]	; (8001cbc <HAL_RCC_OscConfig+0x26c>)
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	f003 0302 	and.w	r3, r3, #2
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d1f0      	bne.n	8001c34 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	f003 0308 	and.w	r3, r3, #8
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d03a      	beq.n	8001cd4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	699b      	ldr	r3, [r3, #24]
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d019      	beq.n	8001c9a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001c66:	4b17      	ldr	r3, [pc, #92]	; (8001cc4 <HAL_RCC_OscConfig+0x274>)
 8001c68:	2201      	movs	r2, #1
 8001c6a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c6c:	f7ff f81e 	bl	8000cac <HAL_GetTick>
 8001c70:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c72:	e008      	b.n	8001c86 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001c74:	f7ff f81a 	bl	8000cac <HAL_GetTick>
 8001c78:	4602      	mov	r2, r0
 8001c7a:	693b      	ldr	r3, [r7, #16]
 8001c7c:	1ad3      	subs	r3, r2, r3
 8001c7e:	2b02      	cmp	r3, #2
 8001c80:	d901      	bls.n	8001c86 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001c82:	2303      	movs	r3, #3
 8001c84:	e160      	b.n	8001f48 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c86:	4b0d      	ldr	r3, [pc, #52]	; (8001cbc <HAL_RCC_OscConfig+0x26c>)
 8001c88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c8a:	f003 0302 	and.w	r3, r3, #2
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d0f0      	beq.n	8001c74 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001c92:	2001      	movs	r0, #1
 8001c94:	f000 faba 	bl	800220c <RCC_Delay>
 8001c98:	e01c      	b.n	8001cd4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001c9a:	4b0a      	ldr	r3, [pc, #40]	; (8001cc4 <HAL_RCC_OscConfig+0x274>)
 8001c9c:	2200      	movs	r2, #0
 8001c9e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ca0:	f7ff f804 	bl	8000cac <HAL_GetTick>
 8001ca4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ca6:	e00f      	b.n	8001cc8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001ca8:	f7ff f800 	bl	8000cac <HAL_GetTick>
 8001cac:	4602      	mov	r2, r0
 8001cae:	693b      	ldr	r3, [r7, #16]
 8001cb0:	1ad3      	subs	r3, r2, r3
 8001cb2:	2b02      	cmp	r3, #2
 8001cb4:	d908      	bls.n	8001cc8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001cb6:	2303      	movs	r3, #3
 8001cb8:	e146      	b.n	8001f48 <HAL_RCC_OscConfig+0x4f8>
 8001cba:	bf00      	nop
 8001cbc:	40021000 	.word	0x40021000
 8001cc0:	42420000 	.word	0x42420000
 8001cc4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001cc8:	4b92      	ldr	r3, [pc, #584]	; (8001f14 <HAL_RCC_OscConfig+0x4c4>)
 8001cca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ccc:	f003 0302 	and.w	r3, r3, #2
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d1e9      	bne.n	8001ca8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	f003 0304 	and.w	r3, r3, #4
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	f000 80a6 	beq.w	8001e2e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001ce2:	2300      	movs	r3, #0
 8001ce4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001ce6:	4b8b      	ldr	r3, [pc, #556]	; (8001f14 <HAL_RCC_OscConfig+0x4c4>)
 8001ce8:	69db      	ldr	r3, [r3, #28]
 8001cea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d10d      	bne.n	8001d0e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001cf2:	4b88      	ldr	r3, [pc, #544]	; (8001f14 <HAL_RCC_OscConfig+0x4c4>)
 8001cf4:	69db      	ldr	r3, [r3, #28]
 8001cf6:	4a87      	ldr	r2, [pc, #540]	; (8001f14 <HAL_RCC_OscConfig+0x4c4>)
 8001cf8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001cfc:	61d3      	str	r3, [r2, #28]
 8001cfe:	4b85      	ldr	r3, [pc, #532]	; (8001f14 <HAL_RCC_OscConfig+0x4c4>)
 8001d00:	69db      	ldr	r3, [r3, #28]
 8001d02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d06:	60bb      	str	r3, [r7, #8]
 8001d08:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001d0a:	2301      	movs	r3, #1
 8001d0c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d0e:	4b82      	ldr	r3, [pc, #520]	; (8001f18 <HAL_RCC_OscConfig+0x4c8>)
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d118      	bne.n	8001d4c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001d1a:	4b7f      	ldr	r3, [pc, #508]	; (8001f18 <HAL_RCC_OscConfig+0x4c8>)
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	4a7e      	ldr	r2, [pc, #504]	; (8001f18 <HAL_RCC_OscConfig+0x4c8>)
 8001d20:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d24:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001d26:	f7fe ffc1 	bl	8000cac <HAL_GetTick>
 8001d2a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d2c:	e008      	b.n	8001d40 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d2e:	f7fe ffbd 	bl	8000cac <HAL_GetTick>
 8001d32:	4602      	mov	r2, r0
 8001d34:	693b      	ldr	r3, [r7, #16]
 8001d36:	1ad3      	subs	r3, r2, r3
 8001d38:	2b64      	cmp	r3, #100	; 0x64
 8001d3a:	d901      	bls.n	8001d40 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001d3c:	2303      	movs	r3, #3
 8001d3e:	e103      	b.n	8001f48 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d40:	4b75      	ldr	r3, [pc, #468]	; (8001f18 <HAL_RCC_OscConfig+0x4c8>)
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d0f0      	beq.n	8001d2e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	68db      	ldr	r3, [r3, #12]
 8001d50:	2b01      	cmp	r3, #1
 8001d52:	d106      	bne.n	8001d62 <HAL_RCC_OscConfig+0x312>
 8001d54:	4b6f      	ldr	r3, [pc, #444]	; (8001f14 <HAL_RCC_OscConfig+0x4c4>)
 8001d56:	6a1b      	ldr	r3, [r3, #32]
 8001d58:	4a6e      	ldr	r2, [pc, #440]	; (8001f14 <HAL_RCC_OscConfig+0x4c4>)
 8001d5a:	f043 0301 	orr.w	r3, r3, #1
 8001d5e:	6213      	str	r3, [r2, #32]
 8001d60:	e02d      	b.n	8001dbe <HAL_RCC_OscConfig+0x36e>
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	68db      	ldr	r3, [r3, #12]
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d10c      	bne.n	8001d84 <HAL_RCC_OscConfig+0x334>
 8001d6a:	4b6a      	ldr	r3, [pc, #424]	; (8001f14 <HAL_RCC_OscConfig+0x4c4>)
 8001d6c:	6a1b      	ldr	r3, [r3, #32]
 8001d6e:	4a69      	ldr	r2, [pc, #420]	; (8001f14 <HAL_RCC_OscConfig+0x4c4>)
 8001d70:	f023 0301 	bic.w	r3, r3, #1
 8001d74:	6213      	str	r3, [r2, #32]
 8001d76:	4b67      	ldr	r3, [pc, #412]	; (8001f14 <HAL_RCC_OscConfig+0x4c4>)
 8001d78:	6a1b      	ldr	r3, [r3, #32]
 8001d7a:	4a66      	ldr	r2, [pc, #408]	; (8001f14 <HAL_RCC_OscConfig+0x4c4>)
 8001d7c:	f023 0304 	bic.w	r3, r3, #4
 8001d80:	6213      	str	r3, [r2, #32]
 8001d82:	e01c      	b.n	8001dbe <HAL_RCC_OscConfig+0x36e>
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	68db      	ldr	r3, [r3, #12]
 8001d88:	2b05      	cmp	r3, #5
 8001d8a:	d10c      	bne.n	8001da6 <HAL_RCC_OscConfig+0x356>
 8001d8c:	4b61      	ldr	r3, [pc, #388]	; (8001f14 <HAL_RCC_OscConfig+0x4c4>)
 8001d8e:	6a1b      	ldr	r3, [r3, #32]
 8001d90:	4a60      	ldr	r2, [pc, #384]	; (8001f14 <HAL_RCC_OscConfig+0x4c4>)
 8001d92:	f043 0304 	orr.w	r3, r3, #4
 8001d96:	6213      	str	r3, [r2, #32]
 8001d98:	4b5e      	ldr	r3, [pc, #376]	; (8001f14 <HAL_RCC_OscConfig+0x4c4>)
 8001d9a:	6a1b      	ldr	r3, [r3, #32]
 8001d9c:	4a5d      	ldr	r2, [pc, #372]	; (8001f14 <HAL_RCC_OscConfig+0x4c4>)
 8001d9e:	f043 0301 	orr.w	r3, r3, #1
 8001da2:	6213      	str	r3, [r2, #32]
 8001da4:	e00b      	b.n	8001dbe <HAL_RCC_OscConfig+0x36e>
 8001da6:	4b5b      	ldr	r3, [pc, #364]	; (8001f14 <HAL_RCC_OscConfig+0x4c4>)
 8001da8:	6a1b      	ldr	r3, [r3, #32]
 8001daa:	4a5a      	ldr	r2, [pc, #360]	; (8001f14 <HAL_RCC_OscConfig+0x4c4>)
 8001dac:	f023 0301 	bic.w	r3, r3, #1
 8001db0:	6213      	str	r3, [r2, #32]
 8001db2:	4b58      	ldr	r3, [pc, #352]	; (8001f14 <HAL_RCC_OscConfig+0x4c4>)
 8001db4:	6a1b      	ldr	r3, [r3, #32]
 8001db6:	4a57      	ldr	r2, [pc, #348]	; (8001f14 <HAL_RCC_OscConfig+0x4c4>)
 8001db8:	f023 0304 	bic.w	r3, r3, #4
 8001dbc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	68db      	ldr	r3, [r3, #12]
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d015      	beq.n	8001df2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001dc6:	f7fe ff71 	bl	8000cac <HAL_GetTick>
 8001dca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001dcc:	e00a      	b.n	8001de4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001dce:	f7fe ff6d 	bl	8000cac <HAL_GetTick>
 8001dd2:	4602      	mov	r2, r0
 8001dd4:	693b      	ldr	r3, [r7, #16]
 8001dd6:	1ad3      	subs	r3, r2, r3
 8001dd8:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ddc:	4293      	cmp	r3, r2
 8001dde:	d901      	bls.n	8001de4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001de0:	2303      	movs	r3, #3
 8001de2:	e0b1      	b.n	8001f48 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001de4:	4b4b      	ldr	r3, [pc, #300]	; (8001f14 <HAL_RCC_OscConfig+0x4c4>)
 8001de6:	6a1b      	ldr	r3, [r3, #32]
 8001de8:	f003 0302 	and.w	r3, r3, #2
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d0ee      	beq.n	8001dce <HAL_RCC_OscConfig+0x37e>
 8001df0:	e014      	b.n	8001e1c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001df2:	f7fe ff5b 	bl	8000cac <HAL_GetTick>
 8001df6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001df8:	e00a      	b.n	8001e10 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001dfa:	f7fe ff57 	bl	8000cac <HAL_GetTick>
 8001dfe:	4602      	mov	r2, r0
 8001e00:	693b      	ldr	r3, [r7, #16]
 8001e02:	1ad3      	subs	r3, r2, r3
 8001e04:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e08:	4293      	cmp	r3, r2
 8001e0a:	d901      	bls.n	8001e10 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001e0c:	2303      	movs	r3, #3
 8001e0e:	e09b      	b.n	8001f48 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e10:	4b40      	ldr	r3, [pc, #256]	; (8001f14 <HAL_RCC_OscConfig+0x4c4>)
 8001e12:	6a1b      	ldr	r3, [r3, #32]
 8001e14:	f003 0302 	and.w	r3, r3, #2
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d1ee      	bne.n	8001dfa <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001e1c:	7dfb      	ldrb	r3, [r7, #23]
 8001e1e:	2b01      	cmp	r3, #1
 8001e20:	d105      	bne.n	8001e2e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001e22:	4b3c      	ldr	r3, [pc, #240]	; (8001f14 <HAL_RCC_OscConfig+0x4c4>)
 8001e24:	69db      	ldr	r3, [r3, #28]
 8001e26:	4a3b      	ldr	r2, [pc, #236]	; (8001f14 <HAL_RCC_OscConfig+0x4c4>)
 8001e28:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001e2c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	69db      	ldr	r3, [r3, #28]
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	f000 8087 	beq.w	8001f46 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001e38:	4b36      	ldr	r3, [pc, #216]	; (8001f14 <HAL_RCC_OscConfig+0x4c4>)
 8001e3a:	685b      	ldr	r3, [r3, #4]
 8001e3c:	f003 030c 	and.w	r3, r3, #12
 8001e40:	2b08      	cmp	r3, #8
 8001e42:	d061      	beq.n	8001f08 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	69db      	ldr	r3, [r3, #28]
 8001e48:	2b02      	cmp	r3, #2
 8001e4a:	d146      	bne.n	8001eda <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e4c:	4b33      	ldr	r3, [pc, #204]	; (8001f1c <HAL_RCC_OscConfig+0x4cc>)
 8001e4e:	2200      	movs	r2, #0
 8001e50:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e52:	f7fe ff2b 	bl	8000cac <HAL_GetTick>
 8001e56:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e58:	e008      	b.n	8001e6c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e5a:	f7fe ff27 	bl	8000cac <HAL_GetTick>
 8001e5e:	4602      	mov	r2, r0
 8001e60:	693b      	ldr	r3, [r7, #16]
 8001e62:	1ad3      	subs	r3, r2, r3
 8001e64:	2b02      	cmp	r3, #2
 8001e66:	d901      	bls.n	8001e6c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001e68:	2303      	movs	r3, #3
 8001e6a:	e06d      	b.n	8001f48 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e6c:	4b29      	ldr	r3, [pc, #164]	; (8001f14 <HAL_RCC_OscConfig+0x4c4>)
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d1f0      	bne.n	8001e5a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	6a1b      	ldr	r3, [r3, #32]
 8001e7c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e80:	d108      	bne.n	8001e94 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001e82:	4b24      	ldr	r3, [pc, #144]	; (8001f14 <HAL_RCC_OscConfig+0x4c4>)
 8001e84:	685b      	ldr	r3, [r3, #4]
 8001e86:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	689b      	ldr	r3, [r3, #8]
 8001e8e:	4921      	ldr	r1, [pc, #132]	; (8001f14 <HAL_RCC_OscConfig+0x4c4>)
 8001e90:	4313      	orrs	r3, r2
 8001e92:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001e94:	4b1f      	ldr	r3, [pc, #124]	; (8001f14 <HAL_RCC_OscConfig+0x4c4>)
 8001e96:	685b      	ldr	r3, [r3, #4]
 8001e98:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	6a19      	ldr	r1, [r3, #32]
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ea4:	430b      	orrs	r3, r1
 8001ea6:	491b      	ldr	r1, [pc, #108]	; (8001f14 <HAL_RCC_OscConfig+0x4c4>)
 8001ea8:	4313      	orrs	r3, r2
 8001eaa:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001eac:	4b1b      	ldr	r3, [pc, #108]	; (8001f1c <HAL_RCC_OscConfig+0x4cc>)
 8001eae:	2201      	movs	r2, #1
 8001eb0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001eb2:	f7fe fefb 	bl	8000cac <HAL_GetTick>
 8001eb6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001eb8:	e008      	b.n	8001ecc <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001eba:	f7fe fef7 	bl	8000cac <HAL_GetTick>
 8001ebe:	4602      	mov	r2, r0
 8001ec0:	693b      	ldr	r3, [r7, #16]
 8001ec2:	1ad3      	subs	r3, r2, r3
 8001ec4:	2b02      	cmp	r3, #2
 8001ec6:	d901      	bls.n	8001ecc <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001ec8:	2303      	movs	r3, #3
 8001eca:	e03d      	b.n	8001f48 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001ecc:	4b11      	ldr	r3, [pc, #68]	; (8001f14 <HAL_RCC_OscConfig+0x4c4>)
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d0f0      	beq.n	8001eba <HAL_RCC_OscConfig+0x46a>
 8001ed8:	e035      	b.n	8001f46 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001eda:	4b10      	ldr	r3, [pc, #64]	; (8001f1c <HAL_RCC_OscConfig+0x4cc>)
 8001edc:	2200      	movs	r2, #0
 8001ede:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ee0:	f7fe fee4 	bl	8000cac <HAL_GetTick>
 8001ee4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ee6:	e008      	b.n	8001efa <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ee8:	f7fe fee0 	bl	8000cac <HAL_GetTick>
 8001eec:	4602      	mov	r2, r0
 8001eee:	693b      	ldr	r3, [r7, #16]
 8001ef0:	1ad3      	subs	r3, r2, r3
 8001ef2:	2b02      	cmp	r3, #2
 8001ef4:	d901      	bls.n	8001efa <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001ef6:	2303      	movs	r3, #3
 8001ef8:	e026      	b.n	8001f48 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001efa:	4b06      	ldr	r3, [pc, #24]	; (8001f14 <HAL_RCC_OscConfig+0x4c4>)
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d1f0      	bne.n	8001ee8 <HAL_RCC_OscConfig+0x498>
 8001f06:	e01e      	b.n	8001f46 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	69db      	ldr	r3, [r3, #28]
 8001f0c:	2b01      	cmp	r3, #1
 8001f0e:	d107      	bne.n	8001f20 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001f10:	2301      	movs	r3, #1
 8001f12:	e019      	b.n	8001f48 <HAL_RCC_OscConfig+0x4f8>
 8001f14:	40021000 	.word	0x40021000
 8001f18:	40007000 	.word	0x40007000
 8001f1c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001f20:	4b0b      	ldr	r3, [pc, #44]	; (8001f50 <HAL_RCC_OscConfig+0x500>)
 8001f22:	685b      	ldr	r3, [r3, #4]
 8001f24:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	6a1b      	ldr	r3, [r3, #32]
 8001f30:	429a      	cmp	r2, r3
 8001f32:	d106      	bne.n	8001f42 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f3e:	429a      	cmp	r2, r3
 8001f40:	d001      	beq.n	8001f46 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001f42:	2301      	movs	r3, #1
 8001f44:	e000      	b.n	8001f48 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001f46:	2300      	movs	r3, #0
}
 8001f48:	4618      	mov	r0, r3
 8001f4a:	3718      	adds	r7, #24
 8001f4c:	46bd      	mov	sp, r7
 8001f4e:	bd80      	pop	{r7, pc}
 8001f50:	40021000 	.word	0x40021000

08001f54 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001f54:	b580      	push	{r7, lr}
 8001f56:	b084      	sub	sp, #16
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	6078      	str	r0, [r7, #4]
 8001f5c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d101      	bne.n	8001f68 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001f64:	2301      	movs	r3, #1
 8001f66:	e0d0      	b.n	800210a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001f68:	4b6a      	ldr	r3, [pc, #424]	; (8002114 <HAL_RCC_ClockConfig+0x1c0>)
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	f003 0307 	and.w	r3, r3, #7
 8001f70:	683a      	ldr	r2, [r7, #0]
 8001f72:	429a      	cmp	r2, r3
 8001f74:	d910      	bls.n	8001f98 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f76:	4b67      	ldr	r3, [pc, #412]	; (8002114 <HAL_RCC_ClockConfig+0x1c0>)
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	f023 0207 	bic.w	r2, r3, #7
 8001f7e:	4965      	ldr	r1, [pc, #404]	; (8002114 <HAL_RCC_ClockConfig+0x1c0>)
 8001f80:	683b      	ldr	r3, [r7, #0]
 8001f82:	4313      	orrs	r3, r2
 8001f84:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f86:	4b63      	ldr	r3, [pc, #396]	; (8002114 <HAL_RCC_ClockConfig+0x1c0>)
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	f003 0307 	and.w	r3, r3, #7
 8001f8e:	683a      	ldr	r2, [r7, #0]
 8001f90:	429a      	cmp	r2, r3
 8001f92:	d001      	beq.n	8001f98 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001f94:	2301      	movs	r3, #1
 8001f96:	e0b8      	b.n	800210a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	f003 0302 	and.w	r3, r3, #2
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d020      	beq.n	8001fe6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	f003 0304 	and.w	r3, r3, #4
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d005      	beq.n	8001fbc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001fb0:	4b59      	ldr	r3, [pc, #356]	; (8002118 <HAL_RCC_ClockConfig+0x1c4>)
 8001fb2:	685b      	ldr	r3, [r3, #4]
 8001fb4:	4a58      	ldr	r2, [pc, #352]	; (8002118 <HAL_RCC_ClockConfig+0x1c4>)
 8001fb6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001fba:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	f003 0308 	and.w	r3, r3, #8
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d005      	beq.n	8001fd4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001fc8:	4b53      	ldr	r3, [pc, #332]	; (8002118 <HAL_RCC_ClockConfig+0x1c4>)
 8001fca:	685b      	ldr	r3, [r3, #4]
 8001fcc:	4a52      	ldr	r2, [pc, #328]	; (8002118 <HAL_RCC_ClockConfig+0x1c4>)
 8001fce:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001fd2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001fd4:	4b50      	ldr	r3, [pc, #320]	; (8002118 <HAL_RCC_ClockConfig+0x1c4>)
 8001fd6:	685b      	ldr	r3, [r3, #4]
 8001fd8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	689b      	ldr	r3, [r3, #8]
 8001fe0:	494d      	ldr	r1, [pc, #308]	; (8002118 <HAL_RCC_ClockConfig+0x1c4>)
 8001fe2:	4313      	orrs	r3, r2
 8001fe4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	f003 0301 	and.w	r3, r3, #1
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d040      	beq.n	8002074 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	685b      	ldr	r3, [r3, #4]
 8001ff6:	2b01      	cmp	r3, #1
 8001ff8:	d107      	bne.n	800200a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ffa:	4b47      	ldr	r3, [pc, #284]	; (8002118 <HAL_RCC_ClockConfig+0x1c4>)
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002002:	2b00      	cmp	r3, #0
 8002004:	d115      	bne.n	8002032 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002006:	2301      	movs	r3, #1
 8002008:	e07f      	b.n	800210a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	685b      	ldr	r3, [r3, #4]
 800200e:	2b02      	cmp	r3, #2
 8002010:	d107      	bne.n	8002022 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002012:	4b41      	ldr	r3, [pc, #260]	; (8002118 <HAL_RCC_ClockConfig+0x1c4>)
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800201a:	2b00      	cmp	r3, #0
 800201c:	d109      	bne.n	8002032 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800201e:	2301      	movs	r3, #1
 8002020:	e073      	b.n	800210a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002022:	4b3d      	ldr	r3, [pc, #244]	; (8002118 <HAL_RCC_ClockConfig+0x1c4>)
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	f003 0302 	and.w	r3, r3, #2
 800202a:	2b00      	cmp	r3, #0
 800202c:	d101      	bne.n	8002032 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800202e:	2301      	movs	r3, #1
 8002030:	e06b      	b.n	800210a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002032:	4b39      	ldr	r3, [pc, #228]	; (8002118 <HAL_RCC_ClockConfig+0x1c4>)
 8002034:	685b      	ldr	r3, [r3, #4]
 8002036:	f023 0203 	bic.w	r2, r3, #3
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	685b      	ldr	r3, [r3, #4]
 800203e:	4936      	ldr	r1, [pc, #216]	; (8002118 <HAL_RCC_ClockConfig+0x1c4>)
 8002040:	4313      	orrs	r3, r2
 8002042:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002044:	f7fe fe32 	bl	8000cac <HAL_GetTick>
 8002048:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800204a:	e00a      	b.n	8002062 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800204c:	f7fe fe2e 	bl	8000cac <HAL_GetTick>
 8002050:	4602      	mov	r2, r0
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	1ad3      	subs	r3, r2, r3
 8002056:	f241 3288 	movw	r2, #5000	; 0x1388
 800205a:	4293      	cmp	r3, r2
 800205c:	d901      	bls.n	8002062 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800205e:	2303      	movs	r3, #3
 8002060:	e053      	b.n	800210a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002062:	4b2d      	ldr	r3, [pc, #180]	; (8002118 <HAL_RCC_ClockConfig+0x1c4>)
 8002064:	685b      	ldr	r3, [r3, #4]
 8002066:	f003 020c 	and.w	r2, r3, #12
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	685b      	ldr	r3, [r3, #4]
 800206e:	009b      	lsls	r3, r3, #2
 8002070:	429a      	cmp	r2, r3
 8002072:	d1eb      	bne.n	800204c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002074:	4b27      	ldr	r3, [pc, #156]	; (8002114 <HAL_RCC_ClockConfig+0x1c0>)
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	f003 0307 	and.w	r3, r3, #7
 800207c:	683a      	ldr	r2, [r7, #0]
 800207e:	429a      	cmp	r2, r3
 8002080:	d210      	bcs.n	80020a4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002082:	4b24      	ldr	r3, [pc, #144]	; (8002114 <HAL_RCC_ClockConfig+0x1c0>)
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	f023 0207 	bic.w	r2, r3, #7
 800208a:	4922      	ldr	r1, [pc, #136]	; (8002114 <HAL_RCC_ClockConfig+0x1c0>)
 800208c:	683b      	ldr	r3, [r7, #0]
 800208e:	4313      	orrs	r3, r2
 8002090:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002092:	4b20      	ldr	r3, [pc, #128]	; (8002114 <HAL_RCC_ClockConfig+0x1c0>)
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	f003 0307 	and.w	r3, r3, #7
 800209a:	683a      	ldr	r2, [r7, #0]
 800209c:	429a      	cmp	r2, r3
 800209e:	d001      	beq.n	80020a4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80020a0:	2301      	movs	r3, #1
 80020a2:	e032      	b.n	800210a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	f003 0304 	and.w	r3, r3, #4
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d008      	beq.n	80020c2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80020b0:	4b19      	ldr	r3, [pc, #100]	; (8002118 <HAL_RCC_ClockConfig+0x1c4>)
 80020b2:	685b      	ldr	r3, [r3, #4]
 80020b4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	68db      	ldr	r3, [r3, #12]
 80020bc:	4916      	ldr	r1, [pc, #88]	; (8002118 <HAL_RCC_ClockConfig+0x1c4>)
 80020be:	4313      	orrs	r3, r2
 80020c0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	f003 0308 	and.w	r3, r3, #8
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d009      	beq.n	80020e2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80020ce:	4b12      	ldr	r3, [pc, #72]	; (8002118 <HAL_RCC_ClockConfig+0x1c4>)
 80020d0:	685b      	ldr	r3, [r3, #4]
 80020d2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	691b      	ldr	r3, [r3, #16]
 80020da:	00db      	lsls	r3, r3, #3
 80020dc:	490e      	ldr	r1, [pc, #56]	; (8002118 <HAL_RCC_ClockConfig+0x1c4>)
 80020de:	4313      	orrs	r3, r2
 80020e0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80020e2:	f000 f821 	bl	8002128 <HAL_RCC_GetSysClockFreq>
 80020e6:	4602      	mov	r2, r0
 80020e8:	4b0b      	ldr	r3, [pc, #44]	; (8002118 <HAL_RCC_ClockConfig+0x1c4>)
 80020ea:	685b      	ldr	r3, [r3, #4]
 80020ec:	091b      	lsrs	r3, r3, #4
 80020ee:	f003 030f 	and.w	r3, r3, #15
 80020f2:	490a      	ldr	r1, [pc, #40]	; (800211c <HAL_RCC_ClockConfig+0x1c8>)
 80020f4:	5ccb      	ldrb	r3, [r1, r3]
 80020f6:	fa22 f303 	lsr.w	r3, r2, r3
 80020fa:	4a09      	ldr	r2, [pc, #36]	; (8002120 <HAL_RCC_ClockConfig+0x1cc>)
 80020fc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80020fe:	4b09      	ldr	r3, [pc, #36]	; (8002124 <HAL_RCC_ClockConfig+0x1d0>)
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	4618      	mov	r0, r3
 8002104:	f7fe fd90 	bl	8000c28 <HAL_InitTick>

  return HAL_OK;
 8002108:	2300      	movs	r3, #0
}
 800210a:	4618      	mov	r0, r3
 800210c:	3710      	adds	r7, #16
 800210e:	46bd      	mov	sp, r7
 8002110:	bd80      	pop	{r7, pc}
 8002112:	bf00      	nop
 8002114:	40022000 	.word	0x40022000
 8002118:	40021000 	.word	0x40021000
 800211c:	08003c14 	.word	0x08003c14
 8002120:	20000008 	.word	0x20000008
 8002124:	2000000c 	.word	0x2000000c

08002128 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002128:	b480      	push	{r7}
 800212a:	b087      	sub	sp, #28
 800212c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800212e:	2300      	movs	r3, #0
 8002130:	60fb      	str	r3, [r7, #12]
 8002132:	2300      	movs	r3, #0
 8002134:	60bb      	str	r3, [r7, #8]
 8002136:	2300      	movs	r3, #0
 8002138:	617b      	str	r3, [r7, #20]
 800213a:	2300      	movs	r3, #0
 800213c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800213e:	2300      	movs	r3, #0
 8002140:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002142:	4b1e      	ldr	r3, [pc, #120]	; (80021bc <HAL_RCC_GetSysClockFreq+0x94>)
 8002144:	685b      	ldr	r3, [r3, #4]
 8002146:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	f003 030c 	and.w	r3, r3, #12
 800214e:	2b04      	cmp	r3, #4
 8002150:	d002      	beq.n	8002158 <HAL_RCC_GetSysClockFreq+0x30>
 8002152:	2b08      	cmp	r3, #8
 8002154:	d003      	beq.n	800215e <HAL_RCC_GetSysClockFreq+0x36>
 8002156:	e027      	b.n	80021a8 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002158:	4b19      	ldr	r3, [pc, #100]	; (80021c0 <HAL_RCC_GetSysClockFreq+0x98>)
 800215a:	613b      	str	r3, [r7, #16]
      break;
 800215c:	e027      	b.n	80021ae <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	0c9b      	lsrs	r3, r3, #18
 8002162:	f003 030f 	and.w	r3, r3, #15
 8002166:	4a17      	ldr	r2, [pc, #92]	; (80021c4 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002168:	5cd3      	ldrb	r3, [r2, r3]
 800216a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002172:	2b00      	cmp	r3, #0
 8002174:	d010      	beq.n	8002198 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002176:	4b11      	ldr	r3, [pc, #68]	; (80021bc <HAL_RCC_GetSysClockFreq+0x94>)
 8002178:	685b      	ldr	r3, [r3, #4]
 800217a:	0c5b      	lsrs	r3, r3, #17
 800217c:	f003 0301 	and.w	r3, r3, #1
 8002180:	4a11      	ldr	r2, [pc, #68]	; (80021c8 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002182:	5cd3      	ldrb	r3, [r2, r3]
 8002184:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	4a0d      	ldr	r2, [pc, #52]	; (80021c0 <HAL_RCC_GetSysClockFreq+0x98>)
 800218a:	fb03 f202 	mul.w	r2, r3, r2
 800218e:	68bb      	ldr	r3, [r7, #8]
 8002190:	fbb2 f3f3 	udiv	r3, r2, r3
 8002194:	617b      	str	r3, [r7, #20]
 8002196:	e004      	b.n	80021a2 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	4a0c      	ldr	r2, [pc, #48]	; (80021cc <HAL_RCC_GetSysClockFreq+0xa4>)
 800219c:	fb02 f303 	mul.w	r3, r2, r3
 80021a0:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80021a2:	697b      	ldr	r3, [r7, #20]
 80021a4:	613b      	str	r3, [r7, #16]
      break;
 80021a6:	e002      	b.n	80021ae <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80021a8:	4b05      	ldr	r3, [pc, #20]	; (80021c0 <HAL_RCC_GetSysClockFreq+0x98>)
 80021aa:	613b      	str	r3, [r7, #16]
      break;
 80021ac:	bf00      	nop
    }
  }
  return sysclockfreq;
 80021ae:	693b      	ldr	r3, [r7, #16]
}
 80021b0:	4618      	mov	r0, r3
 80021b2:	371c      	adds	r7, #28
 80021b4:	46bd      	mov	sp, r7
 80021b6:	bc80      	pop	{r7}
 80021b8:	4770      	bx	lr
 80021ba:	bf00      	nop
 80021bc:	40021000 	.word	0x40021000
 80021c0:	007a1200 	.word	0x007a1200
 80021c4:	08003c2c 	.word	0x08003c2c
 80021c8:	08003c3c 	.word	0x08003c3c
 80021cc:	003d0900 	.word	0x003d0900

080021d0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80021d0:	b480      	push	{r7}
 80021d2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80021d4:	4b02      	ldr	r3, [pc, #8]	; (80021e0 <HAL_RCC_GetHCLKFreq+0x10>)
 80021d6:	681b      	ldr	r3, [r3, #0]
}
 80021d8:	4618      	mov	r0, r3
 80021da:	46bd      	mov	sp, r7
 80021dc:	bc80      	pop	{r7}
 80021de:	4770      	bx	lr
 80021e0:	20000008 	.word	0x20000008

080021e4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80021e4:	b580      	push	{r7, lr}
 80021e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80021e8:	f7ff fff2 	bl	80021d0 <HAL_RCC_GetHCLKFreq>
 80021ec:	4602      	mov	r2, r0
 80021ee:	4b05      	ldr	r3, [pc, #20]	; (8002204 <HAL_RCC_GetPCLK2Freq+0x20>)
 80021f0:	685b      	ldr	r3, [r3, #4]
 80021f2:	0adb      	lsrs	r3, r3, #11
 80021f4:	f003 0307 	and.w	r3, r3, #7
 80021f8:	4903      	ldr	r1, [pc, #12]	; (8002208 <HAL_RCC_GetPCLK2Freq+0x24>)
 80021fa:	5ccb      	ldrb	r3, [r1, r3]
 80021fc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002200:	4618      	mov	r0, r3
 8002202:	bd80      	pop	{r7, pc}
 8002204:	40021000 	.word	0x40021000
 8002208:	08003c24 	.word	0x08003c24

0800220c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800220c:	b480      	push	{r7}
 800220e:	b085      	sub	sp, #20
 8002210:	af00      	add	r7, sp, #0
 8002212:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002214:	4b0a      	ldr	r3, [pc, #40]	; (8002240 <RCC_Delay+0x34>)
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	4a0a      	ldr	r2, [pc, #40]	; (8002244 <RCC_Delay+0x38>)
 800221a:	fba2 2303 	umull	r2, r3, r2, r3
 800221e:	0a5b      	lsrs	r3, r3, #9
 8002220:	687a      	ldr	r2, [r7, #4]
 8002222:	fb02 f303 	mul.w	r3, r2, r3
 8002226:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002228:	bf00      	nop
  }
  while (Delay --);
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	1e5a      	subs	r2, r3, #1
 800222e:	60fa      	str	r2, [r7, #12]
 8002230:	2b00      	cmp	r3, #0
 8002232:	d1f9      	bne.n	8002228 <RCC_Delay+0x1c>
}
 8002234:	bf00      	nop
 8002236:	bf00      	nop
 8002238:	3714      	adds	r7, #20
 800223a:	46bd      	mov	sp, r7
 800223c:	bc80      	pop	{r7}
 800223e:	4770      	bx	lr
 8002240:	20000008 	.word	0x20000008
 8002244:	10624dd3 	.word	0x10624dd3

08002248 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002248:	b580      	push	{r7, lr}
 800224a:	b086      	sub	sp, #24
 800224c:	af00      	add	r7, sp, #0
 800224e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8002250:	2300      	movs	r3, #0
 8002252:	613b      	str	r3, [r7, #16]
 8002254:	2300      	movs	r3, #0
 8002256:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	f003 0301 	and.w	r3, r3, #1
 8002260:	2b00      	cmp	r3, #0
 8002262:	d07d      	beq.n	8002360 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8002264:	2300      	movs	r3, #0
 8002266:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002268:	4b4f      	ldr	r3, [pc, #316]	; (80023a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800226a:	69db      	ldr	r3, [r3, #28]
 800226c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002270:	2b00      	cmp	r3, #0
 8002272:	d10d      	bne.n	8002290 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002274:	4b4c      	ldr	r3, [pc, #304]	; (80023a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002276:	69db      	ldr	r3, [r3, #28]
 8002278:	4a4b      	ldr	r2, [pc, #300]	; (80023a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800227a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800227e:	61d3      	str	r3, [r2, #28]
 8002280:	4b49      	ldr	r3, [pc, #292]	; (80023a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002282:	69db      	ldr	r3, [r3, #28]
 8002284:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002288:	60bb      	str	r3, [r7, #8]
 800228a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800228c:	2301      	movs	r3, #1
 800228e:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002290:	4b46      	ldr	r3, [pc, #280]	; (80023ac <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002298:	2b00      	cmp	r3, #0
 800229a:	d118      	bne.n	80022ce <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800229c:	4b43      	ldr	r3, [pc, #268]	; (80023ac <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	4a42      	ldr	r2, [pc, #264]	; (80023ac <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80022a2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80022a6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80022a8:	f7fe fd00 	bl	8000cac <HAL_GetTick>
 80022ac:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022ae:	e008      	b.n	80022c2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80022b0:	f7fe fcfc 	bl	8000cac <HAL_GetTick>
 80022b4:	4602      	mov	r2, r0
 80022b6:	693b      	ldr	r3, [r7, #16]
 80022b8:	1ad3      	subs	r3, r2, r3
 80022ba:	2b64      	cmp	r3, #100	; 0x64
 80022bc:	d901      	bls.n	80022c2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80022be:	2303      	movs	r3, #3
 80022c0:	e06d      	b.n	800239e <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022c2:	4b3a      	ldr	r3, [pc, #232]	; (80023ac <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d0f0      	beq.n	80022b0 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80022ce:	4b36      	ldr	r3, [pc, #216]	; (80023a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80022d0:	6a1b      	ldr	r3, [r3, #32]
 80022d2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80022d6:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d02e      	beq.n	800233c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	685b      	ldr	r3, [r3, #4]
 80022e2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80022e6:	68fa      	ldr	r2, [r7, #12]
 80022e8:	429a      	cmp	r2, r3
 80022ea:	d027      	beq.n	800233c <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80022ec:	4b2e      	ldr	r3, [pc, #184]	; (80023a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80022ee:	6a1b      	ldr	r3, [r3, #32]
 80022f0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80022f4:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80022f6:	4b2e      	ldr	r3, [pc, #184]	; (80023b0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80022f8:	2201      	movs	r2, #1
 80022fa:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80022fc:	4b2c      	ldr	r3, [pc, #176]	; (80023b0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80022fe:	2200      	movs	r2, #0
 8002300:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002302:	4a29      	ldr	r2, [pc, #164]	; (80023a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	f003 0301 	and.w	r3, r3, #1
 800230e:	2b00      	cmp	r3, #0
 8002310:	d014      	beq.n	800233c <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002312:	f7fe fccb 	bl	8000cac <HAL_GetTick>
 8002316:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002318:	e00a      	b.n	8002330 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800231a:	f7fe fcc7 	bl	8000cac <HAL_GetTick>
 800231e:	4602      	mov	r2, r0
 8002320:	693b      	ldr	r3, [r7, #16]
 8002322:	1ad3      	subs	r3, r2, r3
 8002324:	f241 3288 	movw	r2, #5000	; 0x1388
 8002328:	4293      	cmp	r3, r2
 800232a:	d901      	bls.n	8002330 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 800232c:	2303      	movs	r3, #3
 800232e:	e036      	b.n	800239e <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002330:	4b1d      	ldr	r3, [pc, #116]	; (80023a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002332:	6a1b      	ldr	r3, [r3, #32]
 8002334:	f003 0302 	and.w	r3, r3, #2
 8002338:	2b00      	cmp	r3, #0
 800233a:	d0ee      	beq.n	800231a <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800233c:	4b1a      	ldr	r3, [pc, #104]	; (80023a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800233e:	6a1b      	ldr	r3, [r3, #32]
 8002340:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	685b      	ldr	r3, [r3, #4]
 8002348:	4917      	ldr	r1, [pc, #92]	; (80023a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800234a:	4313      	orrs	r3, r2
 800234c:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800234e:	7dfb      	ldrb	r3, [r7, #23]
 8002350:	2b01      	cmp	r3, #1
 8002352:	d105      	bne.n	8002360 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002354:	4b14      	ldr	r3, [pc, #80]	; (80023a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002356:	69db      	ldr	r3, [r3, #28]
 8002358:	4a13      	ldr	r2, [pc, #76]	; (80023a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800235a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800235e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	f003 0302 	and.w	r3, r3, #2
 8002368:	2b00      	cmp	r3, #0
 800236a:	d008      	beq.n	800237e <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800236c:	4b0e      	ldr	r3, [pc, #56]	; (80023a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800236e:	685b      	ldr	r3, [r3, #4]
 8002370:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	689b      	ldr	r3, [r3, #8]
 8002378:	490b      	ldr	r1, [pc, #44]	; (80023a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800237a:	4313      	orrs	r3, r2
 800237c:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	f003 0310 	and.w	r3, r3, #16
 8002386:	2b00      	cmp	r3, #0
 8002388:	d008      	beq.n	800239c <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800238a:	4b07      	ldr	r3, [pc, #28]	; (80023a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800238c:	685b      	ldr	r3, [r3, #4]
 800238e:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	68db      	ldr	r3, [r3, #12]
 8002396:	4904      	ldr	r1, [pc, #16]	; (80023a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002398:	4313      	orrs	r3, r2
 800239a:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 800239c:	2300      	movs	r3, #0
}
 800239e:	4618      	mov	r0, r3
 80023a0:	3718      	adds	r7, #24
 80023a2:	46bd      	mov	sp, r7
 80023a4:	bd80      	pop	{r7, pc}
 80023a6:	bf00      	nop
 80023a8:	40021000 	.word	0x40021000
 80023ac:	40007000 	.word	0x40007000
 80023b0:	42420440 	.word	0x42420440

080023b4 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80023b4:	b580      	push	{r7, lr}
 80023b6:	b088      	sub	sp, #32
 80023b8:	af00      	add	r7, sp, #0
 80023ba:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 80023bc:	2300      	movs	r3, #0
 80023be:	617b      	str	r3, [r7, #20]
 80023c0:	2300      	movs	r3, #0
 80023c2:	61fb      	str	r3, [r7, #28]
 80023c4:	2300      	movs	r3, #0
 80023c6:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 80023c8:	2300      	movs	r3, #0
 80023ca:	60fb      	str	r3, [r7, #12]
 80023cc:	2300      	movs	r3, #0
 80023ce:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	2b10      	cmp	r3, #16
 80023d4:	d00a      	beq.n	80023ec <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	2b10      	cmp	r3, #16
 80023da:	f200 808a 	bhi.w	80024f2 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	2b01      	cmp	r3, #1
 80023e2:	d045      	beq.n	8002470 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	2b02      	cmp	r3, #2
 80023e8:	d075      	beq.n	80024d6 <HAL_RCCEx_GetPeriphCLKFreq+0x122>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 80023ea:	e082      	b.n	80024f2 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
      temp_reg = RCC->CFGR;
 80023ec:	4b46      	ldr	r3, [pc, #280]	; (8002508 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80023ee:	685b      	ldr	r3, [r3, #4]
 80023f0:	60fb      	str	r3, [r7, #12]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 80023f2:	4b45      	ldr	r3, [pc, #276]	; (8002508 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d07b      	beq.n	80024f6 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	0c9b      	lsrs	r3, r3, #18
 8002402:	f003 030f 	and.w	r3, r3, #15
 8002406:	4a41      	ldr	r2, [pc, #260]	; (800250c <HAL_RCCEx_GetPeriphCLKFreq+0x158>)
 8002408:	5cd3      	ldrb	r3, [r2, r3]
 800240a:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002412:	2b00      	cmp	r3, #0
 8002414:	d015      	beq.n	8002442 <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002416:	4b3c      	ldr	r3, [pc, #240]	; (8002508 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002418:	685b      	ldr	r3, [r3, #4]
 800241a:	0c5b      	lsrs	r3, r3, #17
 800241c:	f003 0301 	and.w	r3, r3, #1
 8002420:	4a3b      	ldr	r2, [pc, #236]	; (8002510 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>)
 8002422:	5cd3      	ldrb	r3, [r2, r3]
 8002424:	617b      	str	r3, [r7, #20]
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800242c:	2b00      	cmp	r3, #0
 800242e:	d00d      	beq.n	800244c <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8002430:	4a38      	ldr	r2, [pc, #224]	; (8002514 <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 8002432:	697b      	ldr	r3, [r7, #20]
 8002434:	fbb2 f2f3 	udiv	r2, r2, r3
 8002438:	693b      	ldr	r3, [r7, #16]
 800243a:	fb02 f303 	mul.w	r3, r2, r3
 800243e:	61fb      	str	r3, [r7, #28]
 8002440:	e004      	b.n	800244c <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002442:	693b      	ldr	r3, [r7, #16]
 8002444:	4a34      	ldr	r2, [pc, #208]	; (8002518 <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 8002446:	fb02 f303 	mul.w	r3, r2, r3
 800244a:	61fb      	str	r3, [r7, #28]
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 800244c:	4b2e      	ldr	r3, [pc, #184]	; (8002508 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800244e:	685b      	ldr	r3, [r3, #4]
 8002450:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002454:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002458:	d102      	bne.n	8002460 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
          frequency = pllclk;
 800245a:	69fb      	ldr	r3, [r7, #28]
 800245c:	61bb      	str	r3, [r7, #24]
      break;
 800245e:	e04a      	b.n	80024f6 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
          frequency = (pllclk * 2) / 3;
 8002460:	69fb      	ldr	r3, [r7, #28]
 8002462:	005b      	lsls	r3, r3, #1
 8002464:	4a2d      	ldr	r2, [pc, #180]	; (800251c <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8002466:	fba2 2303 	umull	r2, r3, r2, r3
 800246a:	085b      	lsrs	r3, r3, #1
 800246c:	61bb      	str	r3, [r7, #24]
      break;
 800246e:	e042      	b.n	80024f6 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      temp_reg = RCC->BDCR;
 8002470:	4b25      	ldr	r3, [pc, #148]	; (8002508 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002472:	6a1b      	ldr	r3, [r3, #32]
 8002474:	60fb      	str	r3, [r7, #12]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800247c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002480:	d108      	bne.n	8002494 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	f003 0302 	and.w	r3, r3, #2
 8002488:	2b00      	cmp	r3, #0
 800248a:	d003      	beq.n	8002494 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        frequency = LSE_VALUE;
 800248c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002490:	61bb      	str	r3, [r7, #24]
 8002492:	e01f      	b.n	80024d4 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800249a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800249e:	d109      	bne.n	80024b4 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 80024a0:	4b19      	ldr	r3, [pc, #100]	; (8002508 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80024a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024a4:	f003 0302 	and.w	r3, r3, #2
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d003      	beq.n	80024b4 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSI_VALUE;
 80024ac:	f649 4340 	movw	r3, #40000	; 0x9c40
 80024b0:	61bb      	str	r3, [r7, #24]
 80024b2:	e00f      	b.n	80024d4 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80024ba:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80024be:	d11c      	bne.n	80024fa <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 80024c0:	4b11      	ldr	r3, [pc, #68]	; (8002508 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d016      	beq.n	80024fa <HAL_RCCEx_GetPeriphCLKFreq+0x146>
        frequency = HSE_VALUE / 128U;
 80024cc:	f24f 4324 	movw	r3, #62500	; 0xf424
 80024d0:	61bb      	str	r3, [r7, #24]
      break;
 80024d2:	e012      	b.n	80024fa <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 80024d4:	e011      	b.n	80024fa <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 80024d6:	f7ff fe85 	bl	80021e4 <HAL_RCC_GetPCLK2Freq>
 80024da:	4602      	mov	r2, r0
 80024dc:	4b0a      	ldr	r3, [pc, #40]	; (8002508 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80024de:	685b      	ldr	r3, [r3, #4]
 80024e0:	0b9b      	lsrs	r3, r3, #14
 80024e2:	f003 0303 	and.w	r3, r3, #3
 80024e6:	3301      	adds	r3, #1
 80024e8:	005b      	lsls	r3, r3, #1
 80024ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80024ee:	61bb      	str	r3, [r7, #24]
      break;
 80024f0:	e004      	b.n	80024fc <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 80024f2:	bf00      	nop
 80024f4:	e002      	b.n	80024fc <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 80024f6:	bf00      	nop
 80024f8:	e000      	b.n	80024fc <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 80024fa:	bf00      	nop
    }
  }
  return (frequency);
 80024fc:	69bb      	ldr	r3, [r7, #24]
}
 80024fe:	4618      	mov	r0, r3
 8002500:	3720      	adds	r7, #32
 8002502:	46bd      	mov	sp, r7
 8002504:	bd80      	pop	{r7, pc}
 8002506:	bf00      	nop
 8002508:	40021000 	.word	0x40021000
 800250c:	08003c40 	.word	0x08003c40
 8002510:	08003c50 	.word	0x08003c50
 8002514:	007a1200 	.word	0x007a1200
 8002518:	003d0900 	.word	0x003d0900
 800251c:	aaaaaaab 	.word	0xaaaaaaab

08002520 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002520:	b580      	push	{r7, lr}
 8002522:	b082      	sub	sp, #8
 8002524:	af00      	add	r7, sp, #0
 8002526:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	2b00      	cmp	r3, #0
 800252c:	d101      	bne.n	8002532 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800252e:	2301      	movs	r3, #1
 8002530:	e041      	b.n	80025b6 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002538:	b2db      	uxtb	r3, r3
 800253a:	2b00      	cmp	r3, #0
 800253c:	d106      	bne.n	800254c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	2200      	movs	r2, #0
 8002542:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002546:	6878      	ldr	r0, [r7, #4]
 8002548:	f7fe fa4e 	bl	80009e8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	2202      	movs	r2, #2
 8002550:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681a      	ldr	r2, [r3, #0]
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	3304      	adds	r3, #4
 800255c:	4619      	mov	r1, r3
 800255e:	4610      	mov	r0, r2
 8002560:	f000 f98c 	bl	800287c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	2201      	movs	r2, #1
 8002568:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	2201      	movs	r2, #1
 8002570:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	2201      	movs	r2, #1
 8002578:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	2201      	movs	r2, #1
 8002580:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	2201      	movs	r2, #1
 8002588:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	2201      	movs	r2, #1
 8002590:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	2201      	movs	r2, #1
 8002598:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	2201      	movs	r2, #1
 80025a0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	2201      	movs	r2, #1
 80025a8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	2201      	movs	r2, #1
 80025b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80025b4:	2300      	movs	r3, #0
}
 80025b6:	4618      	mov	r0, r3
 80025b8:	3708      	adds	r7, #8
 80025ba:	46bd      	mov	sp, r7
 80025bc:	bd80      	pop	{r7, pc}
	...

080025c0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80025c0:	b580      	push	{r7, lr}
 80025c2:	b084      	sub	sp, #16
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	6078      	str	r0, [r7, #4]
 80025c8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80025ca:	683b      	ldr	r3, [r7, #0]
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d109      	bne.n	80025e4 <HAL_TIM_PWM_Start+0x24>
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80025d6:	b2db      	uxtb	r3, r3
 80025d8:	2b01      	cmp	r3, #1
 80025da:	bf14      	ite	ne
 80025dc:	2301      	movne	r3, #1
 80025de:	2300      	moveq	r3, #0
 80025e0:	b2db      	uxtb	r3, r3
 80025e2:	e022      	b.n	800262a <HAL_TIM_PWM_Start+0x6a>
 80025e4:	683b      	ldr	r3, [r7, #0]
 80025e6:	2b04      	cmp	r3, #4
 80025e8:	d109      	bne.n	80025fe <HAL_TIM_PWM_Start+0x3e>
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80025f0:	b2db      	uxtb	r3, r3
 80025f2:	2b01      	cmp	r3, #1
 80025f4:	bf14      	ite	ne
 80025f6:	2301      	movne	r3, #1
 80025f8:	2300      	moveq	r3, #0
 80025fa:	b2db      	uxtb	r3, r3
 80025fc:	e015      	b.n	800262a <HAL_TIM_PWM_Start+0x6a>
 80025fe:	683b      	ldr	r3, [r7, #0]
 8002600:	2b08      	cmp	r3, #8
 8002602:	d109      	bne.n	8002618 <HAL_TIM_PWM_Start+0x58>
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800260a:	b2db      	uxtb	r3, r3
 800260c:	2b01      	cmp	r3, #1
 800260e:	bf14      	ite	ne
 8002610:	2301      	movne	r3, #1
 8002612:	2300      	moveq	r3, #0
 8002614:	b2db      	uxtb	r3, r3
 8002616:	e008      	b.n	800262a <HAL_TIM_PWM_Start+0x6a>
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800261e:	b2db      	uxtb	r3, r3
 8002620:	2b01      	cmp	r3, #1
 8002622:	bf14      	ite	ne
 8002624:	2301      	movne	r3, #1
 8002626:	2300      	moveq	r3, #0
 8002628:	b2db      	uxtb	r3, r3
 800262a:	2b00      	cmp	r3, #0
 800262c:	d001      	beq.n	8002632 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800262e:	2301      	movs	r3, #1
 8002630:	e059      	b.n	80026e6 <HAL_TIM_PWM_Start+0x126>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002632:	683b      	ldr	r3, [r7, #0]
 8002634:	2b00      	cmp	r3, #0
 8002636:	d104      	bne.n	8002642 <HAL_TIM_PWM_Start+0x82>
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	2202      	movs	r2, #2
 800263c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002640:	e013      	b.n	800266a <HAL_TIM_PWM_Start+0xaa>
 8002642:	683b      	ldr	r3, [r7, #0]
 8002644:	2b04      	cmp	r3, #4
 8002646:	d104      	bne.n	8002652 <HAL_TIM_PWM_Start+0x92>
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	2202      	movs	r2, #2
 800264c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002650:	e00b      	b.n	800266a <HAL_TIM_PWM_Start+0xaa>
 8002652:	683b      	ldr	r3, [r7, #0]
 8002654:	2b08      	cmp	r3, #8
 8002656:	d104      	bne.n	8002662 <HAL_TIM_PWM_Start+0xa2>
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	2202      	movs	r2, #2
 800265c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002660:	e003      	b.n	800266a <HAL_TIM_PWM_Start+0xaa>
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	2202      	movs	r2, #2
 8002666:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	2201      	movs	r2, #1
 8002670:	6839      	ldr	r1, [r7, #0]
 8002672:	4618      	mov	r0, r3
 8002674:	f000 fae2 	bl	8002c3c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	4a1c      	ldr	r2, [pc, #112]	; (80026f0 <HAL_TIM_PWM_Start+0x130>)
 800267e:	4293      	cmp	r3, r2
 8002680:	d107      	bne.n	8002692 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002690:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	4a16      	ldr	r2, [pc, #88]	; (80026f0 <HAL_TIM_PWM_Start+0x130>)
 8002698:	4293      	cmp	r3, r2
 800269a:	d009      	beq.n	80026b0 <HAL_TIM_PWM_Start+0xf0>
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80026a4:	d004      	beq.n	80026b0 <HAL_TIM_PWM_Start+0xf0>
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	4a12      	ldr	r2, [pc, #72]	; (80026f4 <HAL_TIM_PWM_Start+0x134>)
 80026ac:	4293      	cmp	r3, r2
 80026ae:	d111      	bne.n	80026d4 <HAL_TIM_PWM_Start+0x114>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	689b      	ldr	r3, [r3, #8]
 80026b6:	f003 0307 	and.w	r3, r3, #7
 80026ba:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	2b06      	cmp	r3, #6
 80026c0:	d010      	beq.n	80026e4 <HAL_TIM_PWM_Start+0x124>
    {
      __HAL_TIM_ENABLE(htim);
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	681a      	ldr	r2, [r3, #0]
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	f042 0201 	orr.w	r2, r2, #1
 80026d0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80026d2:	e007      	b.n	80026e4 <HAL_TIM_PWM_Start+0x124>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	681a      	ldr	r2, [r3, #0]
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	f042 0201 	orr.w	r2, r2, #1
 80026e2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80026e4:	2300      	movs	r3, #0
}
 80026e6:	4618      	mov	r0, r3
 80026e8:	3710      	adds	r7, #16
 80026ea:	46bd      	mov	sp, r7
 80026ec:	bd80      	pop	{r7, pc}
 80026ee:	bf00      	nop
 80026f0:	40012c00 	.word	0x40012c00
 80026f4:	40000400 	.word	0x40000400

080026f8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80026f8:	b580      	push	{r7, lr}
 80026fa:	b086      	sub	sp, #24
 80026fc:	af00      	add	r7, sp, #0
 80026fe:	60f8      	str	r0, [r7, #12]
 8002700:	60b9      	str	r1, [r7, #8]
 8002702:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002704:	2300      	movs	r3, #0
 8002706:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800270e:	2b01      	cmp	r3, #1
 8002710:	d101      	bne.n	8002716 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8002712:	2302      	movs	r3, #2
 8002714:	e0ae      	b.n	8002874 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	2201      	movs	r2, #1
 800271a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	2b0c      	cmp	r3, #12
 8002722:	f200 809f 	bhi.w	8002864 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8002726:	a201      	add	r2, pc, #4	; (adr r2, 800272c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002728:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800272c:	08002761 	.word	0x08002761
 8002730:	08002865 	.word	0x08002865
 8002734:	08002865 	.word	0x08002865
 8002738:	08002865 	.word	0x08002865
 800273c:	080027a1 	.word	0x080027a1
 8002740:	08002865 	.word	0x08002865
 8002744:	08002865 	.word	0x08002865
 8002748:	08002865 	.word	0x08002865
 800274c:	080027e3 	.word	0x080027e3
 8002750:	08002865 	.word	0x08002865
 8002754:	08002865 	.word	0x08002865
 8002758:	08002865 	.word	0x08002865
 800275c:	08002823 	.word	0x08002823
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	68b9      	ldr	r1, [r7, #8]
 8002766:	4618      	mov	r0, r3
 8002768:	f000 f8e0 	bl	800292c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	699a      	ldr	r2, [r3, #24]
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	f042 0208 	orr.w	r2, r2, #8
 800277a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	699a      	ldr	r2, [r3, #24]
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	f022 0204 	bic.w	r2, r2, #4
 800278a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	6999      	ldr	r1, [r3, #24]
 8002792:	68bb      	ldr	r3, [r7, #8]
 8002794:	691a      	ldr	r2, [r3, #16]
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	430a      	orrs	r2, r1
 800279c:	619a      	str	r2, [r3, #24]
      break;
 800279e:	e064      	b.n	800286a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	68b9      	ldr	r1, [r7, #8]
 80027a6:	4618      	mov	r0, r3
 80027a8:	f000 f926 	bl	80029f8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	699a      	ldr	r2, [r3, #24]
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80027ba:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	699a      	ldr	r2, [r3, #24]
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80027ca:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	6999      	ldr	r1, [r3, #24]
 80027d2:	68bb      	ldr	r3, [r7, #8]
 80027d4:	691b      	ldr	r3, [r3, #16]
 80027d6:	021a      	lsls	r2, r3, #8
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	430a      	orrs	r2, r1
 80027de:	619a      	str	r2, [r3, #24]
      break;
 80027e0:	e043      	b.n	800286a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	68b9      	ldr	r1, [r7, #8]
 80027e8:	4618      	mov	r0, r3
 80027ea:	f000 f96f 	bl	8002acc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	69da      	ldr	r2, [r3, #28]
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	f042 0208 	orr.w	r2, r2, #8
 80027fc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	69da      	ldr	r2, [r3, #28]
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	f022 0204 	bic.w	r2, r2, #4
 800280c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	69d9      	ldr	r1, [r3, #28]
 8002814:	68bb      	ldr	r3, [r7, #8]
 8002816:	691a      	ldr	r2, [r3, #16]
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	430a      	orrs	r2, r1
 800281e:	61da      	str	r2, [r3, #28]
      break;
 8002820:	e023      	b.n	800286a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	68b9      	ldr	r1, [r7, #8]
 8002828:	4618      	mov	r0, r3
 800282a:	f000 f9b9 	bl	8002ba0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	69da      	ldr	r2, [r3, #28]
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800283c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	69da      	ldr	r2, [r3, #28]
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800284c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	69d9      	ldr	r1, [r3, #28]
 8002854:	68bb      	ldr	r3, [r7, #8]
 8002856:	691b      	ldr	r3, [r3, #16]
 8002858:	021a      	lsls	r2, r3, #8
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	430a      	orrs	r2, r1
 8002860:	61da      	str	r2, [r3, #28]
      break;
 8002862:	e002      	b.n	800286a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8002864:	2301      	movs	r3, #1
 8002866:	75fb      	strb	r3, [r7, #23]
      break;
 8002868:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	2200      	movs	r2, #0
 800286e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002872:	7dfb      	ldrb	r3, [r7, #23]
}
 8002874:	4618      	mov	r0, r3
 8002876:	3718      	adds	r7, #24
 8002878:	46bd      	mov	sp, r7
 800287a:	bd80      	pop	{r7, pc}

0800287c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800287c:	b480      	push	{r7}
 800287e:	b085      	sub	sp, #20
 8002880:	af00      	add	r7, sp, #0
 8002882:	6078      	str	r0, [r7, #4]
 8002884:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	4a25      	ldr	r2, [pc, #148]	; (8002924 <TIM_Base_SetConfig+0xa8>)
 8002890:	4293      	cmp	r3, r2
 8002892:	d007      	beq.n	80028a4 <TIM_Base_SetConfig+0x28>
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800289a:	d003      	beq.n	80028a4 <TIM_Base_SetConfig+0x28>
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	4a22      	ldr	r2, [pc, #136]	; (8002928 <TIM_Base_SetConfig+0xac>)
 80028a0:	4293      	cmp	r3, r2
 80028a2:	d108      	bne.n	80028b6 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80028aa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80028ac:	683b      	ldr	r3, [r7, #0]
 80028ae:	685b      	ldr	r3, [r3, #4]
 80028b0:	68fa      	ldr	r2, [r7, #12]
 80028b2:	4313      	orrs	r3, r2
 80028b4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	4a1a      	ldr	r2, [pc, #104]	; (8002924 <TIM_Base_SetConfig+0xa8>)
 80028ba:	4293      	cmp	r3, r2
 80028bc:	d007      	beq.n	80028ce <TIM_Base_SetConfig+0x52>
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80028c4:	d003      	beq.n	80028ce <TIM_Base_SetConfig+0x52>
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	4a17      	ldr	r2, [pc, #92]	; (8002928 <TIM_Base_SetConfig+0xac>)
 80028ca:	4293      	cmp	r3, r2
 80028cc:	d108      	bne.n	80028e0 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80028d4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80028d6:	683b      	ldr	r3, [r7, #0]
 80028d8:	68db      	ldr	r3, [r3, #12]
 80028da:	68fa      	ldr	r2, [r7, #12]
 80028dc:	4313      	orrs	r3, r2
 80028de:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80028e6:	683b      	ldr	r3, [r7, #0]
 80028e8:	695b      	ldr	r3, [r3, #20]
 80028ea:	4313      	orrs	r3, r2
 80028ec:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	68fa      	ldr	r2, [r7, #12]
 80028f2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80028f4:	683b      	ldr	r3, [r7, #0]
 80028f6:	689a      	ldr	r2, [r3, #8]
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80028fc:	683b      	ldr	r3, [r7, #0]
 80028fe:	681a      	ldr	r2, [r3, #0]
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	4a07      	ldr	r2, [pc, #28]	; (8002924 <TIM_Base_SetConfig+0xa8>)
 8002908:	4293      	cmp	r3, r2
 800290a:	d103      	bne.n	8002914 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800290c:	683b      	ldr	r3, [r7, #0]
 800290e:	691a      	ldr	r2, [r3, #16]
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	2201      	movs	r2, #1
 8002918:	615a      	str	r2, [r3, #20]
}
 800291a:	bf00      	nop
 800291c:	3714      	adds	r7, #20
 800291e:	46bd      	mov	sp, r7
 8002920:	bc80      	pop	{r7}
 8002922:	4770      	bx	lr
 8002924:	40012c00 	.word	0x40012c00
 8002928:	40000400 	.word	0x40000400

0800292c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800292c:	b480      	push	{r7}
 800292e:	b087      	sub	sp, #28
 8002930:	af00      	add	r7, sp, #0
 8002932:	6078      	str	r0, [r7, #4]
 8002934:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	6a1b      	ldr	r3, [r3, #32]
 800293a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	6a1b      	ldr	r3, [r3, #32]
 8002940:	f023 0201 	bic.w	r2, r3, #1
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	685b      	ldr	r3, [r3, #4]
 800294c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	699b      	ldr	r3, [r3, #24]
 8002952:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800295a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	f023 0303 	bic.w	r3, r3, #3
 8002962:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002964:	683b      	ldr	r3, [r7, #0]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	68fa      	ldr	r2, [r7, #12]
 800296a:	4313      	orrs	r3, r2
 800296c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800296e:	697b      	ldr	r3, [r7, #20]
 8002970:	f023 0302 	bic.w	r3, r3, #2
 8002974:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002976:	683b      	ldr	r3, [r7, #0]
 8002978:	689b      	ldr	r3, [r3, #8]
 800297a:	697a      	ldr	r2, [r7, #20]
 800297c:	4313      	orrs	r3, r2
 800297e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	4a1c      	ldr	r2, [pc, #112]	; (80029f4 <TIM_OC1_SetConfig+0xc8>)
 8002984:	4293      	cmp	r3, r2
 8002986:	d10c      	bne.n	80029a2 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002988:	697b      	ldr	r3, [r7, #20]
 800298a:	f023 0308 	bic.w	r3, r3, #8
 800298e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002990:	683b      	ldr	r3, [r7, #0]
 8002992:	68db      	ldr	r3, [r3, #12]
 8002994:	697a      	ldr	r2, [r7, #20]
 8002996:	4313      	orrs	r3, r2
 8002998:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800299a:	697b      	ldr	r3, [r7, #20]
 800299c:	f023 0304 	bic.w	r3, r3, #4
 80029a0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	4a13      	ldr	r2, [pc, #76]	; (80029f4 <TIM_OC1_SetConfig+0xc8>)
 80029a6:	4293      	cmp	r3, r2
 80029a8:	d111      	bne.n	80029ce <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80029aa:	693b      	ldr	r3, [r7, #16]
 80029ac:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80029b0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80029b2:	693b      	ldr	r3, [r7, #16]
 80029b4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80029b8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80029ba:	683b      	ldr	r3, [r7, #0]
 80029bc:	695b      	ldr	r3, [r3, #20]
 80029be:	693a      	ldr	r2, [r7, #16]
 80029c0:	4313      	orrs	r3, r2
 80029c2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80029c4:	683b      	ldr	r3, [r7, #0]
 80029c6:	699b      	ldr	r3, [r3, #24]
 80029c8:	693a      	ldr	r2, [r7, #16]
 80029ca:	4313      	orrs	r3, r2
 80029cc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	693a      	ldr	r2, [r7, #16]
 80029d2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	68fa      	ldr	r2, [r7, #12]
 80029d8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80029da:	683b      	ldr	r3, [r7, #0]
 80029dc:	685a      	ldr	r2, [r3, #4]
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	697a      	ldr	r2, [r7, #20]
 80029e6:	621a      	str	r2, [r3, #32]
}
 80029e8:	bf00      	nop
 80029ea:	371c      	adds	r7, #28
 80029ec:	46bd      	mov	sp, r7
 80029ee:	bc80      	pop	{r7}
 80029f0:	4770      	bx	lr
 80029f2:	bf00      	nop
 80029f4:	40012c00 	.word	0x40012c00

080029f8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80029f8:	b480      	push	{r7}
 80029fa:	b087      	sub	sp, #28
 80029fc:	af00      	add	r7, sp, #0
 80029fe:	6078      	str	r0, [r7, #4]
 8002a00:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	6a1b      	ldr	r3, [r3, #32]
 8002a06:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	6a1b      	ldr	r3, [r3, #32]
 8002a0c:	f023 0210 	bic.w	r2, r3, #16
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	685b      	ldr	r3, [r3, #4]
 8002a18:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	699b      	ldr	r3, [r3, #24]
 8002a1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002a26:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002a2e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002a30:	683b      	ldr	r3, [r7, #0]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	021b      	lsls	r3, r3, #8
 8002a36:	68fa      	ldr	r2, [r7, #12]
 8002a38:	4313      	orrs	r3, r2
 8002a3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002a3c:	697b      	ldr	r3, [r7, #20]
 8002a3e:	f023 0320 	bic.w	r3, r3, #32
 8002a42:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002a44:	683b      	ldr	r3, [r7, #0]
 8002a46:	689b      	ldr	r3, [r3, #8]
 8002a48:	011b      	lsls	r3, r3, #4
 8002a4a:	697a      	ldr	r2, [r7, #20]
 8002a4c:	4313      	orrs	r3, r2
 8002a4e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	4a1d      	ldr	r2, [pc, #116]	; (8002ac8 <TIM_OC2_SetConfig+0xd0>)
 8002a54:	4293      	cmp	r3, r2
 8002a56:	d10d      	bne.n	8002a74 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002a58:	697b      	ldr	r3, [r7, #20]
 8002a5a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002a5e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002a60:	683b      	ldr	r3, [r7, #0]
 8002a62:	68db      	ldr	r3, [r3, #12]
 8002a64:	011b      	lsls	r3, r3, #4
 8002a66:	697a      	ldr	r2, [r7, #20]
 8002a68:	4313      	orrs	r3, r2
 8002a6a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002a6c:	697b      	ldr	r3, [r7, #20]
 8002a6e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002a72:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	4a14      	ldr	r2, [pc, #80]	; (8002ac8 <TIM_OC2_SetConfig+0xd0>)
 8002a78:	4293      	cmp	r3, r2
 8002a7a:	d113      	bne.n	8002aa4 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002a7c:	693b      	ldr	r3, [r7, #16]
 8002a7e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002a82:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002a84:	693b      	ldr	r3, [r7, #16]
 8002a86:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002a8a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002a8c:	683b      	ldr	r3, [r7, #0]
 8002a8e:	695b      	ldr	r3, [r3, #20]
 8002a90:	009b      	lsls	r3, r3, #2
 8002a92:	693a      	ldr	r2, [r7, #16]
 8002a94:	4313      	orrs	r3, r2
 8002a96:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002a98:	683b      	ldr	r3, [r7, #0]
 8002a9a:	699b      	ldr	r3, [r3, #24]
 8002a9c:	009b      	lsls	r3, r3, #2
 8002a9e:	693a      	ldr	r2, [r7, #16]
 8002aa0:	4313      	orrs	r3, r2
 8002aa2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	693a      	ldr	r2, [r7, #16]
 8002aa8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	68fa      	ldr	r2, [r7, #12]
 8002aae:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002ab0:	683b      	ldr	r3, [r7, #0]
 8002ab2:	685a      	ldr	r2, [r3, #4]
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	697a      	ldr	r2, [r7, #20]
 8002abc:	621a      	str	r2, [r3, #32]
}
 8002abe:	bf00      	nop
 8002ac0:	371c      	adds	r7, #28
 8002ac2:	46bd      	mov	sp, r7
 8002ac4:	bc80      	pop	{r7}
 8002ac6:	4770      	bx	lr
 8002ac8:	40012c00 	.word	0x40012c00

08002acc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002acc:	b480      	push	{r7}
 8002ace:	b087      	sub	sp, #28
 8002ad0:	af00      	add	r7, sp, #0
 8002ad2:	6078      	str	r0, [r7, #4]
 8002ad4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	6a1b      	ldr	r3, [r3, #32]
 8002ada:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	6a1b      	ldr	r3, [r3, #32]
 8002ae0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	685b      	ldr	r3, [r3, #4]
 8002aec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	69db      	ldr	r3, [r3, #28]
 8002af2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002afa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	f023 0303 	bic.w	r3, r3, #3
 8002b02:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002b04:	683b      	ldr	r3, [r7, #0]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	68fa      	ldr	r2, [r7, #12]
 8002b0a:	4313      	orrs	r3, r2
 8002b0c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002b0e:	697b      	ldr	r3, [r7, #20]
 8002b10:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002b14:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002b16:	683b      	ldr	r3, [r7, #0]
 8002b18:	689b      	ldr	r3, [r3, #8]
 8002b1a:	021b      	lsls	r3, r3, #8
 8002b1c:	697a      	ldr	r2, [r7, #20]
 8002b1e:	4313      	orrs	r3, r2
 8002b20:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	4a1d      	ldr	r2, [pc, #116]	; (8002b9c <TIM_OC3_SetConfig+0xd0>)
 8002b26:	4293      	cmp	r3, r2
 8002b28:	d10d      	bne.n	8002b46 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002b2a:	697b      	ldr	r3, [r7, #20]
 8002b2c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002b30:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002b32:	683b      	ldr	r3, [r7, #0]
 8002b34:	68db      	ldr	r3, [r3, #12]
 8002b36:	021b      	lsls	r3, r3, #8
 8002b38:	697a      	ldr	r2, [r7, #20]
 8002b3a:	4313      	orrs	r3, r2
 8002b3c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002b3e:	697b      	ldr	r3, [r7, #20]
 8002b40:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002b44:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	4a14      	ldr	r2, [pc, #80]	; (8002b9c <TIM_OC3_SetConfig+0xd0>)
 8002b4a:	4293      	cmp	r3, r2
 8002b4c:	d113      	bne.n	8002b76 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002b4e:	693b      	ldr	r3, [r7, #16]
 8002b50:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002b54:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002b56:	693b      	ldr	r3, [r7, #16]
 8002b58:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002b5c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002b5e:	683b      	ldr	r3, [r7, #0]
 8002b60:	695b      	ldr	r3, [r3, #20]
 8002b62:	011b      	lsls	r3, r3, #4
 8002b64:	693a      	ldr	r2, [r7, #16]
 8002b66:	4313      	orrs	r3, r2
 8002b68:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002b6a:	683b      	ldr	r3, [r7, #0]
 8002b6c:	699b      	ldr	r3, [r3, #24]
 8002b6e:	011b      	lsls	r3, r3, #4
 8002b70:	693a      	ldr	r2, [r7, #16]
 8002b72:	4313      	orrs	r3, r2
 8002b74:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	693a      	ldr	r2, [r7, #16]
 8002b7a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	68fa      	ldr	r2, [r7, #12]
 8002b80:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002b82:	683b      	ldr	r3, [r7, #0]
 8002b84:	685a      	ldr	r2, [r3, #4]
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	697a      	ldr	r2, [r7, #20]
 8002b8e:	621a      	str	r2, [r3, #32]
}
 8002b90:	bf00      	nop
 8002b92:	371c      	adds	r7, #28
 8002b94:	46bd      	mov	sp, r7
 8002b96:	bc80      	pop	{r7}
 8002b98:	4770      	bx	lr
 8002b9a:	bf00      	nop
 8002b9c:	40012c00 	.word	0x40012c00

08002ba0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002ba0:	b480      	push	{r7}
 8002ba2:	b087      	sub	sp, #28
 8002ba4:	af00      	add	r7, sp, #0
 8002ba6:	6078      	str	r0, [r7, #4]
 8002ba8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	6a1b      	ldr	r3, [r3, #32]
 8002bae:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	6a1b      	ldr	r3, [r3, #32]
 8002bb4:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	685b      	ldr	r3, [r3, #4]
 8002bc0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	69db      	ldr	r3, [r3, #28]
 8002bc6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002bce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002bd6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002bd8:	683b      	ldr	r3, [r7, #0]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	021b      	lsls	r3, r3, #8
 8002bde:	68fa      	ldr	r2, [r7, #12]
 8002be0:	4313      	orrs	r3, r2
 8002be2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002be4:	693b      	ldr	r3, [r7, #16]
 8002be6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002bea:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002bec:	683b      	ldr	r3, [r7, #0]
 8002bee:	689b      	ldr	r3, [r3, #8]
 8002bf0:	031b      	lsls	r3, r3, #12
 8002bf2:	693a      	ldr	r2, [r7, #16]
 8002bf4:	4313      	orrs	r3, r2
 8002bf6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	4a0f      	ldr	r2, [pc, #60]	; (8002c38 <TIM_OC4_SetConfig+0x98>)
 8002bfc:	4293      	cmp	r3, r2
 8002bfe:	d109      	bne.n	8002c14 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002c00:	697b      	ldr	r3, [r7, #20]
 8002c02:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002c06:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002c08:	683b      	ldr	r3, [r7, #0]
 8002c0a:	695b      	ldr	r3, [r3, #20]
 8002c0c:	019b      	lsls	r3, r3, #6
 8002c0e:	697a      	ldr	r2, [r7, #20]
 8002c10:	4313      	orrs	r3, r2
 8002c12:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	697a      	ldr	r2, [r7, #20]
 8002c18:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	68fa      	ldr	r2, [r7, #12]
 8002c1e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002c20:	683b      	ldr	r3, [r7, #0]
 8002c22:	685a      	ldr	r2, [r3, #4]
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	693a      	ldr	r2, [r7, #16]
 8002c2c:	621a      	str	r2, [r3, #32]
}
 8002c2e:	bf00      	nop
 8002c30:	371c      	adds	r7, #28
 8002c32:	46bd      	mov	sp, r7
 8002c34:	bc80      	pop	{r7}
 8002c36:	4770      	bx	lr
 8002c38:	40012c00 	.word	0x40012c00

08002c3c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002c3c:	b480      	push	{r7}
 8002c3e:	b087      	sub	sp, #28
 8002c40:	af00      	add	r7, sp, #0
 8002c42:	60f8      	str	r0, [r7, #12]
 8002c44:	60b9      	str	r1, [r7, #8]
 8002c46:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002c48:	68bb      	ldr	r3, [r7, #8]
 8002c4a:	f003 031f 	and.w	r3, r3, #31
 8002c4e:	2201      	movs	r2, #1
 8002c50:	fa02 f303 	lsl.w	r3, r2, r3
 8002c54:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	6a1a      	ldr	r2, [r3, #32]
 8002c5a:	697b      	ldr	r3, [r7, #20]
 8002c5c:	43db      	mvns	r3, r3
 8002c5e:	401a      	ands	r2, r3
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	6a1a      	ldr	r2, [r3, #32]
 8002c68:	68bb      	ldr	r3, [r7, #8]
 8002c6a:	f003 031f 	and.w	r3, r3, #31
 8002c6e:	6879      	ldr	r1, [r7, #4]
 8002c70:	fa01 f303 	lsl.w	r3, r1, r3
 8002c74:	431a      	orrs	r2, r3
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	621a      	str	r2, [r3, #32]
}
 8002c7a:	bf00      	nop
 8002c7c:	371c      	adds	r7, #28
 8002c7e:	46bd      	mov	sp, r7
 8002c80:	bc80      	pop	{r7}
 8002c82:	4770      	bx	lr

08002c84 <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002c84:	b580      	push	{r7, lr}
 8002c86:	b084      	sub	sp, #16
 8002c88:	af00      	add	r7, sp, #0
 8002c8a:	6078      	str	r0, [r7, #4]
 8002c8c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002c8e:	683b      	ldr	r3, [r7, #0]
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d109      	bne.n	8002ca8 <HAL_TIMEx_PWMN_Start+0x24>
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002c9a:	b2db      	uxtb	r3, r3
 8002c9c:	2b01      	cmp	r3, #1
 8002c9e:	bf14      	ite	ne
 8002ca0:	2301      	movne	r3, #1
 8002ca2:	2300      	moveq	r3, #0
 8002ca4:	b2db      	uxtb	r3, r3
 8002ca6:	e022      	b.n	8002cee <HAL_TIMEx_PWMN_Start+0x6a>
 8002ca8:	683b      	ldr	r3, [r7, #0]
 8002caa:	2b04      	cmp	r3, #4
 8002cac:	d109      	bne.n	8002cc2 <HAL_TIMEx_PWMN_Start+0x3e>
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8002cb4:	b2db      	uxtb	r3, r3
 8002cb6:	2b01      	cmp	r3, #1
 8002cb8:	bf14      	ite	ne
 8002cba:	2301      	movne	r3, #1
 8002cbc:	2300      	moveq	r3, #0
 8002cbe:	b2db      	uxtb	r3, r3
 8002cc0:	e015      	b.n	8002cee <HAL_TIMEx_PWMN_Start+0x6a>
 8002cc2:	683b      	ldr	r3, [r7, #0]
 8002cc4:	2b08      	cmp	r3, #8
 8002cc6:	d109      	bne.n	8002cdc <HAL_TIMEx_PWMN_Start+0x58>
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002cce:	b2db      	uxtb	r3, r3
 8002cd0:	2b01      	cmp	r3, #1
 8002cd2:	bf14      	ite	ne
 8002cd4:	2301      	movne	r3, #1
 8002cd6:	2300      	moveq	r3, #0
 8002cd8:	b2db      	uxtb	r3, r3
 8002cda:	e008      	b.n	8002cee <HAL_TIMEx_PWMN_Start+0x6a>
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002ce2:	b2db      	uxtb	r3, r3
 8002ce4:	2b01      	cmp	r3, #1
 8002ce6:	bf14      	ite	ne
 8002ce8:	2301      	movne	r3, #1
 8002cea:	2300      	moveq	r3, #0
 8002cec:	b2db      	uxtb	r3, r3
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d001      	beq.n	8002cf6 <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 8002cf2:	2301      	movs	r3, #1
 8002cf4:	e054      	b.n	8002da0 <HAL_TIMEx_PWMN_Start+0x11c>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002cf6:	683b      	ldr	r3, [r7, #0]
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d104      	bne.n	8002d06 <HAL_TIMEx_PWMN_Start+0x82>
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	2202      	movs	r2, #2
 8002d00:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002d04:	e013      	b.n	8002d2e <HAL_TIMEx_PWMN_Start+0xaa>
 8002d06:	683b      	ldr	r3, [r7, #0]
 8002d08:	2b04      	cmp	r3, #4
 8002d0a:	d104      	bne.n	8002d16 <HAL_TIMEx_PWMN_Start+0x92>
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	2202      	movs	r2, #2
 8002d10:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002d14:	e00b      	b.n	8002d2e <HAL_TIMEx_PWMN_Start+0xaa>
 8002d16:	683b      	ldr	r3, [r7, #0]
 8002d18:	2b08      	cmp	r3, #8
 8002d1a:	d104      	bne.n	8002d26 <HAL_TIMEx_PWMN_Start+0xa2>
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	2202      	movs	r2, #2
 8002d20:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002d24:	e003      	b.n	8002d2e <HAL_TIMEx_PWMN_Start+0xaa>
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	2202      	movs	r2, #2
 8002d2a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	2204      	movs	r2, #4
 8002d34:	6839      	ldr	r1, [r7, #0]
 8002d36:	4618      	mov	r0, r3
 8002d38:	f000 f8e3 	bl	8002f02 <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002d4a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	4a15      	ldr	r2, [pc, #84]	; (8002da8 <HAL_TIMEx_PWMN_Start+0x124>)
 8002d52:	4293      	cmp	r3, r2
 8002d54:	d009      	beq.n	8002d6a <HAL_TIMEx_PWMN_Start+0xe6>
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d5e:	d004      	beq.n	8002d6a <HAL_TIMEx_PWMN_Start+0xe6>
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	4a11      	ldr	r2, [pc, #68]	; (8002dac <HAL_TIMEx_PWMN_Start+0x128>)
 8002d66:	4293      	cmp	r3, r2
 8002d68:	d111      	bne.n	8002d8e <HAL_TIMEx_PWMN_Start+0x10a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	689b      	ldr	r3, [r3, #8]
 8002d70:	f003 0307 	and.w	r3, r3, #7
 8002d74:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	2b06      	cmp	r3, #6
 8002d7a:	d010      	beq.n	8002d9e <HAL_TIMEx_PWMN_Start+0x11a>
    {
      __HAL_TIM_ENABLE(htim);
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	681a      	ldr	r2, [r3, #0]
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	f042 0201 	orr.w	r2, r2, #1
 8002d8a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002d8c:	e007      	b.n	8002d9e <HAL_TIMEx_PWMN_Start+0x11a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	681a      	ldr	r2, [r3, #0]
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	f042 0201 	orr.w	r2, r2, #1
 8002d9c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002d9e:	2300      	movs	r3, #0
}
 8002da0:	4618      	mov	r0, r3
 8002da2:	3710      	adds	r7, #16
 8002da4:	46bd      	mov	sp, r7
 8002da6:	bd80      	pop	{r7, pc}
 8002da8:	40012c00 	.word	0x40012c00
 8002dac:	40000400 	.word	0x40000400

08002db0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002db0:	b480      	push	{r7}
 8002db2:	b085      	sub	sp, #20
 8002db4:	af00      	add	r7, sp, #0
 8002db6:	6078      	str	r0, [r7, #4]
 8002db8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002dc0:	2b01      	cmp	r3, #1
 8002dc2:	d101      	bne.n	8002dc8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002dc4:	2302      	movs	r3, #2
 8002dc6:	e041      	b.n	8002e4c <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	2201      	movs	r2, #1
 8002dcc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	2202      	movs	r2, #2
 8002dd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	685b      	ldr	r3, [r3, #4]
 8002dde:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	689b      	ldr	r3, [r3, #8]
 8002de6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002dee:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002df0:	683b      	ldr	r3, [r7, #0]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	68fa      	ldr	r2, [r7, #12]
 8002df6:	4313      	orrs	r3, r2
 8002df8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	68fa      	ldr	r2, [r7, #12]
 8002e00:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	4a14      	ldr	r2, [pc, #80]	; (8002e58 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8002e08:	4293      	cmp	r3, r2
 8002e0a:	d009      	beq.n	8002e20 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e14:	d004      	beq.n	8002e20 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	4a10      	ldr	r2, [pc, #64]	; (8002e5c <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8002e1c:	4293      	cmp	r3, r2
 8002e1e:	d10c      	bne.n	8002e3a <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002e20:	68bb      	ldr	r3, [r7, #8]
 8002e22:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002e26:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002e28:	683b      	ldr	r3, [r7, #0]
 8002e2a:	685b      	ldr	r3, [r3, #4]
 8002e2c:	68ba      	ldr	r2, [r7, #8]
 8002e2e:	4313      	orrs	r3, r2
 8002e30:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	68ba      	ldr	r2, [r7, #8]
 8002e38:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	2201      	movs	r2, #1
 8002e3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	2200      	movs	r2, #0
 8002e46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002e4a:	2300      	movs	r3, #0
}
 8002e4c:	4618      	mov	r0, r3
 8002e4e:	3714      	adds	r7, #20
 8002e50:	46bd      	mov	sp, r7
 8002e52:	bc80      	pop	{r7}
 8002e54:	4770      	bx	lr
 8002e56:	bf00      	nop
 8002e58:	40012c00 	.word	0x40012c00
 8002e5c:	40000400 	.word	0x40000400

08002e60 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8002e60:	b480      	push	{r7}
 8002e62:	b085      	sub	sp, #20
 8002e64:	af00      	add	r7, sp, #0
 8002e66:	6078      	str	r0, [r7, #4]
 8002e68:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8002e6a:	2300      	movs	r3, #0
 8002e6c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002e74:	2b01      	cmp	r3, #1
 8002e76:	d101      	bne.n	8002e7c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8002e78:	2302      	movs	r3, #2
 8002e7a:	e03d      	b.n	8002ef8 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	2201      	movs	r2, #1
 8002e80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8002e8a:	683b      	ldr	r3, [r7, #0]
 8002e8c:	68db      	ldr	r3, [r3, #12]
 8002e8e:	4313      	orrs	r3, r2
 8002e90:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002e98:	683b      	ldr	r3, [r7, #0]
 8002e9a:	689b      	ldr	r3, [r3, #8]
 8002e9c:	4313      	orrs	r3, r2
 8002e9e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8002ea6:	683b      	ldr	r3, [r7, #0]
 8002ea8:	685b      	ldr	r3, [r3, #4]
 8002eaa:	4313      	orrs	r3, r2
 8002eac:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8002eb4:	683b      	ldr	r3, [r7, #0]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	4313      	orrs	r3, r2
 8002eba:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002ec2:	683b      	ldr	r3, [r7, #0]
 8002ec4:	691b      	ldr	r3, [r3, #16]
 8002ec6:	4313      	orrs	r3, r2
 8002ec8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8002ed0:	683b      	ldr	r3, [r7, #0]
 8002ed2:	695b      	ldr	r3, [r3, #20]
 8002ed4:	4313      	orrs	r3, r2
 8002ed6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8002ede:	683b      	ldr	r3, [r7, #0]
 8002ee0:	69db      	ldr	r3, [r3, #28]
 8002ee2:	4313      	orrs	r3, r2
 8002ee4:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	68fa      	ldr	r2, [r7, #12]
 8002eec:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	2200      	movs	r2, #0
 8002ef2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002ef6:	2300      	movs	r3, #0
}
 8002ef8:	4618      	mov	r0, r3
 8002efa:	3714      	adds	r7, #20
 8002efc:	46bd      	mov	sp, r7
 8002efe:	bc80      	pop	{r7}
 8002f00:	4770      	bx	lr

08002f02 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 8002f02:	b480      	push	{r7}
 8002f04:	b087      	sub	sp, #28
 8002f06:	af00      	add	r7, sp, #0
 8002f08:	60f8      	str	r0, [r7, #12]
 8002f0a:	60b9      	str	r1, [r7, #8]
 8002f0c:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002f0e:	68bb      	ldr	r3, [r7, #8]
 8002f10:	f003 031f 	and.w	r3, r3, #31
 8002f14:	2204      	movs	r2, #4
 8002f16:	fa02 f303 	lsl.w	r3, r2, r3
 8002f1a:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	6a1a      	ldr	r2, [r3, #32]
 8002f20:	697b      	ldr	r3, [r7, #20]
 8002f22:	43db      	mvns	r3, r3
 8002f24:	401a      	ands	r2, r3
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	6a1a      	ldr	r2, [r3, #32]
 8002f2e:	68bb      	ldr	r3, [r7, #8]
 8002f30:	f003 031f 	and.w	r3, r3, #31
 8002f34:	6879      	ldr	r1, [r7, #4]
 8002f36:	fa01 f303 	lsl.w	r3, r1, r3
 8002f3a:	431a      	orrs	r2, r3
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	621a      	str	r2, [r3, #32]
}
 8002f40:	bf00      	nop
 8002f42:	371c      	adds	r7, #28
 8002f44:	46bd      	mov	sp, r7
 8002f46:	bc80      	pop	{r7}
 8002f48:	4770      	bx	lr
	...

08002f4c <siprintf>:
 8002f4c:	b40e      	push	{r1, r2, r3}
 8002f4e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8002f52:	b500      	push	{lr}
 8002f54:	b09c      	sub	sp, #112	; 0x70
 8002f56:	ab1d      	add	r3, sp, #116	; 0x74
 8002f58:	9002      	str	r0, [sp, #8]
 8002f5a:	9006      	str	r0, [sp, #24]
 8002f5c:	9107      	str	r1, [sp, #28]
 8002f5e:	9104      	str	r1, [sp, #16]
 8002f60:	4808      	ldr	r0, [pc, #32]	; (8002f84 <siprintf+0x38>)
 8002f62:	4909      	ldr	r1, [pc, #36]	; (8002f88 <siprintf+0x3c>)
 8002f64:	f853 2b04 	ldr.w	r2, [r3], #4
 8002f68:	9105      	str	r1, [sp, #20]
 8002f6a:	6800      	ldr	r0, [r0, #0]
 8002f6c:	a902      	add	r1, sp, #8
 8002f6e:	9301      	str	r3, [sp, #4]
 8002f70:	f000 f98e 	bl	8003290 <_svfiprintf_r>
 8002f74:	2200      	movs	r2, #0
 8002f76:	9b02      	ldr	r3, [sp, #8]
 8002f78:	701a      	strb	r2, [r3, #0]
 8002f7a:	b01c      	add	sp, #112	; 0x70
 8002f7c:	f85d eb04 	ldr.w	lr, [sp], #4
 8002f80:	b003      	add	sp, #12
 8002f82:	4770      	bx	lr
 8002f84:	20000060 	.word	0x20000060
 8002f88:	ffff0208 	.word	0xffff0208

08002f8c <memset>:
 8002f8c:	4603      	mov	r3, r0
 8002f8e:	4402      	add	r2, r0
 8002f90:	4293      	cmp	r3, r2
 8002f92:	d100      	bne.n	8002f96 <memset+0xa>
 8002f94:	4770      	bx	lr
 8002f96:	f803 1b01 	strb.w	r1, [r3], #1
 8002f9a:	e7f9      	b.n	8002f90 <memset+0x4>

08002f9c <__errno>:
 8002f9c:	4b01      	ldr	r3, [pc, #4]	; (8002fa4 <__errno+0x8>)
 8002f9e:	6818      	ldr	r0, [r3, #0]
 8002fa0:	4770      	bx	lr
 8002fa2:	bf00      	nop
 8002fa4:	20000060 	.word	0x20000060

08002fa8 <__libc_init_array>:
 8002fa8:	b570      	push	{r4, r5, r6, lr}
 8002faa:	2600      	movs	r6, #0
 8002fac:	4d0c      	ldr	r5, [pc, #48]	; (8002fe0 <__libc_init_array+0x38>)
 8002fae:	4c0d      	ldr	r4, [pc, #52]	; (8002fe4 <__libc_init_array+0x3c>)
 8002fb0:	1b64      	subs	r4, r4, r5
 8002fb2:	10a4      	asrs	r4, r4, #2
 8002fb4:	42a6      	cmp	r6, r4
 8002fb6:	d109      	bne.n	8002fcc <__libc_init_array+0x24>
 8002fb8:	f000 fc7a 	bl	80038b0 <_init>
 8002fbc:	2600      	movs	r6, #0
 8002fbe:	4d0a      	ldr	r5, [pc, #40]	; (8002fe8 <__libc_init_array+0x40>)
 8002fc0:	4c0a      	ldr	r4, [pc, #40]	; (8002fec <__libc_init_array+0x44>)
 8002fc2:	1b64      	subs	r4, r4, r5
 8002fc4:	10a4      	asrs	r4, r4, #2
 8002fc6:	42a6      	cmp	r6, r4
 8002fc8:	d105      	bne.n	8002fd6 <__libc_init_array+0x2e>
 8002fca:	bd70      	pop	{r4, r5, r6, pc}
 8002fcc:	f855 3b04 	ldr.w	r3, [r5], #4
 8002fd0:	4798      	blx	r3
 8002fd2:	3601      	adds	r6, #1
 8002fd4:	e7ee      	b.n	8002fb4 <__libc_init_array+0xc>
 8002fd6:	f855 3b04 	ldr.w	r3, [r5], #4
 8002fda:	4798      	blx	r3
 8002fdc:	3601      	adds	r6, #1
 8002fde:	e7f2      	b.n	8002fc6 <__libc_init_array+0x1e>
 8002fe0:	08003c88 	.word	0x08003c88
 8002fe4:	08003c88 	.word	0x08003c88
 8002fe8:	08003c88 	.word	0x08003c88
 8002fec:	08003c8c 	.word	0x08003c8c

08002ff0 <__retarget_lock_acquire_recursive>:
 8002ff0:	4770      	bx	lr

08002ff2 <__retarget_lock_release_recursive>:
 8002ff2:	4770      	bx	lr

08002ff4 <_free_r>:
 8002ff4:	b538      	push	{r3, r4, r5, lr}
 8002ff6:	4605      	mov	r5, r0
 8002ff8:	2900      	cmp	r1, #0
 8002ffa:	d040      	beq.n	800307e <_free_r+0x8a>
 8002ffc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003000:	1f0c      	subs	r4, r1, #4
 8003002:	2b00      	cmp	r3, #0
 8003004:	bfb8      	it	lt
 8003006:	18e4      	addlt	r4, r4, r3
 8003008:	f000 f8dc 	bl	80031c4 <__malloc_lock>
 800300c:	4a1c      	ldr	r2, [pc, #112]	; (8003080 <_free_r+0x8c>)
 800300e:	6813      	ldr	r3, [r2, #0]
 8003010:	b933      	cbnz	r3, 8003020 <_free_r+0x2c>
 8003012:	6063      	str	r3, [r4, #4]
 8003014:	6014      	str	r4, [r2, #0]
 8003016:	4628      	mov	r0, r5
 8003018:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800301c:	f000 b8d8 	b.w	80031d0 <__malloc_unlock>
 8003020:	42a3      	cmp	r3, r4
 8003022:	d908      	bls.n	8003036 <_free_r+0x42>
 8003024:	6820      	ldr	r0, [r4, #0]
 8003026:	1821      	adds	r1, r4, r0
 8003028:	428b      	cmp	r3, r1
 800302a:	bf01      	itttt	eq
 800302c:	6819      	ldreq	r1, [r3, #0]
 800302e:	685b      	ldreq	r3, [r3, #4]
 8003030:	1809      	addeq	r1, r1, r0
 8003032:	6021      	streq	r1, [r4, #0]
 8003034:	e7ed      	b.n	8003012 <_free_r+0x1e>
 8003036:	461a      	mov	r2, r3
 8003038:	685b      	ldr	r3, [r3, #4]
 800303a:	b10b      	cbz	r3, 8003040 <_free_r+0x4c>
 800303c:	42a3      	cmp	r3, r4
 800303e:	d9fa      	bls.n	8003036 <_free_r+0x42>
 8003040:	6811      	ldr	r1, [r2, #0]
 8003042:	1850      	adds	r0, r2, r1
 8003044:	42a0      	cmp	r0, r4
 8003046:	d10b      	bne.n	8003060 <_free_r+0x6c>
 8003048:	6820      	ldr	r0, [r4, #0]
 800304a:	4401      	add	r1, r0
 800304c:	1850      	adds	r0, r2, r1
 800304e:	4283      	cmp	r3, r0
 8003050:	6011      	str	r1, [r2, #0]
 8003052:	d1e0      	bne.n	8003016 <_free_r+0x22>
 8003054:	6818      	ldr	r0, [r3, #0]
 8003056:	685b      	ldr	r3, [r3, #4]
 8003058:	4408      	add	r0, r1
 800305a:	6010      	str	r0, [r2, #0]
 800305c:	6053      	str	r3, [r2, #4]
 800305e:	e7da      	b.n	8003016 <_free_r+0x22>
 8003060:	d902      	bls.n	8003068 <_free_r+0x74>
 8003062:	230c      	movs	r3, #12
 8003064:	602b      	str	r3, [r5, #0]
 8003066:	e7d6      	b.n	8003016 <_free_r+0x22>
 8003068:	6820      	ldr	r0, [r4, #0]
 800306a:	1821      	adds	r1, r4, r0
 800306c:	428b      	cmp	r3, r1
 800306e:	bf01      	itttt	eq
 8003070:	6819      	ldreq	r1, [r3, #0]
 8003072:	685b      	ldreq	r3, [r3, #4]
 8003074:	1809      	addeq	r1, r1, r0
 8003076:	6021      	streq	r1, [r4, #0]
 8003078:	6063      	str	r3, [r4, #4]
 800307a:	6054      	str	r4, [r2, #4]
 800307c:	e7cb      	b.n	8003016 <_free_r+0x22>
 800307e:	bd38      	pop	{r3, r4, r5, pc}
 8003080:	2000024c 	.word	0x2000024c

08003084 <sbrk_aligned>:
 8003084:	b570      	push	{r4, r5, r6, lr}
 8003086:	4e0e      	ldr	r6, [pc, #56]	; (80030c0 <sbrk_aligned+0x3c>)
 8003088:	460c      	mov	r4, r1
 800308a:	6831      	ldr	r1, [r6, #0]
 800308c:	4605      	mov	r5, r0
 800308e:	b911      	cbnz	r1, 8003096 <sbrk_aligned+0x12>
 8003090:	f000 fbaa 	bl	80037e8 <_sbrk_r>
 8003094:	6030      	str	r0, [r6, #0]
 8003096:	4621      	mov	r1, r4
 8003098:	4628      	mov	r0, r5
 800309a:	f000 fba5 	bl	80037e8 <_sbrk_r>
 800309e:	1c43      	adds	r3, r0, #1
 80030a0:	d00a      	beq.n	80030b8 <sbrk_aligned+0x34>
 80030a2:	1cc4      	adds	r4, r0, #3
 80030a4:	f024 0403 	bic.w	r4, r4, #3
 80030a8:	42a0      	cmp	r0, r4
 80030aa:	d007      	beq.n	80030bc <sbrk_aligned+0x38>
 80030ac:	1a21      	subs	r1, r4, r0
 80030ae:	4628      	mov	r0, r5
 80030b0:	f000 fb9a 	bl	80037e8 <_sbrk_r>
 80030b4:	3001      	adds	r0, #1
 80030b6:	d101      	bne.n	80030bc <sbrk_aligned+0x38>
 80030b8:	f04f 34ff 	mov.w	r4, #4294967295
 80030bc:	4620      	mov	r0, r4
 80030be:	bd70      	pop	{r4, r5, r6, pc}
 80030c0:	20000250 	.word	0x20000250

080030c4 <_malloc_r>:
 80030c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80030c8:	1ccd      	adds	r5, r1, #3
 80030ca:	f025 0503 	bic.w	r5, r5, #3
 80030ce:	3508      	adds	r5, #8
 80030d0:	2d0c      	cmp	r5, #12
 80030d2:	bf38      	it	cc
 80030d4:	250c      	movcc	r5, #12
 80030d6:	2d00      	cmp	r5, #0
 80030d8:	4607      	mov	r7, r0
 80030da:	db01      	blt.n	80030e0 <_malloc_r+0x1c>
 80030dc:	42a9      	cmp	r1, r5
 80030de:	d905      	bls.n	80030ec <_malloc_r+0x28>
 80030e0:	230c      	movs	r3, #12
 80030e2:	2600      	movs	r6, #0
 80030e4:	603b      	str	r3, [r7, #0]
 80030e6:	4630      	mov	r0, r6
 80030e8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80030ec:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80031c0 <_malloc_r+0xfc>
 80030f0:	f000 f868 	bl	80031c4 <__malloc_lock>
 80030f4:	f8d8 3000 	ldr.w	r3, [r8]
 80030f8:	461c      	mov	r4, r3
 80030fa:	bb5c      	cbnz	r4, 8003154 <_malloc_r+0x90>
 80030fc:	4629      	mov	r1, r5
 80030fe:	4638      	mov	r0, r7
 8003100:	f7ff ffc0 	bl	8003084 <sbrk_aligned>
 8003104:	1c43      	adds	r3, r0, #1
 8003106:	4604      	mov	r4, r0
 8003108:	d155      	bne.n	80031b6 <_malloc_r+0xf2>
 800310a:	f8d8 4000 	ldr.w	r4, [r8]
 800310e:	4626      	mov	r6, r4
 8003110:	2e00      	cmp	r6, #0
 8003112:	d145      	bne.n	80031a0 <_malloc_r+0xdc>
 8003114:	2c00      	cmp	r4, #0
 8003116:	d048      	beq.n	80031aa <_malloc_r+0xe6>
 8003118:	6823      	ldr	r3, [r4, #0]
 800311a:	4631      	mov	r1, r6
 800311c:	4638      	mov	r0, r7
 800311e:	eb04 0903 	add.w	r9, r4, r3
 8003122:	f000 fb61 	bl	80037e8 <_sbrk_r>
 8003126:	4581      	cmp	r9, r0
 8003128:	d13f      	bne.n	80031aa <_malloc_r+0xe6>
 800312a:	6821      	ldr	r1, [r4, #0]
 800312c:	4638      	mov	r0, r7
 800312e:	1a6d      	subs	r5, r5, r1
 8003130:	4629      	mov	r1, r5
 8003132:	f7ff ffa7 	bl	8003084 <sbrk_aligned>
 8003136:	3001      	adds	r0, #1
 8003138:	d037      	beq.n	80031aa <_malloc_r+0xe6>
 800313a:	6823      	ldr	r3, [r4, #0]
 800313c:	442b      	add	r3, r5
 800313e:	6023      	str	r3, [r4, #0]
 8003140:	f8d8 3000 	ldr.w	r3, [r8]
 8003144:	2b00      	cmp	r3, #0
 8003146:	d038      	beq.n	80031ba <_malloc_r+0xf6>
 8003148:	685a      	ldr	r2, [r3, #4]
 800314a:	42a2      	cmp	r2, r4
 800314c:	d12b      	bne.n	80031a6 <_malloc_r+0xe2>
 800314e:	2200      	movs	r2, #0
 8003150:	605a      	str	r2, [r3, #4]
 8003152:	e00f      	b.n	8003174 <_malloc_r+0xb0>
 8003154:	6822      	ldr	r2, [r4, #0]
 8003156:	1b52      	subs	r2, r2, r5
 8003158:	d41f      	bmi.n	800319a <_malloc_r+0xd6>
 800315a:	2a0b      	cmp	r2, #11
 800315c:	d917      	bls.n	800318e <_malloc_r+0xca>
 800315e:	1961      	adds	r1, r4, r5
 8003160:	42a3      	cmp	r3, r4
 8003162:	6025      	str	r5, [r4, #0]
 8003164:	bf18      	it	ne
 8003166:	6059      	strne	r1, [r3, #4]
 8003168:	6863      	ldr	r3, [r4, #4]
 800316a:	bf08      	it	eq
 800316c:	f8c8 1000 	streq.w	r1, [r8]
 8003170:	5162      	str	r2, [r4, r5]
 8003172:	604b      	str	r3, [r1, #4]
 8003174:	4638      	mov	r0, r7
 8003176:	f104 060b 	add.w	r6, r4, #11
 800317a:	f000 f829 	bl	80031d0 <__malloc_unlock>
 800317e:	f026 0607 	bic.w	r6, r6, #7
 8003182:	1d23      	adds	r3, r4, #4
 8003184:	1af2      	subs	r2, r6, r3
 8003186:	d0ae      	beq.n	80030e6 <_malloc_r+0x22>
 8003188:	1b9b      	subs	r3, r3, r6
 800318a:	50a3      	str	r3, [r4, r2]
 800318c:	e7ab      	b.n	80030e6 <_malloc_r+0x22>
 800318e:	42a3      	cmp	r3, r4
 8003190:	6862      	ldr	r2, [r4, #4]
 8003192:	d1dd      	bne.n	8003150 <_malloc_r+0x8c>
 8003194:	f8c8 2000 	str.w	r2, [r8]
 8003198:	e7ec      	b.n	8003174 <_malloc_r+0xb0>
 800319a:	4623      	mov	r3, r4
 800319c:	6864      	ldr	r4, [r4, #4]
 800319e:	e7ac      	b.n	80030fa <_malloc_r+0x36>
 80031a0:	4634      	mov	r4, r6
 80031a2:	6876      	ldr	r6, [r6, #4]
 80031a4:	e7b4      	b.n	8003110 <_malloc_r+0x4c>
 80031a6:	4613      	mov	r3, r2
 80031a8:	e7cc      	b.n	8003144 <_malloc_r+0x80>
 80031aa:	230c      	movs	r3, #12
 80031ac:	4638      	mov	r0, r7
 80031ae:	603b      	str	r3, [r7, #0]
 80031b0:	f000 f80e 	bl	80031d0 <__malloc_unlock>
 80031b4:	e797      	b.n	80030e6 <_malloc_r+0x22>
 80031b6:	6025      	str	r5, [r4, #0]
 80031b8:	e7dc      	b.n	8003174 <_malloc_r+0xb0>
 80031ba:	605b      	str	r3, [r3, #4]
 80031bc:	deff      	udf	#255	; 0xff
 80031be:	bf00      	nop
 80031c0:	2000024c 	.word	0x2000024c

080031c4 <__malloc_lock>:
 80031c4:	4801      	ldr	r0, [pc, #4]	; (80031cc <__malloc_lock+0x8>)
 80031c6:	f7ff bf13 	b.w	8002ff0 <__retarget_lock_acquire_recursive>
 80031ca:	bf00      	nop
 80031cc:	20000248 	.word	0x20000248

080031d0 <__malloc_unlock>:
 80031d0:	4801      	ldr	r0, [pc, #4]	; (80031d8 <__malloc_unlock+0x8>)
 80031d2:	f7ff bf0e 	b.w	8002ff2 <__retarget_lock_release_recursive>
 80031d6:	bf00      	nop
 80031d8:	20000248 	.word	0x20000248

080031dc <__ssputs_r>:
 80031dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80031e0:	461f      	mov	r7, r3
 80031e2:	688e      	ldr	r6, [r1, #8]
 80031e4:	4682      	mov	sl, r0
 80031e6:	42be      	cmp	r6, r7
 80031e8:	460c      	mov	r4, r1
 80031ea:	4690      	mov	r8, r2
 80031ec:	680b      	ldr	r3, [r1, #0]
 80031ee:	d82c      	bhi.n	800324a <__ssputs_r+0x6e>
 80031f0:	898a      	ldrh	r2, [r1, #12]
 80031f2:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80031f6:	d026      	beq.n	8003246 <__ssputs_r+0x6a>
 80031f8:	6965      	ldr	r5, [r4, #20]
 80031fa:	6909      	ldr	r1, [r1, #16]
 80031fc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003200:	eba3 0901 	sub.w	r9, r3, r1
 8003204:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003208:	1c7b      	adds	r3, r7, #1
 800320a:	444b      	add	r3, r9
 800320c:	106d      	asrs	r5, r5, #1
 800320e:	429d      	cmp	r5, r3
 8003210:	bf38      	it	cc
 8003212:	461d      	movcc	r5, r3
 8003214:	0553      	lsls	r3, r2, #21
 8003216:	d527      	bpl.n	8003268 <__ssputs_r+0x8c>
 8003218:	4629      	mov	r1, r5
 800321a:	f7ff ff53 	bl	80030c4 <_malloc_r>
 800321e:	4606      	mov	r6, r0
 8003220:	b360      	cbz	r0, 800327c <__ssputs_r+0xa0>
 8003222:	464a      	mov	r2, r9
 8003224:	6921      	ldr	r1, [r4, #16]
 8003226:	f000 fafd 	bl	8003824 <memcpy>
 800322a:	89a3      	ldrh	r3, [r4, #12]
 800322c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003230:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003234:	81a3      	strh	r3, [r4, #12]
 8003236:	6126      	str	r6, [r4, #16]
 8003238:	444e      	add	r6, r9
 800323a:	6026      	str	r6, [r4, #0]
 800323c:	463e      	mov	r6, r7
 800323e:	6165      	str	r5, [r4, #20]
 8003240:	eba5 0509 	sub.w	r5, r5, r9
 8003244:	60a5      	str	r5, [r4, #8]
 8003246:	42be      	cmp	r6, r7
 8003248:	d900      	bls.n	800324c <__ssputs_r+0x70>
 800324a:	463e      	mov	r6, r7
 800324c:	4632      	mov	r2, r6
 800324e:	4641      	mov	r1, r8
 8003250:	6820      	ldr	r0, [r4, #0]
 8003252:	f000 faaf 	bl	80037b4 <memmove>
 8003256:	2000      	movs	r0, #0
 8003258:	68a3      	ldr	r3, [r4, #8]
 800325a:	1b9b      	subs	r3, r3, r6
 800325c:	60a3      	str	r3, [r4, #8]
 800325e:	6823      	ldr	r3, [r4, #0]
 8003260:	4433      	add	r3, r6
 8003262:	6023      	str	r3, [r4, #0]
 8003264:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003268:	462a      	mov	r2, r5
 800326a:	f000 fae9 	bl	8003840 <_realloc_r>
 800326e:	4606      	mov	r6, r0
 8003270:	2800      	cmp	r0, #0
 8003272:	d1e0      	bne.n	8003236 <__ssputs_r+0x5a>
 8003274:	4650      	mov	r0, sl
 8003276:	6921      	ldr	r1, [r4, #16]
 8003278:	f7ff febc 	bl	8002ff4 <_free_r>
 800327c:	230c      	movs	r3, #12
 800327e:	f8ca 3000 	str.w	r3, [sl]
 8003282:	89a3      	ldrh	r3, [r4, #12]
 8003284:	f04f 30ff 	mov.w	r0, #4294967295
 8003288:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800328c:	81a3      	strh	r3, [r4, #12]
 800328e:	e7e9      	b.n	8003264 <__ssputs_r+0x88>

08003290 <_svfiprintf_r>:
 8003290:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003294:	4698      	mov	r8, r3
 8003296:	898b      	ldrh	r3, [r1, #12]
 8003298:	4607      	mov	r7, r0
 800329a:	061b      	lsls	r3, r3, #24
 800329c:	460d      	mov	r5, r1
 800329e:	4614      	mov	r4, r2
 80032a0:	b09d      	sub	sp, #116	; 0x74
 80032a2:	d50e      	bpl.n	80032c2 <_svfiprintf_r+0x32>
 80032a4:	690b      	ldr	r3, [r1, #16]
 80032a6:	b963      	cbnz	r3, 80032c2 <_svfiprintf_r+0x32>
 80032a8:	2140      	movs	r1, #64	; 0x40
 80032aa:	f7ff ff0b 	bl	80030c4 <_malloc_r>
 80032ae:	6028      	str	r0, [r5, #0]
 80032b0:	6128      	str	r0, [r5, #16]
 80032b2:	b920      	cbnz	r0, 80032be <_svfiprintf_r+0x2e>
 80032b4:	230c      	movs	r3, #12
 80032b6:	603b      	str	r3, [r7, #0]
 80032b8:	f04f 30ff 	mov.w	r0, #4294967295
 80032bc:	e0d0      	b.n	8003460 <_svfiprintf_r+0x1d0>
 80032be:	2340      	movs	r3, #64	; 0x40
 80032c0:	616b      	str	r3, [r5, #20]
 80032c2:	2300      	movs	r3, #0
 80032c4:	9309      	str	r3, [sp, #36]	; 0x24
 80032c6:	2320      	movs	r3, #32
 80032c8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80032cc:	2330      	movs	r3, #48	; 0x30
 80032ce:	f04f 0901 	mov.w	r9, #1
 80032d2:	f8cd 800c 	str.w	r8, [sp, #12]
 80032d6:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 8003478 <_svfiprintf_r+0x1e8>
 80032da:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80032de:	4623      	mov	r3, r4
 80032e0:	469a      	mov	sl, r3
 80032e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80032e6:	b10a      	cbz	r2, 80032ec <_svfiprintf_r+0x5c>
 80032e8:	2a25      	cmp	r2, #37	; 0x25
 80032ea:	d1f9      	bne.n	80032e0 <_svfiprintf_r+0x50>
 80032ec:	ebba 0b04 	subs.w	fp, sl, r4
 80032f0:	d00b      	beq.n	800330a <_svfiprintf_r+0x7a>
 80032f2:	465b      	mov	r3, fp
 80032f4:	4622      	mov	r2, r4
 80032f6:	4629      	mov	r1, r5
 80032f8:	4638      	mov	r0, r7
 80032fa:	f7ff ff6f 	bl	80031dc <__ssputs_r>
 80032fe:	3001      	adds	r0, #1
 8003300:	f000 80a9 	beq.w	8003456 <_svfiprintf_r+0x1c6>
 8003304:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003306:	445a      	add	r2, fp
 8003308:	9209      	str	r2, [sp, #36]	; 0x24
 800330a:	f89a 3000 	ldrb.w	r3, [sl]
 800330e:	2b00      	cmp	r3, #0
 8003310:	f000 80a1 	beq.w	8003456 <_svfiprintf_r+0x1c6>
 8003314:	2300      	movs	r3, #0
 8003316:	f04f 32ff 	mov.w	r2, #4294967295
 800331a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800331e:	f10a 0a01 	add.w	sl, sl, #1
 8003322:	9304      	str	r3, [sp, #16]
 8003324:	9307      	str	r3, [sp, #28]
 8003326:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800332a:	931a      	str	r3, [sp, #104]	; 0x68
 800332c:	4654      	mov	r4, sl
 800332e:	2205      	movs	r2, #5
 8003330:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003334:	4850      	ldr	r0, [pc, #320]	; (8003478 <_svfiprintf_r+0x1e8>)
 8003336:	f000 fa67 	bl	8003808 <memchr>
 800333a:	9a04      	ldr	r2, [sp, #16]
 800333c:	b9d8      	cbnz	r0, 8003376 <_svfiprintf_r+0xe6>
 800333e:	06d0      	lsls	r0, r2, #27
 8003340:	bf44      	itt	mi
 8003342:	2320      	movmi	r3, #32
 8003344:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003348:	0711      	lsls	r1, r2, #28
 800334a:	bf44      	itt	mi
 800334c:	232b      	movmi	r3, #43	; 0x2b
 800334e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003352:	f89a 3000 	ldrb.w	r3, [sl]
 8003356:	2b2a      	cmp	r3, #42	; 0x2a
 8003358:	d015      	beq.n	8003386 <_svfiprintf_r+0xf6>
 800335a:	4654      	mov	r4, sl
 800335c:	2000      	movs	r0, #0
 800335e:	f04f 0c0a 	mov.w	ip, #10
 8003362:	9a07      	ldr	r2, [sp, #28]
 8003364:	4621      	mov	r1, r4
 8003366:	f811 3b01 	ldrb.w	r3, [r1], #1
 800336a:	3b30      	subs	r3, #48	; 0x30
 800336c:	2b09      	cmp	r3, #9
 800336e:	d94d      	bls.n	800340c <_svfiprintf_r+0x17c>
 8003370:	b1b0      	cbz	r0, 80033a0 <_svfiprintf_r+0x110>
 8003372:	9207      	str	r2, [sp, #28]
 8003374:	e014      	b.n	80033a0 <_svfiprintf_r+0x110>
 8003376:	eba0 0308 	sub.w	r3, r0, r8
 800337a:	fa09 f303 	lsl.w	r3, r9, r3
 800337e:	4313      	orrs	r3, r2
 8003380:	46a2      	mov	sl, r4
 8003382:	9304      	str	r3, [sp, #16]
 8003384:	e7d2      	b.n	800332c <_svfiprintf_r+0x9c>
 8003386:	9b03      	ldr	r3, [sp, #12]
 8003388:	1d19      	adds	r1, r3, #4
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	9103      	str	r1, [sp, #12]
 800338e:	2b00      	cmp	r3, #0
 8003390:	bfbb      	ittet	lt
 8003392:	425b      	neglt	r3, r3
 8003394:	f042 0202 	orrlt.w	r2, r2, #2
 8003398:	9307      	strge	r3, [sp, #28]
 800339a:	9307      	strlt	r3, [sp, #28]
 800339c:	bfb8      	it	lt
 800339e:	9204      	strlt	r2, [sp, #16]
 80033a0:	7823      	ldrb	r3, [r4, #0]
 80033a2:	2b2e      	cmp	r3, #46	; 0x2e
 80033a4:	d10c      	bne.n	80033c0 <_svfiprintf_r+0x130>
 80033a6:	7863      	ldrb	r3, [r4, #1]
 80033a8:	2b2a      	cmp	r3, #42	; 0x2a
 80033aa:	d134      	bne.n	8003416 <_svfiprintf_r+0x186>
 80033ac:	9b03      	ldr	r3, [sp, #12]
 80033ae:	3402      	adds	r4, #2
 80033b0:	1d1a      	adds	r2, r3, #4
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	9203      	str	r2, [sp, #12]
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	bfb8      	it	lt
 80033ba:	f04f 33ff 	movlt.w	r3, #4294967295
 80033be:	9305      	str	r3, [sp, #20]
 80033c0:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 800347c <_svfiprintf_r+0x1ec>
 80033c4:	2203      	movs	r2, #3
 80033c6:	4650      	mov	r0, sl
 80033c8:	7821      	ldrb	r1, [r4, #0]
 80033ca:	f000 fa1d 	bl	8003808 <memchr>
 80033ce:	b138      	cbz	r0, 80033e0 <_svfiprintf_r+0x150>
 80033d0:	2240      	movs	r2, #64	; 0x40
 80033d2:	9b04      	ldr	r3, [sp, #16]
 80033d4:	eba0 000a 	sub.w	r0, r0, sl
 80033d8:	4082      	lsls	r2, r0
 80033da:	4313      	orrs	r3, r2
 80033dc:	3401      	adds	r4, #1
 80033de:	9304      	str	r3, [sp, #16]
 80033e0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80033e4:	2206      	movs	r2, #6
 80033e6:	4826      	ldr	r0, [pc, #152]	; (8003480 <_svfiprintf_r+0x1f0>)
 80033e8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80033ec:	f000 fa0c 	bl	8003808 <memchr>
 80033f0:	2800      	cmp	r0, #0
 80033f2:	d038      	beq.n	8003466 <_svfiprintf_r+0x1d6>
 80033f4:	4b23      	ldr	r3, [pc, #140]	; (8003484 <_svfiprintf_r+0x1f4>)
 80033f6:	bb1b      	cbnz	r3, 8003440 <_svfiprintf_r+0x1b0>
 80033f8:	9b03      	ldr	r3, [sp, #12]
 80033fa:	3307      	adds	r3, #7
 80033fc:	f023 0307 	bic.w	r3, r3, #7
 8003400:	3308      	adds	r3, #8
 8003402:	9303      	str	r3, [sp, #12]
 8003404:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003406:	4433      	add	r3, r6
 8003408:	9309      	str	r3, [sp, #36]	; 0x24
 800340a:	e768      	b.n	80032de <_svfiprintf_r+0x4e>
 800340c:	460c      	mov	r4, r1
 800340e:	2001      	movs	r0, #1
 8003410:	fb0c 3202 	mla	r2, ip, r2, r3
 8003414:	e7a6      	b.n	8003364 <_svfiprintf_r+0xd4>
 8003416:	2300      	movs	r3, #0
 8003418:	f04f 0c0a 	mov.w	ip, #10
 800341c:	4619      	mov	r1, r3
 800341e:	3401      	adds	r4, #1
 8003420:	9305      	str	r3, [sp, #20]
 8003422:	4620      	mov	r0, r4
 8003424:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003428:	3a30      	subs	r2, #48	; 0x30
 800342a:	2a09      	cmp	r2, #9
 800342c:	d903      	bls.n	8003436 <_svfiprintf_r+0x1a6>
 800342e:	2b00      	cmp	r3, #0
 8003430:	d0c6      	beq.n	80033c0 <_svfiprintf_r+0x130>
 8003432:	9105      	str	r1, [sp, #20]
 8003434:	e7c4      	b.n	80033c0 <_svfiprintf_r+0x130>
 8003436:	4604      	mov	r4, r0
 8003438:	2301      	movs	r3, #1
 800343a:	fb0c 2101 	mla	r1, ip, r1, r2
 800343e:	e7f0      	b.n	8003422 <_svfiprintf_r+0x192>
 8003440:	ab03      	add	r3, sp, #12
 8003442:	9300      	str	r3, [sp, #0]
 8003444:	462a      	mov	r2, r5
 8003446:	4638      	mov	r0, r7
 8003448:	4b0f      	ldr	r3, [pc, #60]	; (8003488 <_svfiprintf_r+0x1f8>)
 800344a:	a904      	add	r1, sp, #16
 800344c:	f3af 8000 	nop.w
 8003450:	1c42      	adds	r2, r0, #1
 8003452:	4606      	mov	r6, r0
 8003454:	d1d6      	bne.n	8003404 <_svfiprintf_r+0x174>
 8003456:	89ab      	ldrh	r3, [r5, #12]
 8003458:	065b      	lsls	r3, r3, #25
 800345a:	f53f af2d 	bmi.w	80032b8 <_svfiprintf_r+0x28>
 800345e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003460:	b01d      	add	sp, #116	; 0x74
 8003462:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003466:	ab03      	add	r3, sp, #12
 8003468:	9300      	str	r3, [sp, #0]
 800346a:	462a      	mov	r2, r5
 800346c:	4638      	mov	r0, r7
 800346e:	4b06      	ldr	r3, [pc, #24]	; (8003488 <_svfiprintf_r+0x1f8>)
 8003470:	a904      	add	r1, sp, #16
 8003472:	f000 f87d 	bl	8003570 <_printf_i>
 8003476:	e7eb      	b.n	8003450 <_svfiprintf_r+0x1c0>
 8003478:	08003c52 	.word	0x08003c52
 800347c:	08003c58 	.word	0x08003c58
 8003480:	08003c5c 	.word	0x08003c5c
 8003484:	00000000 	.word	0x00000000
 8003488:	080031dd 	.word	0x080031dd

0800348c <_printf_common>:
 800348c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003490:	4616      	mov	r6, r2
 8003492:	4699      	mov	r9, r3
 8003494:	688a      	ldr	r2, [r1, #8]
 8003496:	690b      	ldr	r3, [r1, #16]
 8003498:	4607      	mov	r7, r0
 800349a:	4293      	cmp	r3, r2
 800349c:	bfb8      	it	lt
 800349e:	4613      	movlt	r3, r2
 80034a0:	6033      	str	r3, [r6, #0]
 80034a2:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80034a6:	460c      	mov	r4, r1
 80034a8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80034ac:	b10a      	cbz	r2, 80034b2 <_printf_common+0x26>
 80034ae:	3301      	adds	r3, #1
 80034b0:	6033      	str	r3, [r6, #0]
 80034b2:	6823      	ldr	r3, [r4, #0]
 80034b4:	0699      	lsls	r1, r3, #26
 80034b6:	bf42      	ittt	mi
 80034b8:	6833      	ldrmi	r3, [r6, #0]
 80034ba:	3302      	addmi	r3, #2
 80034bc:	6033      	strmi	r3, [r6, #0]
 80034be:	6825      	ldr	r5, [r4, #0]
 80034c0:	f015 0506 	ands.w	r5, r5, #6
 80034c4:	d106      	bne.n	80034d4 <_printf_common+0x48>
 80034c6:	f104 0a19 	add.w	sl, r4, #25
 80034ca:	68e3      	ldr	r3, [r4, #12]
 80034cc:	6832      	ldr	r2, [r6, #0]
 80034ce:	1a9b      	subs	r3, r3, r2
 80034d0:	42ab      	cmp	r3, r5
 80034d2:	dc2b      	bgt.n	800352c <_printf_common+0xa0>
 80034d4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80034d8:	1e13      	subs	r3, r2, #0
 80034da:	6822      	ldr	r2, [r4, #0]
 80034dc:	bf18      	it	ne
 80034de:	2301      	movne	r3, #1
 80034e0:	0692      	lsls	r2, r2, #26
 80034e2:	d430      	bmi.n	8003546 <_printf_common+0xba>
 80034e4:	4649      	mov	r1, r9
 80034e6:	4638      	mov	r0, r7
 80034e8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80034ec:	47c0      	blx	r8
 80034ee:	3001      	adds	r0, #1
 80034f0:	d023      	beq.n	800353a <_printf_common+0xae>
 80034f2:	6823      	ldr	r3, [r4, #0]
 80034f4:	6922      	ldr	r2, [r4, #16]
 80034f6:	f003 0306 	and.w	r3, r3, #6
 80034fa:	2b04      	cmp	r3, #4
 80034fc:	bf14      	ite	ne
 80034fe:	2500      	movne	r5, #0
 8003500:	6833      	ldreq	r3, [r6, #0]
 8003502:	f04f 0600 	mov.w	r6, #0
 8003506:	bf08      	it	eq
 8003508:	68e5      	ldreq	r5, [r4, #12]
 800350a:	f104 041a 	add.w	r4, r4, #26
 800350e:	bf08      	it	eq
 8003510:	1aed      	subeq	r5, r5, r3
 8003512:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8003516:	bf08      	it	eq
 8003518:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800351c:	4293      	cmp	r3, r2
 800351e:	bfc4      	itt	gt
 8003520:	1a9b      	subgt	r3, r3, r2
 8003522:	18ed      	addgt	r5, r5, r3
 8003524:	42b5      	cmp	r5, r6
 8003526:	d11a      	bne.n	800355e <_printf_common+0xd2>
 8003528:	2000      	movs	r0, #0
 800352a:	e008      	b.n	800353e <_printf_common+0xb2>
 800352c:	2301      	movs	r3, #1
 800352e:	4652      	mov	r2, sl
 8003530:	4649      	mov	r1, r9
 8003532:	4638      	mov	r0, r7
 8003534:	47c0      	blx	r8
 8003536:	3001      	adds	r0, #1
 8003538:	d103      	bne.n	8003542 <_printf_common+0xb6>
 800353a:	f04f 30ff 	mov.w	r0, #4294967295
 800353e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003542:	3501      	adds	r5, #1
 8003544:	e7c1      	b.n	80034ca <_printf_common+0x3e>
 8003546:	2030      	movs	r0, #48	; 0x30
 8003548:	18e1      	adds	r1, r4, r3
 800354a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800354e:	1c5a      	adds	r2, r3, #1
 8003550:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003554:	4422      	add	r2, r4
 8003556:	3302      	adds	r3, #2
 8003558:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800355c:	e7c2      	b.n	80034e4 <_printf_common+0x58>
 800355e:	2301      	movs	r3, #1
 8003560:	4622      	mov	r2, r4
 8003562:	4649      	mov	r1, r9
 8003564:	4638      	mov	r0, r7
 8003566:	47c0      	blx	r8
 8003568:	3001      	adds	r0, #1
 800356a:	d0e6      	beq.n	800353a <_printf_common+0xae>
 800356c:	3601      	adds	r6, #1
 800356e:	e7d9      	b.n	8003524 <_printf_common+0x98>

08003570 <_printf_i>:
 8003570:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003574:	7e0f      	ldrb	r7, [r1, #24]
 8003576:	4691      	mov	r9, r2
 8003578:	2f78      	cmp	r7, #120	; 0x78
 800357a:	4680      	mov	r8, r0
 800357c:	460c      	mov	r4, r1
 800357e:	469a      	mov	sl, r3
 8003580:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003582:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8003586:	d807      	bhi.n	8003598 <_printf_i+0x28>
 8003588:	2f62      	cmp	r7, #98	; 0x62
 800358a:	d80a      	bhi.n	80035a2 <_printf_i+0x32>
 800358c:	2f00      	cmp	r7, #0
 800358e:	f000 80d5 	beq.w	800373c <_printf_i+0x1cc>
 8003592:	2f58      	cmp	r7, #88	; 0x58
 8003594:	f000 80c1 	beq.w	800371a <_printf_i+0x1aa>
 8003598:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800359c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80035a0:	e03a      	b.n	8003618 <_printf_i+0xa8>
 80035a2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80035a6:	2b15      	cmp	r3, #21
 80035a8:	d8f6      	bhi.n	8003598 <_printf_i+0x28>
 80035aa:	a101      	add	r1, pc, #4	; (adr r1, 80035b0 <_printf_i+0x40>)
 80035ac:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80035b0:	08003609 	.word	0x08003609
 80035b4:	0800361d 	.word	0x0800361d
 80035b8:	08003599 	.word	0x08003599
 80035bc:	08003599 	.word	0x08003599
 80035c0:	08003599 	.word	0x08003599
 80035c4:	08003599 	.word	0x08003599
 80035c8:	0800361d 	.word	0x0800361d
 80035cc:	08003599 	.word	0x08003599
 80035d0:	08003599 	.word	0x08003599
 80035d4:	08003599 	.word	0x08003599
 80035d8:	08003599 	.word	0x08003599
 80035dc:	08003723 	.word	0x08003723
 80035e0:	08003649 	.word	0x08003649
 80035e4:	080036dd 	.word	0x080036dd
 80035e8:	08003599 	.word	0x08003599
 80035ec:	08003599 	.word	0x08003599
 80035f0:	08003745 	.word	0x08003745
 80035f4:	08003599 	.word	0x08003599
 80035f8:	08003649 	.word	0x08003649
 80035fc:	08003599 	.word	0x08003599
 8003600:	08003599 	.word	0x08003599
 8003604:	080036e5 	.word	0x080036e5
 8003608:	682b      	ldr	r3, [r5, #0]
 800360a:	1d1a      	adds	r2, r3, #4
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	602a      	str	r2, [r5, #0]
 8003610:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003614:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003618:	2301      	movs	r3, #1
 800361a:	e0a0      	b.n	800375e <_printf_i+0x1ee>
 800361c:	6820      	ldr	r0, [r4, #0]
 800361e:	682b      	ldr	r3, [r5, #0]
 8003620:	0607      	lsls	r7, r0, #24
 8003622:	f103 0104 	add.w	r1, r3, #4
 8003626:	6029      	str	r1, [r5, #0]
 8003628:	d501      	bpl.n	800362e <_printf_i+0xbe>
 800362a:	681e      	ldr	r6, [r3, #0]
 800362c:	e003      	b.n	8003636 <_printf_i+0xc6>
 800362e:	0646      	lsls	r6, r0, #25
 8003630:	d5fb      	bpl.n	800362a <_printf_i+0xba>
 8003632:	f9b3 6000 	ldrsh.w	r6, [r3]
 8003636:	2e00      	cmp	r6, #0
 8003638:	da03      	bge.n	8003642 <_printf_i+0xd2>
 800363a:	232d      	movs	r3, #45	; 0x2d
 800363c:	4276      	negs	r6, r6
 800363e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003642:	230a      	movs	r3, #10
 8003644:	4859      	ldr	r0, [pc, #356]	; (80037ac <_printf_i+0x23c>)
 8003646:	e012      	b.n	800366e <_printf_i+0xfe>
 8003648:	682b      	ldr	r3, [r5, #0]
 800364a:	6820      	ldr	r0, [r4, #0]
 800364c:	1d19      	adds	r1, r3, #4
 800364e:	6029      	str	r1, [r5, #0]
 8003650:	0605      	lsls	r5, r0, #24
 8003652:	d501      	bpl.n	8003658 <_printf_i+0xe8>
 8003654:	681e      	ldr	r6, [r3, #0]
 8003656:	e002      	b.n	800365e <_printf_i+0xee>
 8003658:	0641      	lsls	r1, r0, #25
 800365a:	d5fb      	bpl.n	8003654 <_printf_i+0xe4>
 800365c:	881e      	ldrh	r6, [r3, #0]
 800365e:	2f6f      	cmp	r7, #111	; 0x6f
 8003660:	bf0c      	ite	eq
 8003662:	2308      	moveq	r3, #8
 8003664:	230a      	movne	r3, #10
 8003666:	4851      	ldr	r0, [pc, #324]	; (80037ac <_printf_i+0x23c>)
 8003668:	2100      	movs	r1, #0
 800366a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800366e:	6865      	ldr	r5, [r4, #4]
 8003670:	2d00      	cmp	r5, #0
 8003672:	bfa8      	it	ge
 8003674:	6821      	ldrge	r1, [r4, #0]
 8003676:	60a5      	str	r5, [r4, #8]
 8003678:	bfa4      	itt	ge
 800367a:	f021 0104 	bicge.w	r1, r1, #4
 800367e:	6021      	strge	r1, [r4, #0]
 8003680:	b90e      	cbnz	r6, 8003686 <_printf_i+0x116>
 8003682:	2d00      	cmp	r5, #0
 8003684:	d04b      	beq.n	800371e <_printf_i+0x1ae>
 8003686:	4615      	mov	r5, r2
 8003688:	fbb6 f1f3 	udiv	r1, r6, r3
 800368c:	fb03 6711 	mls	r7, r3, r1, r6
 8003690:	5dc7      	ldrb	r7, [r0, r7]
 8003692:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8003696:	4637      	mov	r7, r6
 8003698:	42bb      	cmp	r3, r7
 800369a:	460e      	mov	r6, r1
 800369c:	d9f4      	bls.n	8003688 <_printf_i+0x118>
 800369e:	2b08      	cmp	r3, #8
 80036a0:	d10b      	bne.n	80036ba <_printf_i+0x14a>
 80036a2:	6823      	ldr	r3, [r4, #0]
 80036a4:	07de      	lsls	r6, r3, #31
 80036a6:	d508      	bpl.n	80036ba <_printf_i+0x14a>
 80036a8:	6923      	ldr	r3, [r4, #16]
 80036aa:	6861      	ldr	r1, [r4, #4]
 80036ac:	4299      	cmp	r1, r3
 80036ae:	bfde      	ittt	le
 80036b0:	2330      	movle	r3, #48	; 0x30
 80036b2:	f805 3c01 	strble.w	r3, [r5, #-1]
 80036b6:	f105 35ff 	addle.w	r5, r5, #4294967295
 80036ba:	1b52      	subs	r2, r2, r5
 80036bc:	6122      	str	r2, [r4, #16]
 80036be:	464b      	mov	r3, r9
 80036c0:	4621      	mov	r1, r4
 80036c2:	4640      	mov	r0, r8
 80036c4:	f8cd a000 	str.w	sl, [sp]
 80036c8:	aa03      	add	r2, sp, #12
 80036ca:	f7ff fedf 	bl	800348c <_printf_common>
 80036ce:	3001      	adds	r0, #1
 80036d0:	d14a      	bne.n	8003768 <_printf_i+0x1f8>
 80036d2:	f04f 30ff 	mov.w	r0, #4294967295
 80036d6:	b004      	add	sp, #16
 80036d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80036dc:	6823      	ldr	r3, [r4, #0]
 80036de:	f043 0320 	orr.w	r3, r3, #32
 80036e2:	6023      	str	r3, [r4, #0]
 80036e4:	2778      	movs	r7, #120	; 0x78
 80036e6:	4832      	ldr	r0, [pc, #200]	; (80037b0 <_printf_i+0x240>)
 80036e8:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80036ec:	6823      	ldr	r3, [r4, #0]
 80036ee:	6829      	ldr	r1, [r5, #0]
 80036f0:	061f      	lsls	r7, r3, #24
 80036f2:	f851 6b04 	ldr.w	r6, [r1], #4
 80036f6:	d402      	bmi.n	80036fe <_printf_i+0x18e>
 80036f8:	065f      	lsls	r7, r3, #25
 80036fa:	bf48      	it	mi
 80036fc:	b2b6      	uxthmi	r6, r6
 80036fe:	07df      	lsls	r7, r3, #31
 8003700:	bf48      	it	mi
 8003702:	f043 0320 	orrmi.w	r3, r3, #32
 8003706:	6029      	str	r1, [r5, #0]
 8003708:	bf48      	it	mi
 800370a:	6023      	strmi	r3, [r4, #0]
 800370c:	b91e      	cbnz	r6, 8003716 <_printf_i+0x1a6>
 800370e:	6823      	ldr	r3, [r4, #0]
 8003710:	f023 0320 	bic.w	r3, r3, #32
 8003714:	6023      	str	r3, [r4, #0]
 8003716:	2310      	movs	r3, #16
 8003718:	e7a6      	b.n	8003668 <_printf_i+0xf8>
 800371a:	4824      	ldr	r0, [pc, #144]	; (80037ac <_printf_i+0x23c>)
 800371c:	e7e4      	b.n	80036e8 <_printf_i+0x178>
 800371e:	4615      	mov	r5, r2
 8003720:	e7bd      	b.n	800369e <_printf_i+0x12e>
 8003722:	682b      	ldr	r3, [r5, #0]
 8003724:	6826      	ldr	r6, [r4, #0]
 8003726:	1d18      	adds	r0, r3, #4
 8003728:	6961      	ldr	r1, [r4, #20]
 800372a:	6028      	str	r0, [r5, #0]
 800372c:	0635      	lsls	r5, r6, #24
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	d501      	bpl.n	8003736 <_printf_i+0x1c6>
 8003732:	6019      	str	r1, [r3, #0]
 8003734:	e002      	b.n	800373c <_printf_i+0x1cc>
 8003736:	0670      	lsls	r0, r6, #25
 8003738:	d5fb      	bpl.n	8003732 <_printf_i+0x1c2>
 800373a:	8019      	strh	r1, [r3, #0]
 800373c:	2300      	movs	r3, #0
 800373e:	4615      	mov	r5, r2
 8003740:	6123      	str	r3, [r4, #16]
 8003742:	e7bc      	b.n	80036be <_printf_i+0x14e>
 8003744:	682b      	ldr	r3, [r5, #0]
 8003746:	2100      	movs	r1, #0
 8003748:	1d1a      	adds	r2, r3, #4
 800374a:	602a      	str	r2, [r5, #0]
 800374c:	681d      	ldr	r5, [r3, #0]
 800374e:	6862      	ldr	r2, [r4, #4]
 8003750:	4628      	mov	r0, r5
 8003752:	f000 f859 	bl	8003808 <memchr>
 8003756:	b108      	cbz	r0, 800375c <_printf_i+0x1ec>
 8003758:	1b40      	subs	r0, r0, r5
 800375a:	6060      	str	r0, [r4, #4]
 800375c:	6863      	ldr	r3, [r4, #4]
 800375e:	6123      	str	r3, [r4, #16]
 8003760:	2300      	movs	r3, #0
 8003762:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003766:	e7aa      	b.n	80036be <_printf_i+0x14e>
 8003768:	462a      	mov	r2, r5
 800376a:	4649      	mov	r1, r9
 800376c:	4640      	mov	r0, r8
 800376e:	6923      	ldr	r3, [r4, #16]
 8003770:	47d0      	blx	sl
 8003772:	3001      	adds	r0, #1
 8003774:	d0ad      	beq.n	80036d2 <_printf_i+0x162>
 8003776:	6823      	ldr	r3, [r4, #0]
 8003778:	079b      	lsls	r3, r3, #30
 800377a:	d413      	bmi.n	80037a4 <_printf_i+0x234>
 800377c:	68e0      	ldr	r0, [r4, #12]
 800377e:	9b03      	ldr	r3, [sp, #12]
 8003780:	4298      	cmp	r0, r3
 8003782:	bfb8      	it	lt
 8003784:	4618      	movlt	r0, r3
 8003786:	e7a6      	b.n	80036d6 <_printf_i+0x166>
 8003788:	2301      	movs	r3, #1
 800378a:	4632      	mov	r2, r6
 800378c:	4649      	mov	r1, r9
 800378e:	4640      	mov	r0, r8
 8003790:	47d0      	blx	sl
 8003792:	3001      	adds	r0, #1
 8003794:	d09d      	beq.n	80036d2 <_printf_i+0x162>
 8003796:	3501      	adds	r5, #1
 8003798:	68e3      	ldr	r3, [r4, #12]
 800379a:	9903      	ldr	r1, [sp, #12]
 800379c:	1a5b      	subs	r3, r3, r1
 800379e:	42ab      	cmp	r3, r5
 80037a0:	dcf2      	bgt.n	8003788 <_printf_i+0x218>
 80037a2:	e7eb      	b.n	800377c <_printf_i+0x20c>
 80037a4:	2500      	movs	r5, #0
 80037a6:	f104 0619 	add.w	r6, r4, #25
 80037aa:	e7f5      	b.n	8003798 <_printf_i+0x228>
 80037ac:	08003c63 	.word	0x08003c63
 80037b0:	08003c74 	.word	0x08003c74

080037b4 <memmove>:
 80037b4:	4288      	cmp	r0, r1
 80037b6:	b510      	push	{r4, lr}
 80037b8:	eb01 0402 	add.w	r4, r1, r2
 80037bc:	d902      	bls.n	80037c4 <memmove+0x10>
 80037be:	4284      	cmp	r4, r0
 80037c0:	4623      	mov	r3, r4
 80037c2:	d807      	bhi.n	80037d4 <memmove+0x20>
 80037c4:	1e43      	subs	r3, r0, #1
 80037c6:	42a1      	cmp	r1, r4
 80037c8:	d008      	beq.n	80037dc <memmove+0x28>
 80037ca:	f811 2b01 	ldrb.w	r2, [r1], #1
 80037ce:	f803 2f01 	strb.w	r2, [r3, #1]!
 80037d2:	e7f8      	b.n	80037c6 <memmove+0x12>
 80037d4:	4601      	mov	r1, r0
 80037d6:	4402      	add	r2, r0
 80037d8:	428a      	cmp	r2, r1
 80037da:	d100      	bne.n	80037de <memmove+0x2a>
 80037dc:	bd10      	pop	{r4, pc}
 80037de:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80037e2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80037e6:	e7f7      	b.n	80037d8 <memmove+0x24>

080037e8 <_sbrk_r>:
 80037e8:	b538      	push	{r3, r4, r5, lr}
 80037ea:	2300      	movs	r3, #0
 80037ec:	4d05      	ldr	r5, [pc, #20]	; (8003804 <_sbrk_r+0x1c>)
 80037ee:	4604      	mov	r4, r0
 80037f0:	4608      	mov	r0, r1
 80037f2:	602b      	str	r3, [r5, #0]
 80037f4:	f7fd f9a0 	bl	8000b38 <_sbrk>
 80037f8:	1c43      	adds	r3, r0, #1
 80037fa:	d102      	bne.n	8003802 <_sbrk_r+0x1a>
 80037fc:	682b      	ldr	r3, [r5, #0]
 80037fe:	b103      	cbz	r3, 8003802 <_sbrk_r+0x1a>
 8003800:	6023      	str	r3, [r4, #0]
 8003802:	bd38      	pop	{r3, r4, r5, pc}
 8003804:	20000244 	.word	0x20000244

08003808 <memchr>:
 8003808:	4603      	mov	r3, r0
 800380a:	b510      	push	{r4, lr}
 800380c:	b2c9      	uxtb	r1, r1
 800380e:	4402      	add	r2, r0
 8003810:	4293      	cmp	r3, r2
 8003812:	4618      	mov	r0, r3
 8003814:	d101      	bne.n	800381a <memchr+0x12>
 8003816:	2000      	movs	r0, #0
 8003818:	e003      	b.n	8003822 <memchr+0x1a>
 800381a:	7804      	ldrb	r4, [r0, #0]
 800381c:	3301      	adds	r3, #1
 800381e:	428c      	cmp	r4, r1
 8003820:	d1f6      	bne.n	8003810 <memchr+0x8>
 8003822:	bd10      	pop	{r4, pc}

08003824 <memcpy>:
 8003824:	440a      	add	r2, r1
 8003826:	4291      	cmp	r1, r2
 8003828:	f100 33ff 	add.w	r3, r0, #4294967295
 800382c:	d100      	bne.n	8003830 <memcpy+0xc>
 800382e:	4770      	bx	lr
 8003830:	b510      	push	{r4, lr}
 8003832:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003836:	4291      	cmp	r1, r2
 8003838:	f803 4f01 	strb.w	r4, [r3, #1]!
 800383c:	d1f9      	bne.n	8003832 <memcpy+0xe>
 800383e:	bd10      	pop	{r4, pc}

08003840 <_realloc_r>:
 8003840:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003844:	4680      	mov	r8, r0
 8003846:	4614      	mov	r4, r2
 8003848:	460e      	mov	r6, r1
 800384a:	b921      	cbnz	r1, 8003856 <_realloc_r+0x16>
 800384c:	4611      	mov	r1, r2
 800384e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003852:	f7ff bc37 	b.w	80030c4 <_malloc_r>
 8003856:	b92a      	cbnz	r2, 8003864 <_realloc_r+0x24>
 8003858:	f7ff fbcc 	bl	8002ff4 <_free_r>
 800385c:	4625      	mov	r5, r4
 800385e:	4628      	mov	r0, r5
 8003860:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003864:	f000 f81b 	bl	800389e <_malloc_usable_size_r>
 8003868:	4284      	cmp	r4, r0
 800386a:	4607      	mov	r7, r0
 800386c:	d802      	bhi.n	8003874 <_realloc_r+0x34>
 800386e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8003872:	d812      	bhi.n	800389a <_realloc_r+0x5a>
 8003874:	4621      	mov	r1, r4
 8003876:	4640      	mov	r0, r8
 8003878:	f7ff fc24 	bl	80030c4 <_malloc_r>
 800387c:	4605      	mov	r5, r0
 800387e:	2800      	cmp	r0, #0
 8003880:	d0ed      	beq.n	800385e <_realloc_r+0x1e>
 8003882:	42bc      	cmp	r4, r7
 8003884:	4622      	mov	r2, r4
 8003886:	4631      	mov	r1, r6
 8003888:	bf28      	it	cs
 800388a:	463a      	movcs	r2, r7
 800388c:	f7ff ffca 	bl	8003824 <memcpy>
 8003890:	4631      	mov	r1, r6
 8003892:	4640      	mov	r0, r8
 8003894:	f7ff fbae 	bl	8002ff4 <_free_r>
 8003898:	e7e1      	b.n	800385e <_realloc_r+0x1e>
 800389a:	4635      	mov	r5, r6
 800389c:	e7df      	b.n	800385e <_realloc_r+0x1e>

0800389e <_malloc_usable_size_r>:
 800389e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80038a2:	1f18      	subs	r0, r3, #4
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	bfbc      	itt	lt
 80038a8:	580b      	ldrlt	r3, [r1, r0]
 80038aa:	18c0      	addlt	r0, r0, r3
 80038ac:	4770      	bx	lr
	...

080038b0 <_init>:
 80038b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80038b2:	bf00      	nop
 80038b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80038b6:	bc08      	pop	{r3}
 80038b8:	469e      	mov	lr, r3
 80038ba:	4770      	bx	lr

080038bc <_fini>:
 80038bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80038be:	bf00      	nop
 80038c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80038c2:	bc08      	pop	{r3}
 80038c4:	469e      	mov	lr, r3
 80038c6:	4770      	bx	lr
